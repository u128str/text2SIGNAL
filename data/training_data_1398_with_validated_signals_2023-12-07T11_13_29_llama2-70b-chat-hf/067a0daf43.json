{"signal_description": "Count of case_id where event_name matches 'Create PO Item' and is followed by 'Release PO' and then 'Create Goods Receipt' and then either 'Record Invoice Receipt' or 'Create FI Invoice' and finally 'Clear Invoice', divided by count of case_id where event_name matches 'Clear Invoice' and multiplied by 100.", "llm_output": " {\n\"signal_description\": \"Count of case_id where event_name matches 'Create PO Item' and is followed by 'Release PO' and then 'Create Goods Receipt' and then either 'Record Invoice Receipt' or 'Create FI Invoice' and finally 'Clear Invoice', divided by count of case_id where event_name matches 'Clear Invoice' and multiplied by 100.\"\n}\n\nThe signal_description was constructed by breaking down the SIGNAL query into its component parts and describing each part in a human-readable format.\n\n* The first part of the query is \"COUNT(case_id)\". This part counts the number of unique values in the \"case_id\" column of the table.\n* The next part is \"FILTER (WHERE event_name MATCHES('Create PO Item' ~> 'Release PO' ~> 'Create Goods Receipt' ~> ('Record Invoice Receipt'|'Create FI Invoice') ~> 'Clear Invoice'))\". This part filters the data to only include rows where the value in the \"event_name\" column matches the specified pattern. The pattern is a sequence of events, where each event is separated by the \"~>\" symbol. The events are:\n\t+ \"Create PO Item\"\n\t+ \"Release PO\"\n\t+ \"Create Goods Receipt\"\n\t+ Either \"Record Invoice Receipt\" or \"Create FI Invoice\"\n\t+ \"Clear Invoice\"\n* The third part is \"/ COUNT(case_id) FILTER (WHERE event_name MATCHES ('Clear Invoice'))\". This part divides the count of case_id from the first part by the count of case_id where the value in the \"event_name\" column matches \"Clear Invoice\".\n* Finally, the result is multiplied by 100.\n\nThe table name is \"defaultview-124\". The column names used in the query are \"case_id\" and \"event_name\". The values used in the query are the specific event names mentioned in the filter clauses.", "error_message": null, "llm_input": "[INST]\nYou are SIGNAL assistant, a part of SAP Signavio's Process Intelligence Suite. \nSIGNAL stands for Signavio Analytics Language. \nSIGNAL is a dialect of SQL.\nYour goal is to help users craft SIGNAL \nqueries and understand the SIGNAL language better. \n\nTask to solve:\n\nSummarize the given SIGNAL query as a human-readable description with explicit reference to the table name,\nthe column names and respective values if they are used in the Signal query.\nSummarization style should look like a set of the instructions written by human who knows the table name, columns schema and respective values. \nExplain how this signal_description was constructed.\n\nSIGNAL query: \n\nSELECT\nCOUNT(case_id) FILTER (\n\tWHERE event_name MATCHES('Create PO Item'\n\t~> 'Release PO'\n\t~> 'Create Goods Receipt'\n\t~> ('Record Invoice Receipt'|'Create FI Invoice')\n\t~> 'Clear Invoice')) \n/ COUNT(case_id) FILTER (\n\tWHERE event_name MATCHES ('Clear Invoice'))\n* 100\nFROM \"defaultview-124\"\n                 \n \nExpected output result is in JSON format:\n{\n\"signal_description\": text of the Signal summary should be here\n}\nDo not output any other text, apart from the above JSON.\n[/INST]\n"}