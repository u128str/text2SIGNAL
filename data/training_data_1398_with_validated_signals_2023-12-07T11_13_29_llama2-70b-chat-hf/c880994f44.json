{"signal_description": "Calculate the percentage of invoices that have been cleared by the vendor, by dividing the number of invoices with a 'Clear Invoice' event by the total number of invoices, and then multiplying by 100. The 'Clear Invoice' event should be preceded by a 'Post Invoice' event, which should be preceded by a 'Vendor Creates Invoice' event, and followed by a 'Due Date passed' event.", "llm_output": " {\n\"signal_description\": \"Calculate the percentage of invoices that have been cleared by the vendor, by dividing the number of invoices with a 'Clear Invoice' event by the total number of invoices, and then multiplying by 100. The 'Clear Invoice' event should be preceded by a 'Post Invoice' event, which should be preceded by a 'Vendor Creates Invoice' event, and followed by a 'Due Date passed' event.\"\n}\n\nThis signal_description was constructed by:\n\n1. Identifying the main components of the SIGNAL query:\n\t* The table name: \"defaultview-225\"\n\t* The column names: CASE_ID, EVENT_NAME\n\t* The filter conditions: EVENT_NAME MATCHES ('Vendor Creates Invoice' ~> 'Post Invoice' ~> 'Due Date passed' ~> 'Clear Invoice') and EVENT_NAME MATCHES ('Clear Invoice')\n\t* The calculation: COUNT(CASE_ID) / COUNT(CASE_ID) * 100\n2. Breaking down the filter conditions into their individual parts:\n\t* 'Vendor Creates Invoice'\n\t* 'Post Invoice'\n\t* 'Due Date passed'\n\t* 'Clear Invoice'\n3. Identifying the relationships between the filter conditions:\n\t* 'Vendor Creates Invoice' should be followed by 'Post Invoice'\n\t* 'Post Invoice' should be followed by 'Due Date passed'\n\t* 'Due Date passed' should be followed by 'Clear Invoice'\n4. Combining the information from steps 2 and 3 into a human-readable description of the SIGNAL query.\n5. Formatting the description into a JSON object with the key \"signal_description\".", "error_message": null, "llm_input": "[INST]\nYou are SIGNAL assistant, a part of SAP Signavio's Process Intelligence Suite. \nSIGNAL stands for Signavio Analytics Language. \nSIGNAL is a dialect of SQL.\nYour goal is to help users craft SIGNAL \nqueries and understand the SIGNAL language better. \n\nTask to solve:\n\nSummarize the given SIGNAL query as a human-readable description with explicit reference to the table name,\nthe column names and respective values if they are used in the Signal query.\nSummarization style should look like a set of the instructions written by human who knows the table name, columns schema and respective values. \nExplain how this signal_description was constructed.\n\nSIGNAL query: \nSELECT\n  COUNT (CASE_ID) FILTER (\n    WHERE\n      EVENT_NAME MATCHES (\n        'Vendor Creates Invoice' ~> 'Post Invoice' ~> 'Due Date passed' ~> 'Clear Invoice'\n      )\n  ) / COUNT (CASE_ID) FILTER (\n    WHERE\n      EVENT_NAME MATCHES ('Clear Invoice')\n  ) * 100\nFROM\n  \"defaultview-225\" \n \nExpected output result is in JSON format:\n{\n\"signal_description\": text of the Signal summary should be here\n}\nDo not output any other text, apart from the above JSON.\n[/INST]\n"}