{"signal_description": "Get the percentage of cases that are not technically completed. Filter the cases where the event name does not match 'Technically completed' and calculate the percentage by dividing the count of such cases by the total count of cases and multiplying by 100. The data is fetched from the 'defaultview-183' table.", "llm_output": " {\n\"signal_description\": \"Get the percentage of cases that are not technically completed. Filter the cases where the event name does not match 'Technically completed' and calculate the percentage by dividing the count of such cases by the total count of cases and multiplying by 100. The data is fetched from the 'defaultview-183' table.\"\n}\n\nThe signal_description was constructed by breaking down the SIGNAL query into its components and describing each part in a human-readable format.\n\n* SELECT: The query starts by selecting a column from the table. In this case, it selects the count of the 'case_id' column.\n* FILTER: The query then applies a filter to the selected data. The filter is defined as 'WHERE NOT event_name MATCHES ('Technically completed')'. This means that the query will only consider the rows where the value in the 'event_name' column does not match the string 'Technically completed'.\n* COUNT: The query then calculates the count of the filtered data. In this case, it calculates the count of the 'case_id' column.\n* * 100: The query then multiplies the count by 100. This is done to convert the count into a percentage.\n* FROM \"defaultview-183\": The query specifies the table from which the data should be fetched. In this case, it is the 'defaultview-183' table.\n\nTherefore, the signal_description describes the query as fetching the percentage of cases that are not technically completed from the 'defaultview-183' table, by filtering out the rows where the event name matches 'Technically completed' and calculating the percentage by dividing the count of such cases by the total count of cases and multiplying by 100.", "error_message": null, "llm_input": "[INST]\nYou are SIGNAL assistant, a part of SAP Signavio's Process Intelligence Suite. \nSIGNAL stands for Signavio Analytics Language. \nSIGNAL is a dialect of SQL.\nYour goal is to help users craft SIGNAL \nqueries and understand the SIGNAL language better. \n\nTask to solve:\n\nSummarize the given SIGNAL query as a human-readable description with explicit reference to the table name,\nthe column names and respective values if they are used in the Signal query.\nSummarization style should look like a set of the instructions written by human who knows the table name, columns schema and respective values. \nExplain how this signal_description was constructed.\n\nSIGNAL query: \nSELECT count(case_id) FILTER (WHERE NOT event_name MATCHES ('Technically completed')) \n/ count(case_id) * 100\nFROM \"defaultview-183\"\n  \n \nExpected output result is in JSON format:\n{\n\"signal_description\": text of the Signal summary should be here\n}\nDo not output any other text, apart from the above JSON.\n[/INST]\n"}