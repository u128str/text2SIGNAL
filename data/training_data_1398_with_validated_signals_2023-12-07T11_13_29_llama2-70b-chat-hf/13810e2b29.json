{"signal_description": "Retrieve the number of distinct case IDs, calculate the percentage of cases updated by dialog, and group sales document item net value into ranges.\n\n* Count distinct case IDs and filter by cases updated by dialog (EventCreatedByUserType = 'Dialog' and ChangeType = 'Update').\n* Calculate the percentage of cases updated by dialog by dividing the number of updated cases by the total number of cases and multiplying by 100.\n* Group sales document item net value into the following ranges: 0 - 10, 10 - 1000, 1000 - 10000, and 10000+.", "llm_output": " {\n\"signal_description\": \"Retrieve the number of distinct case IDs, calculate the percentage of cases updated by dialog, and group sales document item net value into ranges.\n\n* Count distinct case IDs and filter by cases updated by dialog (EventCreatedByUserType = 'Dialog' and ChangeType = 'Update').\n* Calculate the percentage of cases updated by dialog by dividing the number of updated cases by the total number of cases and multiplying by 100.\n* Group sales document item net value into the following ranges: 0 - 10, 10 - 1000, 1000 - 10000, and 10000+.\"\n}\n\nThis signal_description was constructed by:\n\n1. Identifying the main components of the SIGNAL query:\n\t* The table name: \"defaultview-383\"\n\t* The column names: case_id, SalesDocItemNetValue\n\t* The filter condition: BEHAVIOR (EventCreatedByUserType IN ('Dialog') AND ChangeType = 'Update')\n\t* The aggregation functions: COUNT(DISTINCT case_id), COUNT(DISTINCT \"case_id\") FILTER (...), CASE ... END\n2. Breaking down the query into smaller parts and describing each part in a human-readable way:\n\t* Part 1: COUNT(DISTINCT case_id) - Retrieve the number of distinct case IDs.\n\t* Part 2: COUNT(DISTINCT case_id) FILTER (BEHAVIOR (EventCreatedByUserType IN ('Dialog') AND ChangeType = 'Update')) - Filter the cases by those updated by dialog.\n\t* Part 3: (COUNT(DISTINCT case_id) FILTER (BEHAVIOR (EventCreatedByUserType IN ('Dialog') AND ChangeType = 'Update')) / COUNT(DISTINCT \"case_id\")) * 100 - Calculate the percentage of cases updated by dialog.\n\t* Part 4: CASE SalesDocItemNetValue ... END - Group sales document item net value into ranges.\n3. Combining the descriptions of the parts into a single signal_description.", "error_message": null, "llm_input": "[INST]\nYou are SIGNAL assistant, a part of SAP Signavio's Process Intelligence Suite. \nSIGNAL stands for Signavio Analytics Language. \nSIGNAL is a dialect of SQL.\nYour goal is to help users craft SIGNAL \nqueries and understand the SIGNAL language better. \n\nTask to solve:\n\nSummarize the given SIGNAL query as a human-readable description with explicit reference to the table name,\nthe column names and respective values if they are used in the Signal query.\nSummarization style should look like a set of the instructions written by human who knows the table name, columns schema and respective values. \nExplain how this signal_description was constructed.\n\nSIGNAL query: \nSELECT\n  COUNT(DISTINCT case_id) AS \"# SDs\",\n  (\n    COUNT(DISTINCT case_id) FILTER (\n      WHERE\n        BEHAVIOR (\n          \"EventCreatedByUserType\" IN ('Dialog')\n          AND ChangeType = 'Update'\n        ) AS created_with_dialog MATCHES (created_with_dialog)\n    )\n  ) / COUNT(DISTINCT \"case_id\") * 100 AS \"Change rate\",\n  CASE\n    WHEN SalesDocItemNetValue <= 10 THEN '0 - 10'\n    WHEN SalesDocItemNetValue > 10\n    AND SalesDocItemNetValue <= 1000 THEN '10 - 1.000'\n    WHEN SalesDocItemNetValue > 1000\n    AND SalesDocItemNetValue <= 10000 THEN '1.000 - 10.000'\n    ELSE '10.000+'\n  END AS \"Sales Document Item Net Value Range\"\nFROM\n  \"defaultview-383\"\nORDER BY\n  1 DESC\nLIMIT\n  20 \n \nExpected output result is in JSON format:\n{\n\"signal_description\": text of the Signal summary should be here\n}\nDo not output any other text, apart from the above JSON.\n[/INST]\n"}