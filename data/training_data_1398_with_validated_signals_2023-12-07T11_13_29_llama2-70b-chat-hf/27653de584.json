{"signal_description": "For the current day, calculate the percentage of PO items that have not been delivered yet, out of all PO items that have not had their delivery completed. (From 'defaultview-57' table, use case_id column, and filter using DATE_TRUNC function with 'day' unit and NOW function, and PO Item Last Requested Delivery Date and PO Item Delivery Completed columns).", "llm_output": " {\n\"signal_description\": \"For the current day, calculate the percentage of PO items that have not been delivered yet, out of all PO items that have not had their delivery completed. (From 'defaultview-57' table, use case_id column, and filter using DATE_TRUNC function with 'day' unit and NOW function, and PO Item Last Requested Delivery Date and PO Item Delivery Completed columns).\"\n}\n\nThis signal_description was constructed by:\n\n1. Reading the SIGNAL query and identifying the main components:\n\t* SELECT clause: COUNT(case_id)\n\t* FILTER clauses: Two filters are applied, one with DATE_TRUNC and another with PO Item Delivery Completed\n\t* Calculation: The result is divided by COUNT(case_id) and multiplied by 100\n2. Understanding the table schema:\n\t* \"defaultview-57\" table is used\n\t* case_id column is used for counting\n\t* DATE_TRUNC function is applied to \"PO Item Last Requested Delivery Date\" column\n\t* \"PO Item Delivery Completed\" column is used with IS NULL and 'Yes' values\n3. Breaking down the query into smaller parts and describing each part:\n\t* First filter: \"WHERE DATE_TRUNC('day', NOW()) > 'PO Item Last Requested Delivery Date'\" - This filter selects rows where the current day is after the last requested delivery date.\n\t* Second filter: \"AND 'PO Item Delivery Completed' IS NULL\" - This filter selects rows where the delivery completion status is null.\n\t* Calculation: \"COUNT(case_id) FILTER (...)/COUNT(case_id) FILTER (...)*100\" - This calculates the percentage of rows that pass both filters out of all rows that pass the first filter.\n4. Combining the parts into a human-readable description, using proper column names and values, and including the table name.\n\nThe resulting signal_description provides a clear instruction set for a human to understand what the SIGNAL query is doing, without needing to know the specifics of the SIGNAL language.", "error_message": null, "llm_input": "[INST]\nYou are SIGNAL assistant, a part of SAP Signavio's Process Intelligence Suite. \nSIGNAL stands for Signavio Analytics Language. \nSIGNAL is a dialect of SQL.\nYour goal is to help users craft SIGNAL \nqueries and understand the SIGNAL language better. \n\nTask to solve:\n\nSummarize the given SIGNAL query as a human-readable description with explicit reference to the table name,\nthe column names and respective values if they are used in the Signal query.\nSummarization style should look like a set of the instructions written by human who knows the table name, columns schema and respective values. \nExplain how this signal_description was constructed.\n\nSIGNAL query: \nSELECT\n  COUNT(case_id) FILTER (\n      WHERE DATE_TRUNC('day', NOW()) > \"PO Item Last Requested Delivery Date\"\n    \tAND \"PO Item Delivery Completed\" IS NULL\n      )\n  /\n  COUNT(case_id) FILTER (\n      WHERE (\"PO Item Delivery Completed\" = 'Yes') IS NULL\n      )\n  * 100\nFROM \"defaultview-57\" \n \nExpected output result is in JSON format:\n{\n\"signal_description\": text of the Signal summary should be here\n}\nDo not output any other text, apart from the above JSON.\n[/INST]\n"}