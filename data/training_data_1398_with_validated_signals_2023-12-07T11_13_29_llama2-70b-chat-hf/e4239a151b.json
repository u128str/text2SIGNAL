{"signal_description": "Retrieve the number of cases and event name for each automation type. Automation type is determined by the 'Event Created By User Type' column, with values 'Dialog' for manual, 'System' or 'Service' for automated, and undefined for others. The result is grouped by the 'Event Name' and 'Automation' columns, sorted in descending order by the number of cases, and limited to the top 20 rows.", "llm_output": " {\n\"signal_description\": \"Retrieve the number of cases and event name for each automation type. Automation type is determined by the 'Event Created By User Type' column, with values 'Dialog' for manual, 'System' or 'Service' for automated, and undefined for others. The result is grouped by the 'Event Name' and 'Automation' columns, sorted in descending order by the number of cases, and limited to the top 20 rows.\"\n}\n\nThe signal_description was constructed by:\n\n1. Identifying the main components of the SIGNAL query:\n\t* SELECT clause: COUNT(event_name) AS \"Cases\", \"event_name\" AS \"Event Name\", CASE ... END AS \"Automation\"\n\t* FROM clause: FLATTEN(\"defaultview-225\")\n\t* WHERE clause: \"Event Created By User Type\" IS NOT NULL\n\t* GROUP BY clause: 2, 3\n\t* ORDER BY clause: 1 DESC NULLS LAST\n\t* LIMIT clause: 20\n2. Breaking down the query into smaller parts and describing each part in a human-readable format:\n\t* SELECT clause:\n\t\t+ COUNT(event_name) AS \"Cases\": Retrieves the number of events for each group.\n\t\t+ \"event_name\" AS \"Event Name\": Retrieves the name of the event for each group.\n\t\t+ CASE ... END AS \"Automation\": Determines the automation type based on the \"Event Created By User Type\" column and returns a human-readable label.\n\t* FROM clause:\n\t\t+ FLATTEN(\"defaultview-225\"): Specifies the table to query.\n\t* WHERE clause:\n\t\t+ \"Event Created By User Type\" IS NOT NULL: Filters out rows with null values in the \"Event Created By User Type\" column.\n\t* GROUP BY clause:\n\t\t+ 2, 3: Groups the rows by the \"Event Name\" and \"Automation\" columns.\n\t* ORDER BY clause:\n\t\t+ 1 DESC NULLS LAST: Sorts the groups in descending order by the number of cases, with null values appearing last.\n\t* LIMIT clause:\n\t\t+ 20: Limits the number of rows returned to the top 20.\n3. Combining the descriptions of each part into a single, coherent instruction.", "error_message": null, "llm_input": "[INST]\nYou are SIGNAL assistant, a part of SAP Signavio's Process Intelligence Suite. \nSIGNAL stands for Signavio Analytics Language. \nSIGNAL is a dialect of SQL.\nYour goal is to help users craft SIGNAL \nqueries and understand the SIGNAL language better. \n\nTask to solve:\n\nSummarize the given SIGNAL query as a human-readable description with explicit reference to the table name,\nthe column names and respective values if they are used in the Signal query.\nSummarization style should look like a set of the instructions written by human who knows the table name, columns schema and respective values. \nExplain how this signal_description was constructed.\n\nSIGNAL query: \nSELECT\n  COUNT(event_name) AS \"Cases\",\n  \"event_name\" AS \"Event Name\",\n  CASE\n    WHEN \"Event Created By User Type\" = 'Dialog' THEN 'Manual'\n    WHEN \"Event Created By User Type\" IN ('System', 'Service') THEN 'Automated'\n    ELSE 'undefined'\n  END AS \"Automation\"\nFROM\n  FLATTEN(\"defaultview-225\")\nWHERE\n  \"Event Created By User Type\" IS NOT NULL\nGROUP BY\n  2,\n  3\nORDER BY\n  1 DESC NULLS LAST\nLIMIT\n  20 \n \nExpected output result is in JSON format:\n{\n\"signal_description\": text of the Signal summary should be here\n}\nDo not output any other text, apart from the above JSON.\n[/INST]\n"}