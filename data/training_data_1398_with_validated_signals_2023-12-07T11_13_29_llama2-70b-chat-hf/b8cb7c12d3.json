{"signal_description": "For each CASE_ID, calculate the percentage of invoices that are cleared. First, count the number of 'Create PO Item' events that are followed by a 'Release PO' event, then a 'Create Goods Receipt' event, then either a 'Record Invoice Receipt' or 'Create FI Invoice' event, and finally a 'Clear Invoice' event. Divide this count by the total number of 'Clear Invoice' events for the same CASE_ID, and multiply by 100.", "llm_output": " {\n\"signal_description\": \"For each CASE_ID, calculate the percentage of invoices that are cleared. First, count the number of 'Create PO Item' events that are followed by a 'Release PO' event, then a 'Create Goods Receipt' event, then either a 'Record Invoice Receipt' or 'Create FI Invoice' event, and finally a 'Clear Invoice' event. Divide this count by the total number of 'Clear Invoice' events for the same CASE_ID, and multiply by 100.\"\n}\n\nThis signal_description was constructed by breaking down the SIGNAL query into its component parts and describing each part in a human-readable way.\n\n* First, we count the number of CASE_IDs that have a certain sequence of events: 'Create PO Item' followed by 'Release PO' followed by 'Create Goods Receipt' followed by either 'Record Invoice Receipt' or 'Create FI Invoice' followed by 'Clear Invoice'. This is done using the COUNT function with a FILTER clause that matches the specified event names.\n* Then, we count the total number of 'Clear Invoice' events for each CASE_ID. This is done using the COUNT function with a FILTER clause that matches the 'Clear Invoice' event name.\n* Finally, we divide the first count by the second count and multiply by 100 to get the percentage of invoices that are cleared for each CASE_ID. This is done using the / operator and the * operator.\n\nThe signal_description explains the logic of the SIGNAL query in a way that is easy to understand for a human reader who is familiar with the table name, column names, and respective values.", "error_message": null, "llm_input": "[INST]\nYou are SIGNAL assistant, a part of SAP Signavio's Process Intelligence Suite. \nSIGNAL stands for Signavio Analytics Language. \nSIGNAL is a dialect of SQL.\nYour goal is to help users craft SIGNAL \nqueries and understand the SIGNAL language better. \n\nTask to solve:\n\nSummarize the given SIGNAL query as a human-readable description with explicit reference to the table name,\nthe column names and respective values if they are used in the Signal query.\nSummarization style should look like a set of the instructions written by human who knows the table name, columns schema and respective values. \nExplain how this signal_description was constructed.\n\nSIGNAL query: \nSELECT \n\tCOUNT (CASE_ID) FILTER (WHERE EVENT_NAME MATCHES (\n    \t'Create PO Item'\n\t\t~> 'Release PO'\n\t\t~> 'Create Goods Receipt'\n\t\t~> ('Record Invoice Receipt'|'Create FI Invoice')\n\t\t~> 'Clear Invoice'\n        )) \n\t/ COUNT (CASE_ID) FILTER (WHERE EVENT_NAME MATCHES ('Clear Invoice')) \n    * 100\nFROM \"defaultview-124\"  \n \nExpected output result is in JSON format:\n{\n\"signal_description\": text of the Signal summary should be here\n}\nDo not output any other text, apart from the above JSON.\n[/INST]\n"}