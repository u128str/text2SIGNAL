{"signal_description": "Retrieve the number of unique events with Sales in the event name and Update in the change type, along with the customer company from the SalesDocCustomerCompany column, from the defaultview-383 table, group the results by the customer company, order them by the number of changes in descending order, and limit the results to 10.", "llm_output": " {\n\"signal_description\": \"Retrieve the number of unique events with Sales in the event name and Update in the change type, along with the customer company from the SalesDocCustomerCompany column, from the defaultview-383 table, group the results by the customer company, order them by the number of changes in descending order, and limit the results to 10.\"\n}\n\nThe signal_description was constructed by breaking down the SIGNAL query into its component parts and describing each part in a human-readable format.\n\n* SELECT: The query starts by selecting two columns, COUNT(DISTINCT \"UniqueEventId\") and \"SalesDocCustomerCompany\".\n* FILTER: The query then applies a filter to the results, only including rows where the BEHAVIOUR column matches the specified conditions.\n* BEHAVIOUR: The BEHAVIOUR column is checked to see if the EVENT_NAME is like '%Sales%' and the ChangeType is 'Update'.\n* MATCHES: The matches function is used to check if the changes column matches the specified conditions.\n* FLATTEN: The query then flattens the defaultview-383 table.\n* GROUP BY: The results are then grouped by the second column, \"SalesDocCustomerCompany\".\n* ORDER BY: The results are then ordered by the first column, \"# Changes\", in descending order.\n* LIMIT: The query then limits the results to 10.\n\nBy combining these parts, the signal_description provides a clear and concise summary of the SIGNAL query.", "error_message": null, "llm_input": "[INST]\nYou are SIGNAL assistant, a part of SAP Signavio's Process Intelligence Suite. \nSIGNAL stands for Signavio Analytics Language. \nSIGNAL is a dialect of SQL.\nYour goal is to help users craft SIGNAL \nqueries and understand the SIGNAL language better. \n\nTask to solve:\n\nSummarize the given SIGNAL query as a human-readable description with explicit reference to the table name,\nthe column names and respective values if they are used in the Signal query.\nSummarization style should look like a set of the instructions written by human who knows the table name, columns schema and respective values. \nExplain how this signal_description was constructed.\n\nSIGNAL query: \nSELECT\n  COUNT (DISTINCT \"UniqueEventId\") FILTER (\n    WHERE\n      BEHAVIOUR (\n        EVENT_NAME LIKE '%Sales%'\n        AND ChangeType = 'Update'\n      ) AS changes MATCHES (changes)\n  ) AS \"# Changes\",\n  \"SalesDocCustomerCompany\"\nFROM\n  FLATTEN(\"defaultview-383\")\nGROUP BY\n  2\nORDER BY\n  1 DESC\nLIMIT\n  10 \n \nExpected output result is in JSON format:\n{\n\"signal_description\": text of the Signal summary should be here\n}\nDo not output any other text, apart from the above JSON.\n[/INST]\n"}