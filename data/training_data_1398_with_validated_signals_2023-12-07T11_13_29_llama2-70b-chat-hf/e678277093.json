{"signal_description": "Retrieve the number of unique events per case, along with the SO change and company code name. Filter the results to show only updates made by dialog users, with the event name containing 'Sales Doc'. Group the results by company code name and SO change, and order them by the number of changes per case in descending order. Limit the results to the top 20 entries.", "llm_output": " {\n\"signal_description\": \"Retrieve the number of unique events per case, along with the SO change and company code name. Filter the results to show only updates made by dialog users, with the event name containing 'Sales Doc'. Group the results by company code name and SO change, and order them by the number of changes per case in descending order. Limit the results to the top 20 entries.\"\n}\n\nThe signal_description was constructed by breaking down the SIGNAL query into its component parts and describing each part in a human-readable format.\n\n* SELECT clause:\n\t+ COUNT(DISTINCT \"UniqueEventId\") AS \"# Changes per case\" - retrieves the number of unique events per case.\n\t+ event_name AS \"SO Change\" - retrieves the event name, which represents the SO change.\n\t+ \"InvoiceCompanyCode\" AS \"Company Code Name\" - retrieves the company code name.\n* FROM clause:\n\t+ FLATTEN(\"defaultview-383\") - specifies the table to query.\n* WHERE clause:\n\t+ BEHAVIOR (\n\t\t\"EventCreatedByUserType\" IN ('Dialog') - filters the results to show only events created by dialog users.\n\t\tAND event_name LIKE '%Sales Doc%' - filters the results to show only events with the event name containing 'Sales Doc'.\n\t\tAND ChangeType = 'Update' - filters the results to show only updates.\n\t  ) AS created_with_dialog MATCHES (created_with_dialog) - applies a behavior filter to the results.\n* GROUP BY clause:\n\t+ GROUP BY 2,3 - groups the results by the second and third columns (company code name and SO change).\n* ORDER BY clause:\n\t+ ORDER BY 1 DESC - orders the results by the first column (number of changes per case) in descending order.\n* LIMIT clause:\n\t+ LIMIT 20 - limits the results to the top 20 entries.\n\nThe signal_description is a human-readable summary of the SIGNAL query, which describes the query's purpose and the data it retrieves. It is constructed by referencing the table name, column names, and respective values used in the query.", "error_message": null, "llm_input": "[INST]\nYou are SIGNAL assistant, a part of SAP Signavio's Process Intelligence Suite. \nSIGNAL stands for Signavio Analytics Language. \nSIGNAL is a dialect of SQL.\nYour goal is to help users craft SIGNAL \nqueries and understand the SIGNAL language better. \n\nTask to solve:\n\nSummarize the given SIGNAL query as a human-readable description with explicit reference to the table name,\nthe column names and respective values if they are used in the Signal query.\nSummarization style should look like a set of the instructions written by human who knows the table name, columns schema and respective values. \nExplain how this signal_description was constructed.\n\nSIGNAL query: \nSELECT\n  COUNT(DISTINCT \"UniqueEventId\") AS \"# Changes per case\",\n  event_name AS \"SO Change\",\n  \"InvoiceCompanyCode\" AS \"Company Code Name\"\nFROM\n  FLATTEN(\"defaultview-383\")\nWHERE\n  BEHAVIOR (\n    \"EventCreatedByUserType\" IN ('Dialog')\n    AND event_name LIKE '%Sales Doc%'\n    AND ChangeType = 'Update'\n  ) AS created_with_dialog MATCHES (created_with_dialog)\nGROUP BY 2,3\nORDER BY\n  1 DESC\nLIMIT 20 \n \nExpected output result is in JSON format:\n{\n\"signal_description\": text of the Signal summary should be here\n}\nDo not output any other text, apart from the above JSON.\n[/INST]\n"}