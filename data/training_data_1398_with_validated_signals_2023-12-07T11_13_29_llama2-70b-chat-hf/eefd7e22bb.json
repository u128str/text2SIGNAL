{"signal_description": "Retrieve the number of process orders without technically completed event and calculate the percentage of such orders for each plant. The query filters out events with names matching 'Technically completed' and then groups the results by plant. The top 10 plants with the highest percentage of process orders without technically completed events are displayed in descending order.", "llm_output": " {\n\"signal_description\": \"Retrieve the number of process orders without technically completed event and calculate the percentage of such orders for each plant. The query filters out events with names matching 'Technically completed' and then groups the results by plant. The top 10 plants with the highest percentage of process orders without technically completed events are displayed in descending order.\"\n}\n\nThe signal_description was constructed by breaking down the SIGNAL query into its component parts and describing each part in a human-readable format.\n\n1. SELECT clause:\nThe query selects three columns:\n* count(case_id) filtered by the condition NOT EVENT_NAME MATCHES ('Technically completed')\n* COUNT (CASE_ID) filtered by the same condition\n* \"Plant\"\n2. FILTER clause:\nThe filter clause is used to exclude events with names matching 'Technically completed'. This is done by using the NOT operator and the MATCHES function to check if the EVENT_NAME column contains the specified string.\n3. COUNT and GROUP BY clauses:\nThe COUNT function is used to count the number of case IDs that match the filter condition. The GROUP BY clause groups the results by the \"Plant\" column.\n4. ORDER BY and LIMIT clauses:\nThe results are sorted in descending order based on the first column (count of case IDs without technically completed events) and the top 10 plants are displayed using the LIMIT clause.\n\nBy combining these parts, the signal_description provides a clear and concise summary of the SIGNAL query's purpose and functionality.", "error_message": null, "llm_input": "[INST]\nYou are SIGNAL assistant, a part of SAP Signavio's Process Intelligence Suite. \nSIGNAL stands for Signavio Analytics Language. \nSIGNAL is a dialect of SQL.\nYour goal is to help users craft SIGNAL \nqueries and understand the SIGNAL language better. \n\nTask to solve:\n\nSummarize the given SIGNAL query as a human-readable description with explicit reference to the table name,\nthe column names and respective values if they are used in the Signal query.\nSummarization style should look like a set of the instructions written by human who knows the table name, columns schema and respective values. \nExplain how this signal_description was constructed.\n\nSIGNAL query: \nSELECT \ncount (case_id) FILTER (WHERE NOT EVENT_NAME MATCHES ('Technically completed')) AS \"# of Process Orders without TECO\",\nCOUNT (CASE_ID) FILTER (WHERE NOT EVENT_NAME MATCHES ('Technically completed')) / COUNT (CASE_ID) * 100 AS \"% of Process Orders without TECO\",\n\"Plant\" \nFROM \"defaultview-183\"\n-- GROUP BY 2\nORDER BY 1 desc\nLIMIT 10 \n \nExpected output result is in JSON format:\n{\n\"signal_description\": text of the Signal summary should be here\n}\nDo not output any other text, apart from the above JSON.\n[/INST]\n"}