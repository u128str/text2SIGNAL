PUBLIC
2023-08-24
SAP  Signavio  Analytics  Language   Guide


                                       THE BEST RUN SAP
Â© 2023  SAP SE or an SAP  affiliate company. All rights reserved. Content



1       SAP  Signavio  Analytics  Language.......................................                              3
1.1     SIGNAL   Syntax.                                       ...............              .. ........................5
1.2     SIGNAL   aliases.                                                                                    . .7
 1.3    SIGNAL   SELECT  statement  and  clauses.                                                             .8
           SELECT   DISTINCT   clause.                                                                         12
           FROM   clause.                                                                                      15
           WHERE    clause.                                                                                   16
            FILTER Clause.                                                                                   .18
            GROUP   BY clause.                                                                                19
            ORDER   BY clause.                                                                                .21
            FILL clause.                                                                                      23
            LIMIT clause.                                                                                     24
           TABLESAMPLE      clause.                                                                           25
            OFFSET  clause.                                                                                   28
            FLATTEN   operator. . . . . . .  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .29
            UNION  ALL  clause.                                                                               31
1.4     SIGNAL   expressions and  functions. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .34
           Arithmetic  Expressions.  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35
            Comparison   Expressions. .                 .  .  .            .    .   .     .  .   .     .    . 39
           Logical Expressions.  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42
            Matching  Expressions.  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46
            LIKE and ILIKE Expressions.  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .51
            Conditional expressions.  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56
           Expressions  for NULL  values. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .62
            Literal expressions. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .64
           SIGNAL   functions.                                                                                66
2       SIGNAL   keywords..................................................136
3       SIGNAL   tutorial. .                                                                                 138
3.1     Understand  the sample  process.  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 139
3.2     Count  cases and  cities.                                                                           .140
3.3     Analyze order  amounts.  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144
3.4     Determine  case  cycle times.      ..................................................147
3.5     Investigate events.                                                              .........................150

                                                                                      SAP Signavio Analytics Language Guide
2      PUBLIC                                                                                              Content1         SAP        Signavio            Analytics             Language


Query language of SAP Signavio Process Intelligence optimized for performing process mining tasks on large
amounts  of event data
SAP  Signavio Analytics Language, SIGNAL is a specialized query language for process analysis.
The language is based on SQL. Like SQL, you use queries to retrieve data and perform calculations on the data.
However, it is not possible to change or delete process data.
The difference to SQL is the data model. While you usually query data from multiple tables with SQL, SIGNAL
queries the data from only one table, which contains nested events. In addition, SIGNAL provides numerous
custom  functions to work more effectively with this data structure.
SIGNAL  is optimized for process mining, for example to determine conformance, cycle times, and rework, and
it supports exploration at scale by all kind of SAP Signavio Process Intelligence users.
With SIGNAL, you can only retrieve data from processes to which you have access.


Data   model

When  mining the data of a process, you retrieve the data of a single table. This table contains the case
attributes and their nested events and event attributes. The following table shows this nested structure.
 case_ID      Customer ID  Status       City         events
 1001         2001         delivered    Berlin
                                                                               Payment     Cancellation
                                                     event_name   end_time    method       reason
                                                     Receive cus- 2020-07-01T
                                                     tomer order  09:00:00
                                                     Receive pay- 2020-07-02T  Bank trans-
                                                     ment         10:00:00    fer
                                                     Ship goods   2020-07-03T
                                                                  11:00:00
 1002         2002         canceled
                                                                               Payment     Cancellation
                                                     event_name   end_time    method       reason
                                                     Receive cus- 2020-07-04T
                                                     tomer order  13:00:00
                                                     Cancel order 2020-07-04T              Wrong size
                                                                  14:00:00


SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                             PUBLIC     3The columns  case_id,  event_name  and end_time   are always present. Case attributes like Customer ID,
Status,  and City have the same value throughout the case. Additional event attributes, in this example
Payment   method  and Cancellation    reason  can have different values for each event.
There are two ways to iterate over this data:
    per case
    Each case is treated as one row. The nested events and event attributes are represented as a nested table.
    per event
    Each event is treated as one row. The case ID and case attributes are repeated for each event.

Data   types
The data type of a column defines which value the column can hold. All data types can occur on case level as
well as on event level (nested).
SIGNAL  supports the following data types:
    Strings
    Numbers  stored as double precision floating point
    Timestamps  stored with millisecond precision, without time zone information.
    Durations stored with millisecond precision
    Booleans
All of these data types can appear in the source file and in the query result.
Both case and event attributes can be Null, indicating the absence of a value or an unknown value.

Process    mining
SIGNAL  queries are used in the widgets of an investigation.
When  configuring widgets, you have the following options:
    Create you own queries
    Use the default queries in the widgets and customize them if necessary
    Use the predefined queries from the metrics library and customize them if necessary
    Add your own queries to the metrics library for reuse
Read more  on the widgets in section Widgets.







                                                                               SAP Signavio Analytics Language Guide
4      PUBLIC                                                                     SAP Signavio Analytics Language1.1      SIGNAL       Syntax
SIGNAL follows a specific syntax that is described throughout this documentation using a special notation.
The syntax of SIGNAL is based on SQL but enhanced with functions to run in-depth process analysis queries.
All queries always follow this basic structure:
  SELECT expressions
 FROM  table/process
  WHERE conditions
  .& Example
  Example
         1  SELECT   count(case_id)
          2 FROM  THIS_PROCESS
         3  WHERE   "Customer    Type"   =  'Premium
         4  and    "Order   Status"    = 'Canceled'




     Premium      customers     with  canceled
      orders
     42



  This query counts the cases in the declared table for which the condition is true.

Syntax    Notation
The following notation is used to describe the syntax of SIGNAL. Note that this notation isn't part of the actual
query:
    Angle brackets indicate a required element. Don't include the angle brackets as part of a query.
SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                       PUBLIC   5
800    Example: ORDER   BY <expression>
    Square brackets indicate optional elements. Don't include the square brackets as part of a query.
    Example:[  WHERE   <condition>    ]
    The pipe symbol indicates a choice between two or more options. They're listed within square brackets
    (meaning  inclusion of a choice is optional) or curly brackets (meaning one of the options must be chosen).
    Don't include the pipe or brackets as part of a query.
    Example:  [ ASC  | DESC  ]
    Example: { AND   | OR  }
    An ellipsis indicates that the preceding element can be repeated an arbitrary number of times.
    Example:GROUP    BY columnIndex    [,  columnIndex    ...]



Keywords

SIGNAL  keywords  are case-insensitive, but are by convention written upper-case to distinguish them from
expressions. Read more on keywords in section SIGNAL keywords [page 136].



Attribute    Names

Attribute names are case-insensitive. In the following cases, the attribute name must be enclosed in double
quotes:
    The attribute shares the same name a reserved SIGNAL keyword.
    The attribute doesn't start with a letter or an underscore.
    The attribute name contains characters other than letters, numbers, or underscores.
    If the attribute name is enclosed in double quotes, the entire expression must be enclosed in double
    quotes.
    Example: "Premium  User" -> ""Premium User""
    If the attribute name contains one or more double quotes, these double quotes must be followed by a
    double quote.
    Example: Width in " (inches) -> "Width in "" (inches)"
    If the attribute name contains one or more single quotes, these single quotes must be followed by a double
    quote.
    Example: O'Reilly -> "O""Reilly"



Attribute    Values

Attribute values are, where applicable, case-sensitive. Attribute values of type String, Timestamp, and Duration
must always be enclosed in single quotes.


                                                                               SAP Signavio Analytics Language Guide
6      PUBLIC                                                                    SAP Signavio Analytics Language Semantic     Attributes
For SIGNAL, the following pre-defined semantic attributes are always present:
    case_id:  Unique identifier of the case
    event_name:   Event names of the case ordered by their time
    end_time:  End timestamps  of the events of a case
    start_time:   Start timestamps of the events of a case, can be null if not available in the source data
The syntax rules for semantic attributes are the same as for the other attributes.


1.2       SIGNAL        aliases
Learn about aliases in SIGNAL, the process mining query language of SAP Signavio Process Intelligence.
Aliases are used to give the result set a temporary name to make the column headings in your result set
easier to read. It's common to alias a column when using an aggregate function in a query. Without an alias, a
name  will be generated based on the column and operations in the expression. Read more in section SIGNAL
functions [page 66].
An alias is only valid within the scope of the SIGNAL statement.
Syntax:
  expression   AS  alias_name
 Parameter                          Description                        Required
 expression                         The expression that you want to give a Required
                                    better name.
 alias_name                         The temporary name to assign.      Required
                                    Enclose the name in double quotes if it
                                    contains a character that isn't a letter
                                    or digit.
Example:
In this example, we have the following data in a table:
 case_id                            event_name                         end_time
 1001                               Receive customer order             2020-07-01T09:00:00
 1002                               Receive customer order             2020-07-04T13:00:00
 1003                               Receive customer order             2020-07-05T11:00:00
Enter the following SIGNAL statement:
  SELECT  COUNT(case_id)     AS  "No.  of  cases"
SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                               PUBLIC     7  FROM  THIS_PROCESS
This query returns the following result set:

 No. of cases
 3




1.3       SIGNAL         SELECT        statement          and    clauses


Learn about the SELECT  statement and the available clauses in SIGNAL, the process mining query language of
SAP  Signavio Process Intelligence
In this section, it is explained how to use the SELECT statement and clauses in SIGNAL.



SELECT      statement


The SELECT   statement is used to select data from a process. It fetches data from columns and rows from the
table. The data returned is the result set.
Syntax:
  SELECT  expressions
 FROM   table
  [TABLESAMPLE]
  [WHERE]
  [GROUP  BY]
  [UNION  ALL]
  [ORDER  BY]
  [FILL]
  [LIMIT]
  [OFFSET]

 Parameter                                            Description
 expressions                                          The columns or calculations that you want to retrieve.
 table                                                The process table or view from which you want to retrieve
                                                      data. You can reference the process by using the explicit
                                                      Process ID which can be found on the API tab in the
                                                      process settings page. Alternatively you can use the alias
                                                      THIS_PROCESS  to refer to the default view.
 TABLESAMPLE                                          Specify the absolute or percentage table fraction to be con-
                                                      sidered for the query.
 WHERE  condition                                     The condition that must be met for the records to be se-
                                                      lected. If no condition is provided, then all records are se-
                                                      lected.


                                                                                 SAP Signavio Analytics Language Guide
8      PUBLIC                                                                      SAP Signavio Analytics Language Parameter                                               Description
 ORDER  BY index                                         The index of a selected expression used to sort the records
                                                         in the result set. If more than one expression is provided,
                                                         separate the values with a comma.
                                                         ASC sorts the result set in ascending order by expression,
                                                         DESC  sorts it in descending order.
                                                         NULLS  FIRST sorts the result set with null values first,
                                                         NULLS  LAST with null values last.
 GROUP  BY                                               Collects data across multiple records and group the results
                                                         by one or more columns. The GROUP BY clause requires an
                                                         index similar to the ORDER BY clause. You can use one or
                                                         multiple indices.
 UNION  ALL                                              Concatenates the result sets of two or more SELECT state-
                                                         ments.
 FILL                                                    Function to fill results.
 LIMIT                                                   The number of records in the result set.
 OFFSET                                                  The starting point to return rows from a result set.
Example:
  SELECT   column1,    column2
  FROM  table
 Parameter                                               Description
 column1, column2                                        The columns from which you want to retrieve records.
 table                                                   The process table or view from which you want to retrieve
                                                         records, referenced by explicit Process ID or the alias
                                                         THIS_PROCESS.
This query returns the data of column1  and  column2   from the specified table.
Only little effort is required to select multiple attributes and order and limit the result set.
Example:
  SELECT   case_id,    Status,    "Customer    ID"
  FROM  table
  ORDER   BY  2 DESC
  LIMIT   10
This query returns the case ID, status, and customer  ID of the first 10 cases in the table. ORDER BY 2 DESC
indicates to order the result set by the second column, which is status, in descending  order.





SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                                     PUBLIC     9Subqueries

A subquery is a query that is nested inside a SELECT statement or inside another subquery. You can use a
subquery anywhere an expression is allowed to retrieve data on event-level.
Subqueries are allowed in the FROM clause as well as in the FLATTEN operator.
Syntax:
  SELECT  (
      SELECT  (event_name)
  )
 FROM  table

 Parameter                                         Description
 event name                                        The column or expression from which you want to retrieve
                                                   the first element.
 table                                             The process table or view from which you want to retrieve
                                                   records, referenced by explicit Process ID or the alias
                                                   THIS_PROCESS.

  â¢  Example
  Example  1 (subquery in the AVG function):
    SELECT  "City"  AS  "Sales  Region",
        AVG (
              (SELECT  LAST("end_time")    - FIRST("end_time"))
         ) AS "AVG  Cycle   Time
    FROM  THIS PROCESS
    ORDER  BY 2  ASC
  This query returns the average cycle time per city.

  .& Example
  Example  2 (subquery in the SUM function):
    SELECT  SUM(
         (SELECT  SUM(IF("event_name"     =  'T-shirt  Printed',   1,  0))))
    FROM  THIS PROCESS
  This query maps a number to an event and sums the numbers up to count the number of occurrences of
  this event.

  .Â® Example
  Example  3 (subquery in the FROM clause):
    SELECT  "City"  AS  City,  "C"  AS  "Cases",  C  / 877  * 100  AS  "Percentage"
    FROM  (
         SELECT  "City",  COUNT   (1) AS  "C"
         FROM THIS_PROCESS
         GROUP  BY 1


                                                                            SAP Signavio Analytics Language Guide
10    PUBLIC                                                                   SAP Signavio Analytics Language    AS sub
  This query returns the cities, the cases per city, and the percentage of cases per city.
  .ï¿½ Example
  Example:
     Table

      City                                              Cases                      Percentage
      Washington                                          139                          15,849
      Boston                                              180                          20,525
      San Francisco                                       130                          14,823
      New  York                                           138                          15,735
      Miami                                               133                          15,165
      Houston                                             157                          17,902

  .Â® Example
  Example  4 (subquery in the FLATTEN operator):
    SELECT  COUNT(1)  AS  "Number",   "event_name"   AS  "Event"
    FROM FLATTEN   ((
        SELECT   "event_name"
        FROM  THIS_PROCESS
        WHERE  (
             SELECT  LAST("end_time")    - FIRST("end_time")     > DURATION   '31days'
    ) AS  Sub)
  This query returns the events and their occurrences for all cases that took longer than 31 days.
  .& Example
  Example




SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                         PUBLIC   11     Table

       Event                                                                             Number
      T-shirt Printed                                                                          12
      Ship  Goods  Standard                                                                    18
      Receive  T-shirt from Printing                                                           12
       Receive Payment                                                                         12
       Receive Delivery Confirmation                                                           12
      Send  T-shirt to Printing                                                                12
       Receive Customer   Order                                                                12


1.3.1    SELECT        DISTINCT         clause
Learn about the SELECT (DISTINCT)  clause in SIGNAL, the process mining query language of SAP Signavio
Process Intelligence.
The SELECT  DISTINCT  clause returns unique values of a specified column. If NULL values are present, they are
included. This function is not supported in subqueries.
Syntax:
  SELECT  DISTINCT   expression
 FROM   table
 Parameter                                          Description
 expression                                         The column, expression, or event-attribute that is returned.
                                                    If more than one expression is provided, separate the values
                                                    with a comma.
 table                                              The process table or view from which you want to retrieve
                                                    data. It is referenced by explicit Process ID or the alias
                                                    THIS_PROCESS.
Example 1: Get unique cities in your process
  SELECT  DISTINCT   city
  FROM  THIS  PROCESS
                                                                              SAP Signavio Analytics Language Guide
12    PUBLIC                                                                     SAP Signavio Analytics Language  ORDER  BY 1  ASC
This query returns all unique city names from the city column in the default process view, sorted in ascending
order. Duplicate values are removed from the result set. Therefore every city name appears only once.
    Table

      City
      Boston
      Houston
      Miami
      New   York
      San  Francisco
      Washington
Example 2: Get unique event name sequences (variants) in your process
  SELECT  DISTINCT   event_name   AS  "Event  Name:"
 FROM   THISPROCESS
This query returns all unique event name sequences (also referred to as variants) from the event name column
in the default process view. Using AS "Event Name:" assigns a column alias to the result. The query is executed
at the case level which means that the event name sequences are represented as nested lists of event names.
Duplicate values are removed from the result set so that every event name sequence (nested list) only appears
once.






SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                            PUBLIC    13     Table


      Event Name:
      Receive Customer    Order
      Receive  Payment
      Send  T-shirt to Printing
      T-shirt Printed
      Receive T-shirt from  Printing
      Order  Canceled
      Receive Customer    Order
      Receive  Payment
      Ship Goods   Express
      Ship Goods   Express
      Receive Delivery  Confirmation
      Receive Customer    Order
      Ship Goods   Standard
      Receive  Payment
      Receive  Delivery Confirmation
      Receive Customer    Order
      Receive Payment
      Send  T-shirt to Printing
      T-shirt Printed
      Receive T-shirt from  Printing
      Ship Goods   Standard
      Receive  Delivery Confirmation
Example 3: Get only unique event names in your process
  SELECT DISTINCT  event_name AS  "Event Name:"
 FROM  FLATTEN  (THIS_PROCESS)
 ORDER  BY 1 ASC
This query returns a unique list of event names in ascending order. Using AS "Event Name:" assigns a column
alias to the result. Using the FLATTEN expression flattens the nested event data in the process, thereby
representing each nested event as a single row containing case and event properties. Duplicate values are then
removed from the result set so that every event name only appears once.

                                                                     SAP Signavio Analytics Language Guide
14    PUBLIC                                                           SAP Signavio Analytics Language    Table

      Event  Name:
      Order  Canceled
      Receive  Customer    Order
      Receive  Delivery  Confirmation
      Receive  Payment
      Receive  T-shirt from  Printing
      Send  T-shirt to Printing
      Ship Goods   Express
      Ship Goods   Standard
      T-shirt Printed

1.3.2    FROM      clause
Learn about the FROM clause in SIGNAL, the process mining query language of SAP Signavio Process
Intelligence.
The FROM  clause specifies the table in your process from which you want to retrieve the data.
THIS_PROCESS  is the alias or temporary name assigned to the table that was set as default view in your
process. By default, the FROM clause fetches data from the default view.
Syntax:
 FROM  table

SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                     PUBLIC    15 Parameter                                            Description
 table                                                The process table or view from which you want to retrieve
                                                      records. You can reference the process by using the ex-
                                                      plicit Process ID which can be found on the API tab in the
                                                      process settings page. Alternatively you can use the alias
                                                      THIS_PROCESS  to refer to the default view.
Example: Get list of unique cities from default view
To retrieve the list of unique cities available in your process, run the following query.
  SELECT  DISTINCT    city
  FROM  THIS_PROCESS
The query returns the following result.
    city
    New   York
    Houston
    Washington
     San Francisco
    Boston
    Miami


1.3.3     WHERE         clause
Learn about the WHERE   clause in SIGNAL, the process mining query language of SAP Signavio Process
Intelligence.
The WHERE   clause is used to filter the data and apply conditions to the SELECT statement. This lets you
retrieve subsets of table rows based on set conditions.
Syntax:
 WHERE   condition



                                                                                 SAP Signavio Analytics Language Guide
16     PUBLIC                                                                      SAP Signavio Analytics Language Parameter                                           Description
 condition                                           The condition that must be met for records you want to
                                                     select.
Following are the common symbols  used in WHERE  clause:
 Symbols
 > (greater than)
 < (less than)
 >= (greater than or equal to)
 <= (less than or equal to)
 = (equal to)
 != (not equal to)
Example  1: Get the total purchase order amount
To retrieve the total order amount from the purchases made in the Boston city. This query retrieves the Order
Amount  column  values that match the WHERE condition.
  SELECT  SUM("ORDER    AMOUNT")
  FROM  THIS  PROCESS
 WHERE("City"='Boston')
This query returns the total order amount in Boston as 94,757.15.
Example  2: Using AND in the WHERE clause
To get the list of case Ids of the orders from Miami city with order status as delivered, run the following query.
  SELECT  case_id,"City",     "Order   Status"
  FROM  THISPROCESS
 WHERE("ORDER     Status"='Delivered'     AND   "City"='Miami')
The query returns the following result.













SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                              PUBLIC    17    case_id         City         Order  Status
    00009          Miami         Delivered
    00059          Miami         Delivered
    00096          Miami         Delivered
    00106          Miami         Delivered
    00111          Miami         Delivered
    00184          Miami         Delivered
    00187          Miami         Delivered
    00189          Miami         Delivered

1.3.4     FILTER      Clause
The FILTER clause is used to filter data inside aggregations. This lets you include or exclude specific cases or
events from aggregations in your query.
Syntax
  FILTER  (WHERE  <condition>)
 Parameter                                          Description
 condition                                          A Boolean expression. Only cases or events for which this
                                                    expression evaluates to true are included in the aggregation.
Example
The following query finds the duration between two events: first receipt of an order and completion of payment
for that order. It does this by executing a subquery, querying event-level data. In obtaining the timestamp of the
final payment, only events named 'Receive Payment' are included by the filter. Because an order may include
multiple payments, LAST is applied to the resulting aggregation to obtain the latest timestamp.
                                                                              SAP Signavio Analytics Language Guide
18    PUBLIC                                                                    SAP Signavio Analytics LanguageSimilarly, the timestamp of the first event named 'Receive Customer Order' is queried. The difference between
the two timestamps gives the cycle time from order receipt to payment.
  SELECT
      case_id,
       (SELECT  LAST(end_time)   FILTER   (WHERE  event_name   = 'Receive   Payment')   -
           FIRST(end_time)    FILTER  (WHERE  event_name   =  'Receive  Customer   Order')
      ) AS  PaymentTurnaround
  FROM THIS  PROCESS
Example output:
  case_id          PaymentTurnaround
  00001           3d  4h
  00002           1d  15h
  00003           4d  21h
  00004           4d  9h
  00005           4d  5h
  00006           3d  5h
  00007           1d  5h
  00008           2d  10h


1.3.5    GROUP        BY   clause
Learn about the GROUP BY clause in SIGNAL, the process mining query language of SAP Signavio Process
Intelligence.
The GROUP  BY clause is used to group the result of a SELECT statement by the expressions at the specified
indices. For example, GROUP BY 1, 2 groups the result by the first and second expression. All rows that share
the same values for the grouped expressions are condensed into a single row.
The GROUP  BY clause is often used with aggregate functions, for example COUNT, MAX, MIN, and AVG. Read
more in section Aggregate functions [page 66]. An aggregate function is computed across all rows of each
group and returns a separate value for each group.
The GROUP  BY clause is optional. If the GROUP BY clause is not present, then the following applies:
    If there are aggregate and non-aggregate expressions in the SELECT statement, then the result is
    automatically grouped by any non-aggregate expressions.
    If there are only aggregate expressions in the SELECT statement, then the result is a single group
    comprising all the selected rows.

SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                         PUBLIC    19To specify the rows to be considered for the aggregation, you can apply the FILTER clause to the aggregate
function.
If the GROUP  BY clause is present, then the following applies:
    You must  group by all expressions in the SELECT statement that are not encapsulated by an aggregate
    function. Exception: The ungrouped expression is functionally dependent from a grouped expression (see
    example  2 below).
    You can't group by an expression that contains an aggregate function.
Syntax:
  SELECT  expression1,     expression2,     ...  expression_n,
  aggregate_function      (aggregate_expression)
  FROM  table
  GROUP  BY  index   [,  ...]

 Parameter                                            Description
 index [...]                                          The 1-based indexing of the expressions in the SELECT
                                                      clause that are not encapsulated within an aggregate func-
                                                      tion.
                                                      The expression relates either to a case-level attribute, for
                                                      example "city", or to an event-level attribute, for example
                                                      "event-name". In the first case, the result is grouped by cit-
                                                      ies. In the second case, the result is grouped by the list of
                                                      identical sequences of events. This can be used to identify
                                                      process variants.
 aggregate_function                                   An aggregate function such as the SUM, COUNT, MIN, MAX,
                                                      or AVG function.
 aggregate_expression                                 The column or expression that the aggregate function is
                                                      used on.
 table                                                The process table or view from which you want to retrieve
                                                      records, referenced by explicit Process ID or the alias
                                                      THIS PROCESS.
Example  1: Case with GROUP  BY on multiple columns
  SELECT   city,  region,   COUNT(case_id)
  FROM  THIS  PROCESS
  GROUP  BY  1,  2
GROUP   BY  1, 2 groups by the expressions in the SELECT statement which  are not encapsulated by an
aggregation function. Since this SELECT statement contains two expressions (city and region),  the GROUP
BY  index must refer to both expressions. GROUP BY 1 or GROUP  BY 2 is not valid in this case.
Example  2: Case with GROUP  BY
To get the count of case ids with actual order amounts and order amounts multiplied 2.50 times, run the
following query.
  SELECT   "Order  Amount",    ("Order   Amount"*2.50)     AS  "Orders",   COUNT(case_id)     AS
  "No.of  Cases"
  FROM  THIS_PROCESS


                                                                                 SAP Signavio Analytics Language Guide
20     PUBLIC                                                                       SAP Signavio Analytics Language  GROUP  BY 1,  2
Since the second expression order_amount*2. 50 is functionally dependent to the first colum
order_amount,  GROUP  BY  1 is valid in this case.
The query returns the following result.
      Order  Amount          Orders      No.of Cases
                   20             50               71
                   51         127.5                 1
                  370           925                 1
                  388           970                 1
                  399         997.5                 1
                  434         1,085                 1
                  475        1,187.5                1
                  690         1,725                 1

1.3.6    ORDER        BY   clause
Learn about the ORDER BY clause in SIGNAL, the process mining query language of SAP Signavio Process
Intelligence.
The ORDER  BY clause is used to sort the result set in ascending or descending order, and add one or more
sorting criteria.
Syntax:
  SELECT  expression
  FROM table
  ORDER  BY order_index    [, ...]  [ASC |  DESC]   [NULLS  FIRST  | NULLS  LAST]
 Parameter                                         Description
 expression                                        The columns or calculations that you want to retrieve.


SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                          PUBLIC    21 Parameter                                           Description
 table                                               The process table or view from which you want to retrieve
                                                     records, referenced by explicit Process ID or the alias
                                                     THIS_PROCESS.
 order index [, ...]                                 The 1-based index of a selected expression used to sort the
                                                     records in the result set. If more than one expression is pro-
                                                     vided, separate the values with comma.
 [ ASC | DESC ] [NULLS FIRST | NULLS LAST]           ASC sorts the result set in ascending order by
                                                     order_expression,  DESC sorts it in descending order.
                                                     NULLS FIRST | NULLS LAST sorts the result set in order by
                                                     null values first or last in list, default to first.
Example: Case with ORDER  BY
  SELECT  case_ID   AS  "Case   IDs",  "Order  Amount",    "Customer   Type"
  FROM  THIS  PROCESS
  ORDER  BY  2 DESC
This query returns cases in the process sorted by the order amount in descending order.

     Case  IDs       Order  Amount      Customer    Type
     00382                 2,166.14     Standard
     02491                 2,059.67     Standard
     02806                 2,039.52     Standard
     01601                 2,037.38     Standard
     00877                 2,036.49     Standard
     01673                   2,034.1    Premium
     02531                 2,028.77     Premium
     01802                 2,021.11     Premium






                                                                                SAP Signavio Analytics Language Guide
22     PUBLIC                                                                     SAP Signavio Analytics Language1.3.7     FILL     clause

Learn about  the FILL clause in SIGNAL, the process mining  query language  of SAP Signavio Process
Intelligence.
The  FILL clause is used to fill results with values according to the fill specification.
Syntax:
  SELECT   expression
  FROM  table
  GROUP   BY  index   1...n
  FILL  specification

 Parameter                                              Description
 expression                                             The columns  or calculations that you want to retrieve.
 table                                                  The  process table or view from which you want to retrieve
                                                         records, referenced by explicit Process ID or the alias
                                                        THIS_PROCESS.
 specification                                          The fill specification for each of the selected expressions in
                                                        the same order that those expressions appear after SELECT.
                                                         TIMESERIES(date_part): Fills gaps in the result set for a
                                                        timeseries with NULL according to the expression. The pre-
                                                         cision level (date_part) is given in single quotes for the
                                                        timeseries gaps:
                                                         Available values:
                                                             year
                                                             quarter
                                                             month
                                                             week (ISO 8601-week numbering is applied)
                                                             day
                                                             hour
                                                         GROUP:  Fills any grouping expressions (the ones referenced
                                                        in the GROUP BY) by repeating the same value each time a
                                                        timestamp  is added inside this group.
                                                         NULL: Fills all results with NULL. No further expression re-
                                                        quired.
                                                        The TIMESERIES  specification is required. Specifications
                                                        can be omitted at the end and then default to NULL, but
                                                         if the first expression is an aggregation for example, then
                                                         NULL has to be specified.
Example:
  SELECT   DATE_TRUNC('month',        (SELECT   FIRST(end_time)))AS"Date",          "City",
  COUNT(case_id)AS"No.of        Case   IDs"
  FROM  THIS   PROCESS
  ORDER   BY  2,1

SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                                    PUBLIC     23  FILL  TIMESERIES  ('month'),   GROUP,  NULL
This query fills the gaps in the timeseries for the selected duration of time. The query returns the following
result.
     Date           City               No.of Case  IDs
     01/01/2020     Boston                          26
                    Houston                         90
                    Miami                           15
                    New   York                      55
                    San  Francisco                  31
                    Washington                      50
     01/02/2020     Boston                          25
                    Houston                         95


1.3.8     LIMIT     clause
Learn about the LIMIT clause in SIGNAL, the process mining query language of SAP Signavio Process
Intelligence.
With the LIMIT clause, you can specify the number of rows to return. Normally, you use this clause together
with the ORDER BY clause.
Without a LIMIT clause, the result set is limited to 500 rows by default. By setting the LIMIT clause, you can
decrease or increase the default limit.
Syntax:
  SELECT  expression
  FROM  table
  LIMIT  number
 Parameter                                          Description
 expression                                         The column or expression that you want to retrieve.

                                                                              SAP Signavio Analytics Language Guide
24    PUBLIC                                                                    SAP Signavio Analytics Language Parameter                                       Description
 table                                           The process table or view from which you want to retrieve
                                                 records, referenced by explicit Process ID or the alias
                                                 THIS_PROCESS.
 number                                          The number of rows in the result set.
Example:
 SELECT   "Customer  ID",  case_id  AS  "Case  ID","Order  Status",   city AS  "City"
 FROM  THIS_PROCESS
  WHERE  ("city"='Boston')
 ORDER  BY  1 DESC
  LIMIT 10
This query returns the first 10 rows where the customer Ids are sorted in descending order. It returns the
customer IDs with orders from only Boston city.

    Customer   ID   Case  ID   Order  Status   City
    C 00998         01265      Delivered       Boston
    C_00998         00964      Delivered       Boston
    C_00998         02618      Canceled        Boston
    C_00998         00903      Delivered       Boston
    C_00998         00042      Delivered       Boston
    C_00998         02883      Delivered       Boston
    C_00998         03159      Delivered       Boston
    C_00998         03189      Delivered       Boston


1.3.9    TABLESAMPLE              clause
Learn about the TABLESAMPLE  clause in SIGNAL, the process mining query language of SAP Signavio Process
Intelligence.
With the TABLESAMPLE  clause, you can specify either the absolute or percentage table fraction to be
considered for the query. The table fraction is sampled randomly after the FROM clause is evaluated and
before all other clauses.
SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                        PUBLIC   25Syntax:

  SELECT  expression
 FROM  table
 TABLESAMPLE    sampling  method   (sampling   amount)  REPEATABLE   (seed
  )


 Parameter                                         Description
 expression                                        The column or expression that you want to retrieve.
 table                                             The process table or view from which you want to retrieve
                                                   records, referenced by explicit Process ID or the alias
                                                   THIS_PROCESS.
 sampling method                                   The sampling method. Currently, only EXACT is supported.
 sampling amount                                   The sampling amount; either absolute or percentage.
 seed                                              The optional seed number to be used for generating random
                                                   numbers for the sampling method.

Example:

  SELECT  "Order  Amount  in  EUR",  "Duration   Order  To  Payment"
  FROM  (
      SELECT
           "Order  Amount   in EUR",
           (SELECT  LAST   (end_time)   FILTER  (WHERE  event_name   =  'Receive  Payment'))
           (SELECT  FIRST   (end_time)  FILTER   (WHERE  event_name   =  'Receive  Customer
  Order'))  AS  "Duration  Order   To Payment"
      FROM  THIS  PROCESS
      WHERE
           ("Order  Amount   in EUR"  IS  NOT  NULL)
      AND
           ((SELECT   LAST  (end_time)  FILTER   (WHERE  event_name   =  'Receive  Payment'))   -
           (SELECT  FIRST   (end_time)   FILTER  (WHERE  event_name   =  'Receive  Customer
  Order'))
           IS NOT  NULL)
  ) AS sub_query
  TABLESAMPLE   EXACT (10 ROWS)  REPEATABLE   (123)

This query returns 10 rows sampled randomly from the specified table.
























                                                                            SAP Signavio Analytics Language Guide
26    PUBLIC                                                                  SAP Signavio Analytics Language   Scatter   Plot


        Duration  Order  To Payment
     450m
     400m
     350m
     300m
     250m
     200m
     150m
     100m
           50       100       150      200       250       300       350      400
                                   Order Amount   in EUR


For TABLESAMPLE   EXACT (10 PERCENT)   REPEATABLE  (123), the query returns 10 percent of the rows
sampled randomly from the specified table.
















SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                          PUBLIC   27   Scatter   Plot



         Duration  Order  To Payment
     800m
     700m
     600m
     500m
     400m
     300m
     200m                                        $
     100m
           0                100               200              300               400
                                    Order  Amount   in EUR




1.3.10      OFFSET        clause

Learn about the OFFSET clause in SIGNAL, the process mining query language of SAP Signavio Process
Intelligence.
With the OFFSET  clause, you can specify the starting point to return rows from a result set.
Syntax:
 SELECT   expression
 FROM   table
  LIMIT  number
  OFFSET  offset_number
 Parameter                                           Description
 expression                                         The column or expression that you want to retrieve.
 table                                              The process table or view from which you want to retrieve
                                                     records, referenced by explicit Process ID or the alias
                                                    THIS  PROCESS
 number                                             The number of rows in the result set.
 offset_number                                      The amount or rows to skip from the top of the table.

                                                                               SAP Signavio Analytics Language Guide
28    PUBLIC                                                                     SAP Signavio Analytics LanguageFor the OFFSET to provide consistent results, you need to add ORDER BY clause in the query.
Example: OFFSET clause with ORDER BY and LIMIT clauses
  SELECT  case_id  AS  "Case  ID",  "Order  Amount",  "Customer   ID"
 FROM  THIS_PROCESS
 ORDER  BY  2 DESC
 LIMIT  5
  OFFSET  10
This query returns the discounts in row 11 to 16.

    Case  ID           Order  Amount     Customer   ID
    02560                    2,005.89    C_00285
    01925                    2,003.98    C 00908
    01641                    2,000.84    C_00855
    01335                    1,998.49    C_00082
    01672                    1,969.14    C_00693



1.3.11    FLATTEN         operator

Learn about the FLATTEN operator in SIGNAL, the process mining query language of SAP Signavio Process
Intelligence.
The FLATTEN  operator flattens the nested table with the event attributes in a way that each event attribute
becomes  a top-level row. Case attributes are repeated accordingly.
Do not combine the FLATTEN operator with the MATCHES operators. The MATCHES operators work only for
nested tables and not for flattened tables.
Nested table before flattening:
   Case_ID   Customer iD    Status      City                          Events
                                                       event_name                end  time
                                                  Receive customer order     2021-05-01T09:00:00
    1001        2001      delivered   New York
                                                    Receive payment          2021-05-03T16:00:00
                                                       Ship goods            2021-05-10T10:00:00
                                                      event  name                end  time
    1002        2002      canceled     Boston    Receive customer order      2021-05-02T10:00:00
                                                       Cancel order          2021-05-04T20:00:00

SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                         PUBLIC   29Table after flattening:
 Case_ ID  Customer  iD     Status         City           event_name               end_time
   1001        2001       delivered     New  York   Receive  customer  order  2021-05-01T09:00:00
   1001        2001       delivered     New  York      Receive  payment       2021-05-03T16:00:00
   1001        2001       delivered     New  York          Ship goods         2021-05-10T10:00:00
   1002        2002        canceled      Boston     Receive  customer  order  2021-05-02T10:00:00
   1002        2002        canceled      Boston           Cancel order        2021-05-04T20:00:00
The flattened table allows to perform aggregations based on event names or other event attributes.
Syntax:
  SELECT  expression
  FROM FLATTEN   (tablename)
 Parameter                                         Description
 expression                                        The column or expression that is queried, involving both
                                                   case-level attributes and event-level attributes.
 tablename                                         The nested table from which you want to retrieve records.
Example 1: Flatten a nested table
  SELECT  case_id,"Customer     ID",  "Order  Status",   "City",  "event_name",    "end_time"
  FROM FLATTEN   (THIS_PROCESS)
This query creates a flattened table (see flattened table above) that allows further aggregations on event
attribute-level.
Example 2: Count number of cases that include a specific event
  SELECT  COUNT  (DISTINCT   case_id),   "event_name"
  FROM FLATTEN   (THIS_PROCESS)
  GROUP  BY 2
This query returns the total number of cases in which each event occurs.











                                                                            SAP Signavio Analytics Language Guide
30    PUBLIC                                                                   SAP Signavio Analytics Language    event_name             COUNT_DISTINCT(case_id)
    Receive items from                          1,177
    Printing
    Receive Payment                             3,284
    Items Printed                               1,177
    Receive Delivery                            3,014
    Confirmation
    Ship Goods                                  1,614
    Standard
    Order  Canceled                              270
    Send  items to                              1,329



1.3.12    UNION      ALL    clause

Learn about the UNION ALL operator in SIGNAL, the process mining query language of SAP Signavio Process
Intelligence.
With the UNION ALL operator, you can combine the result sets of two or more SELECT statements. The
amount of table columns and column data types must match for each SELECT statement when using the
UNION ALL operator.
Syntax:
 SELECT  expression
 FROM  tables
  [WHERE conditions]
 TABLESAMPLE   sampling  method  (sampling  amount)  REPEATABLE  (seed)
 ORDER  BY order_index   [, ...]  [ASC  | DESC]  [NULLS FIRST |  NULLS  LAST]
 UNION  ALL
 SELECT  expression
 FROM  tables
  [WHERE conditions]
 TABLESAMPLE   sampling  method  (sampling  amount)  REPEATABLE  (seed)
  ORDER BY order_index   [, ...]  [ASC  | DESC]  [NULLS FIRST  | NULLS  LAST]
 Parameter                                      Description
 expression                                     The column or expression that is queried.


SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                     PUBLIC   31 Parameter                                           Description
 tables                                              The tables from which you want to retrieve records. At least
                                                     one table must be listed in the FROM clause.
 conditions                                          (Optional) Conditions that must be met in order for the re-
                                                     cords to be selected.

SELECT  statements  before and after UNION ALL can only have the following clauses:

  SELECT  expressions
  FROM  table
  [TABLESAMPLE]
  [WHERE]
  [GROUP  BY]

Any other clauses, for example the UNION ALL, ORDER  BY, FILL, LIMIT, and OFFSET are applied to the result of
UNION  ALL.

Example  1:

  SELECT  case_id   AS  "Case   ID"
 FROM
  (
       SELECT  case_id
       FROM  THIS  PROCESS
       UNION  ALL
       SELECT  case_id
      FROM   THIS  PROCESS
  ) as  sub
  ORDER  BY  1
  LIMIT  20

This query returns a combined result set of the case_ids from tables in a column.

























                                                                                SAP Signavio Analytics Language Guide
32     PUBLIC                                                                     SAP Signavio Analytics Language    Case  ID

    00001

    00001

    00002

    00002

    00003

    00003

    00004

    00004




Example 2:

  SELECT  case_id,  ts,  is_first
 FROM
  (
      SELECT
           case_id,
           DATE_TRUNC('day',    (SELECT  FIRST(end_time)))   AS  ts,
           1.0 AS  is_first
      FROM  THIS PROCESS
      UNION  ALL
      SELECT
           case_id,
           DATE_TRUNC('day',    (SELECT  LAST(end_time))   +  DURATION  '1day')  AS  ts,
           0.0 as  is first
      FROM  THIS PROCESS
  ) AS sub
  ORDER BY  1,2,3
  LIMIT 20

This query returns a combined result set of dates where an event was either open or closed on the given date.
A time-stamp (ts) is used, where 1 means the event is open and O means the event is closed on the respective
dates.














SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                       PUBLIC    33    case_id         ts                          is_first
    00001           01/08/2020                        1
    00001           10/08/2020                        0
    00002           06/04/2020                        1
    00002           10/04/2020                        0
    00003           21/02/2020                        1
    00003           03/03/2020                        0
    00004           09/10/2020                        1
    00004           17/10/2020                        0



1.4      SIGNAL        expressions        and    functions
List of available expressions in SIGNAL, the process mining query language of SAP Signavio Process
Intelligence
In this section, it is explained which expressions and functions you can use in SIGNAL queries.
The following expressions are available:
    Arithmetic expressions [page 35]
    Comparison expressions [page 39]
    Logical expressions [page 42]
    Matching expressions [page 46]
    LIKE and ILIKE expressions [page 51]
    CASE WHEN   expression [page 56]
    Expressions for NULL values [page 62]
The following functions can be used in SIGNAL queries:
    Aggregate functions [page 66]
    Arithmetic functions [page 84]
    Date functions [page 91]
    Window functions [page 105]
    BUCKET() function [page 133]

                                                                           SAP Signavio Analytics Language Guide
34    PUBLIC                                                                 SAP Signavio Analytics Language1.4.1    Arithmetic          Expressions
Learn about the arithmetic expressions available in SIGNAL, the process mining query language of SAP
Signavio Process Intelligence.
Use the arithmetic expressions to execute mathematical operations with numeric values.
The following arithmetic operators are available:
 Operator                                            Description
 +                                                   Add
                                                     Subtract
                                                     Multiply
 /                                                   Divide
 %                                                   Modulo


Syntax

                                                     Type information
 expressionl    + expression2
                                                      Number    +         Number    =         Number
                                                      Time-     +         Duration  =         Time-
                                                      stamp                                    stamp
                                                      Duration  +         Time-     =         Time-
                                                                          stamp               stamp
                                                      Duration  +         Duration  =         Duration
 expressionl    - expression2
                                                      Number    -         Number    =         Number
                                                      Time-     -         Time-     =         Duration
                                                      stamp               stamp
                                                      Time-     -         Duration  =         Time-
                                                      stamp                                   stamp
                                                      Duration  -         Duration  =         Duration






SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                              PUBLIC    35                                                   Type information
 expressionl   * expression2
                                                   Number    *         Number    =        Number
                                                   Number    *         Duration  =        Duration
                                                    Duration *         Number    =        Duration
 expressionl   / expression2
                                                   Number    /         Number    =        Number
                                                   Duration  /         Number    =        Duration
                                                    Duration /         Duration  =        Number
 expressionl   % expression2
                                                   Number    %         Number    =        Number


Operator     Precedence
These operators follow the standard mathematical order of operations. This means:
    Evaluation proceeds from left to right. For example, 9 - 5 + 2 is interpreted as (9 - 5) + 2 = 6 rather than 9 -
    (5 + 2) = 2.
    Evaluation is performed in order of precedence (from higher to lower). For example, 5 + 2 * 2 is interpreted
    as 5 + (2 * 2) = 9 rather than (5 + 2) * 2 = 14.

Example     1
This query subtracts the order quantity from the shipment quantity, calculating any difference between an
order's size and the total number of goods actually dispatched.
 SELECT   case_id,   (SELECT  SUM("Shipment    Quantity"))   -  "Order  Quantity"   AS Diff
  FROM THISPROCESS










                                                                            SAP Signavio Analytics Language Guide
36    PUBLIC                                                                  SAP Signavio Analytics LanguageResult (canceled orders, where no delivery took place, have no number displayed):
 case_id                                          Diff
 00001                                              0
 00002
 00003                                              0
 00004                                              0
 00005                                              0
 00006                                             10
 00007                                              0
 00008                                              0

Example     2
This query divides each payment received by the total amount of the order and multiplies by 100. The resulting
figure is the percentage of the full amount each individual payment represents.
  SELECT
      case_id,
       "Payment  Amount"   / "Order  Amount"   * 100  AS  "Proportion   %"
  FROM FLATTEN(THIS_PROCESS)
 WHERE   event_name   = 'Receive   Payment'








SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                          PUBLIC    37Result:
  case_id                              Proportion  %
  00006                                          100
  00007                                          100
  00008                                          100
  00009                                       76,426
  00009                                       23,574
  00010                                          100

Example    3
This query returns the remainder when dividing the shipment quantity by 15. Assuming goods from an order
are shipped in containers with a capacity of 15, this query calculates how many units were shipped in a non-full
container.
  SELECT  "Shipment  Quantity"   % 15  AS "Units   shipped  in non-full   container"
 FROM  FLATTEN(THIS   PROCESS)
 WHERE   ("Shipment  Quantity"   IS NOT  NULL)










                                                                           SAP Signavio Analytics Language Guide
38    PUBLIC                                                                 SAP Signavio Analytics LanguageResult:
                 Units  shipped  in non-full container
                                                     2
                                                     0
                                                     2
                                                     3
                                                     0
                                                     5
                                                     8
                                                     4

1.4.2     Comparison           Expressions
Learn about the available comparison expressions in SIGNAL, the process mining query language of SAP
Signavio Process Intelligence.
Comparison  expressions evaluate to true or false by comparing the values of two expressions.
The following comparison operators are available:
 Operator                                           Description
 <                                                  Less than
 >                                                  Greater than
                                                    Less than or equal to
                                                    Greater than or equal to
                                                    Equal to
 <>                                                 Not equal to

Syntax
  expression1   =  | <>  | < |  <= |  > |  >= expression2
SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                            PUBLIC   39
V   X Parameters                                         Description
 expression1                                        The first expression to be compared.
 expression2                                        The second expression to be compared.

Type   Information
This table summarizes which combinations of data types are valid with the various comparison operators and
what type of result each combination yields.
 Type of expression1      Type of expression2       Valid Operators           Result Type
 Number                   Number                    =, <>, <, <=, =>, >       Boolean
 Timestamp                Timestamp                =, <>, <, <=, =>, >        Boolean
 Duration                 Duration                 =, <>, <, <=, =>, >        Boolean
 Text                     Text                      =, <>                     Boolean
 Boolean                  Boolean                   =, <>, <, <=, =>,>        Boolean
  i Note
  When  comparing  Boolean types, false < true.


Example     1
The following example query uses the comparison operations, '>', '<', and '=' for defining conditions in the
WHERE   clause. It returns a list of delivered orders whose order amount is between 100 and 900. If the order
status is 'Delivered' and the order amount is greater than 100 and less than 900, then the query returns the
case IDs of these orders along with other details.
  SELECT  case_id,   "order   amount",   "Order  Status"
  FROM  THIS  PROCESS
 WHERE   ("ORDER   Status"  =  'Delivered'   AND  "order   amount"   > 100  AND  "order  amount"
  < 900)
  LIMIT  10
Result:
The query returns the following result.






                                                                              SAP Signavio Analytics Language Guide
40    PUBLIC                                                                    SAP Signavio Analytics Language     case_id               order   amount        Order    Status
     00003                             469.9     Delivered
     00004                           268.34      Delivered
     00005                           327.94      Delivered
     00006                           599.07      Delivered
     00007                           521.17      Delivered
     00008                           162.58      Delivered
     00009                           165.44      Delivered
     00010                           319.18      Delivered

Example    2
The following example query uses the comparison operations, '>=', '<=', and '<>' for defining conditions in the
WHERE  clause. It returns a list of orders that are not delivered and with the order amount between 300 and
2000. If the order status is not 'Delivered' and the order amount is greater than or equal to 300 and less than
or equal to 2000, then the query returns the case IDs of these orders along with other details.
  SELECT "case_id",  "ORDER AMOUNT"  AS "Orders between  300to2000",  "order  status"
 FROM  THIS PROCESS
 WHERE  ("order amount"  >= 300 AND  "order amount"  <= 2000 AND  "Order status"  <>
  'Delivered')
 LIMIT  10
Result:
The query returns the following result.


SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                 PUBLIC   41    case_id     Orders    between     300to2000        order   status
    00056                                  354.47      Canceled
    00061                                  924.96      Canceled
    00075                                1,281.46      Canceled
    00114                                  517.91      Canceled
    00168                                  602.85      Canceled
    00171                                  588.06      Canceled
    00208                                  679.66      Canceled
    00211                                  768.78      Canceled

1.4.3    Logical    Expressions
Learn about the available logical expressions in SIGNAL, the process mining query language of SAP Signavio
Process Intelligence.
A logical expression connects Boolean expressions using logical operators and can be evaluated to return a
true or false value.
The following logical operators are available:
 Operator                                     Description
 AND                                          True if all the expressions separated by AND are true.
 NOT                                          Negates the expression.
 OR                                           True if any of the expressions separated by OR is true.


                                                                     SAP Signavio Analytics Language Guide
42    PUBLIC                                                           SAP Signavio Analytics LanguageSyntax
AND,    OR
  expression1    AND  | OR  expression2
 Parameters                                           Description
 expression1                                          The first expression to be evaluated.
 expression2                                          The second expression to be evaluted.
Operator Precedence
These two operators have different operator precedence. Specifically, AND takes precedence over OR. In
compound   expressions including both operators, this means that AND operations are evaluated before OR
operations. For example, A OR B  AND  C is interpreted as A OR (B AND  C) by default.
To override this and force OR operations to take precedence, enclose the relevant part of the expression in
parentheses, for example, (A OR  B)  AND  C.

NOT
NOT(expression1)
 Parameters                                           Description
 expressionl                                          The expression to be negated.

Type    Information
This table summarizes which combinations  of data types are valid with the various logical operators and what
type of result each combination yields.
 Type of expression1       Type of expression2        Valid Operators           Result Type
 Boolean                   Boolean                    AND, OR                   Boolean
 Boolean                                              NOT                       Boolean





SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                               PUBLIC    43Example   1: Using  AND   Operator
The following example returns a list of delivered orders in the city of Boston. If the order status is delivered and
the city is Boston, then the query returns the case IDs of these orders along with other details.
  SELECT case_id, "City", "Order Status",  "order amount"
 FROM  THIS PROCESS
 WHERE  ("ORDER Status" = 'Delivered'  AND "City" = 'Boston')
 LIMIT  10
Result:
The query returns the following result.
   case_id      City        Order   Status       order   amount
   00026        Boston      Delivered                     101.23
   00038        Boston      Delivered                       39.42
   00042        Boston      Delivered                     313.88
   00043        Boston      Delivered                     502.89
   00052        Boston      Delivered                     112.01
   00062        Boston      Delivered                     102.37
   00076        Boston      Delivered                     556.53
   00093        Boston      Delivered                     509.92

Example   2: Using  OR  Operator
The following example returns orders where the value is less than 50 OR the value is greater than 2000 and city
is Houston. Keep in mind the remark above noting how AND operations take precedence over OR operations.
  SELECT case_id, "order amount",  "Order Status", "city"
 FROM  THIS PROCESS
 WHERE  ("Order amount" <= 50 OR  "Order amount" >= 2000 AND  "City" = 'Houston')
                                                                  SAP Signavio Analytics Language Guide
44   PUBLIC                                                         SAP Signavio Analytics Language ORDER  BY  2 DESC
 LIMIT  15
Result:
The query returns the following result.
   case id           order amount   po0  Order Status             city
  00382                       2,166.14   Canceled                 Houston
  02491                       2,059.67   Canceled                 Houston
  02806                       2,039.52   Canceled                 Houston
  01601                       2,037.38   Canceled                 Houston
  02531                       2,028.77   Delivered                Houston
  01802                       2,021.11   Delivered                Houston
  01925                       2,003.98   Delivered                Houston
  02171                          49.92   Delivered                San Francisco
  02312                          49.75   Delivered                Washington
  01273                          49.75   Canceled                 Washington
  00762                          49.75   Delivered                Houston

Example    3: Using   NOT   Operator
The following example returns the total order amount of all purchases excluding orders from the cities, Boston
and Miami.
  SELECT SUM("ORDER   AMOUNT")
 FROM  THIS  PROCESS
 WHERE  NOT("City"  =  'Boston'  AND  "City" =  'Miami')
Result:
The query returns the following result.


SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                     PUBLIC   45      Order    amount      excluding     Boston    and   Miami    cities
                                                               1,266,532.97

1.4.4    Matching        Expressions
Learn about the available matching expressions in SIGNAL, the process mining query language of SAP Signavio
Process Intelligence.
Do not combine the MATCHES expression with the FLATTEN expression.
  i Note
  The MATCHES  expressions work only for nested tables and not for flattened tables.
MATCHES
The MATCHES  expression allows filtering based on patterns that check for a certain sequence of event-level
values, such as event_name.
Synta
  <expression>  MATCHES   (<pattern>)
 Parameter                                      Description
 expression                                     The column or expression that is compared with the defined
                                                pattern.




                                                                         SAP Signavio Analytics Language Guide
46    PUBLIC                                                               SAP Signavio Analytics Language Parameter                                              Description
 pattern                                                The defined pattern with which the expression is compared.

                                                        Pattern syntax             Description
                                                        A  -> B                    "A" directly followed by "B"
                                                                                   (can be omitted)
                                                        A -> B                     "A" indirectly or directly fol-
                                                                                   lowed by "B". Equivalent to A
                                                                                   ANY* B
                                                        ^A                         Sequence starts with "A" in
                                                                                   any specific case
                                                        B $                        Sequence ends with "B" in
                                                                                   any specific case
                                                        A ANY B                    "A" is followed by any single
                                                                                   value which is then followed
                                                                                   by "B"
                                                        A ANY* B                   "A" is followed by any num-
                                                                                   ber of values which are then
                                                                                   followed by "B"
                                                        NULL                       Sequence contains "Null"
                                                                                   values
                                                        NOT  A                     All values that are not "A"
                                                                                   (even if the sequence con-
                                                                                   tains A values)
                                                        A NOT B                    "A" directly followed by a
                                                                                   value that is not "B"
                                                        A NOT  (B | C)             "A" directly followed by a
                                                                                   value that is not "B" or "C"
                                                        (A | B)                    "A" or "B"




Example      1

Match  cases where  the first event is "Receive Customer Order" and the event "Receive Delivery Confirmation"
occurs at any point later on.
  SELECT   case_id,    event_name
  FROM  THIS   PROCESS
 WHERE   event_name     MATCHES(^'Receive      Customer    Order'   ~>  'Receive    Delivery
  Confirmation')







SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                                   PUBLIC    47Output:

   case id               event  name
   00001                 Receive  Customer Order
                         Change  Order Quantity
                         Receive  Payment
                         Ship Goods  Express
                         Receive  Delivery Confirmation
   00003                 Receive  Customer Order
                         Change  Order Quantity
                         Receive  Payment
                         Ship Goods  Standard
                         Receive  Delivery Confirmation
   00004                 Receive  Customer Order
                         Change  Order Quantity
                         Receive  Payment
                         Ship Goods  Express
                         Receive  Delivery Confirmation


Example    2

Match cases where exactly one event of any kind occurs between a payment being received and the order
being canceled.
  SELECT case_id,  event_name
 FROM  THISPROCESS
 WHERE  "event_name"  MATCHES   ('Receive Payment'  ANY  'Order  Canceled')














                                                                       SAP Signavio Analytics Language Guide
48    PUBLIC                                                             SAP Signavio Analytics LanguageOutput:
   case_id       event_name
   00114          Receive Customer   Order
                  Receive Payment
                  Send items  to Printing
                  Order Canceled
   00120          Receive Customer   Order
                  Receive Payment
                  Send items  to Printing
                  Order Canceled
   00142          Receive Customer   Order
                  Receive Payment
                  Receive Payment
                  Order Canceled



BEHAVIOUR        MATCHES

The BEHAVIOUR   MATCHES  expression checks whether complex behavior matches a pattern. Up to eight
behaviors can be combined. For each behavior an alias must be given. Behaviors can be specified using
comparison operators.


Syntax

  BEHAVIOUR   (<expression>)   AS  <alias_name>   [,  (<expression>)   AS  <alias_name>,   ...]
 MATCHES   (<pattern>)
 Parameter                                        Description
 expression                                       The column or expression with a defined behavior that is
                                                  compared with the defined pattern.
 alias_name                                       The temporary name to assign.
                                                  Enclose the name in double quotes if it contains a character
                                                  that isn't a letter or digit.



SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                          PUBLIC   49 Parameter                                            Description
 pattern                                              The complex pattern the expression is compared with.

                                                      Pattern syntax            Description
                                                      A -> B                    "A" directly followed by "B"
                                                                                (can be omitted)
                                                      A -> B                    "A" indirectly or directly fol-
                                                                                lowed by "B". Equivalent to A
                                                                                ANY* B
                                                      ^A                        Sequence starts with "A" in
                                                                                any specific case
                                                      B $                       Sequence ends with "B" in
                                                                                any specific case
                                                      A ANY B                   "A" is followed by any single
                                                                                value which is then followed
                                                                                by "B"
                                                      A ANY* B                  "A" is followed by any num-
                                                                                ber of values which are then
                                                                                followed by "B"
                                                      NOT A                     All values that are not "A"
                                                                                (even if the sequence con-
                                                                                tains A values)
                                                      A NOT B                   "A" directly followed by a
                                                                                value that is not "B"
                                                      A NOT (B | C)             "A" directly followed by a
                                                                                value that is not "B" or "C"
                                                      (A | B)                   "A" or "B"

Example:
Match  cases where a small payment was followed at some point by larger payment.
  SELECT  case_id,    event_name,    "Payment   Amount"
  FROM  THIS_PROCESS
 WHERE   BEHAVIOUR
       (event_name   =  'Receive   Payment'    AND  "Payment   Amount"   <  100)  AS
 changed_small_amount,
       (event_name   =  'Receive   Payment'    AND  "Payment   Amount"   >=  100)  AS
  changed_large_amount
 MATCHES    (changed_small_amount      ~>  changed_large_amount)











                                                                                SAP Signavio Analytics Language Guide
50     PUBLIC                                                                      SAP Signavio Analytics Language  case_id           event_name                              Payment  Amount
  00079             Receive  Customer  Order               null
                    Receive  Payment                       75,66
                    Receive  Payment                       135
                    Send  items to Printing                null
                    Items Printed                          null
                    Receive  items from Printing           null
                    Ship Goods  Standard                   null
                    Receive  Delivery Confirmation         null
  00274             Receive  Customer  Order               null
                    Receive  Payment                       39,6
                    Receive  Payment                       101
                    Ship Goods  Standard                   null
                    Ship Goods  Standard                   null
                    Receive  Delivery Confirmation         null
                    Receive  Delivery Confirmation         null
  00458             Receive  Customer  Order               null
                    Receive  Payment                       74,29
                    Ship Goods   Express                   null
                    Receive  Payment                       159
                    Receive  Delivery Confirmation         null






                                                 True if the operand is equal to at least one of a list of literal
                                                 values



1.4.5     LIKE    and   ILIKE     Expressions

Learn about the LIKE and ILIKE expression in SIGNAL.With LIKE and ILIKE expressions, you can search for a
specified string pattern in a column.
Using LIKE and ILIKE expressions, you can search for a specified string pattern in a column with string data
type. The LIKE expression matches case-sensitive string patterns, whereas the ILIKE expression matches
case-insensitive string patterns.

SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                        PUBLIC   51
Z     ZBoth of these expressions provide:
    flexible string comparison using special characters
    improved  string filtering and bucketing
    flexible process variant filtering using MATCHES and BEHAVIOR  MATCHES   expressions
An optional keyword 'NOT' can be used  along with LIKE and ILIKE expressions to search for the non-matching
string patterns.

Syntax

  <expression>     [NOT]  LIKE   <pattern>
  <expression>     [NOT]  ILIKE   <pattern>
 Parameter                                             Description
 expression                                            The string expression that is compared with the defined
                                                       pattern.
 pattern                                               The defined string pattern the expression is compared with.
                                                       The string pattern includes special characters percent (%)
                                                       and underscore (_) to conduct a character-by-character
                                                       comparison.
 NOT                                                   An optional keyword that is used to negate the expression
                                                       matching.
The LIKE and  ILIKE expressions take string as input and return boolean as output.
For example:
 Expression                                            Output
 'Amsterdam' LIKE 'A%'                                 true
 'Ibiza' ILIKE '%A'                                    true
 'Boston' NOT LIKE 'B%'                                false
 'Miami' NOT ILIKE '%l'                                false


Special    Characters
The LIKE and  ILIKE expressions use special characters to compare strings, character-by-character.
The following special characters can be used in conjunction with these expressions:
    The  percent (%) wildcard represents zero, one, or multiple characters

                                                                                  SAP Signavio Analytics Language Guide
52     PUBLIC                                                                        SAP Signavio Analytics Language    The  underscore (_) wildcard represents one, single character
    The  backslash (\) character represents the escape character
You can also combine  these special characters in a pattern.
 Special characters usage                              Description
 ILIKE  '%to%'                                          Returns true if the matching string pattern contains "to" in
                                                       any case and in any position
                                                        Example: "Washington", "Boston", "Paolo Alto", "Stockton"
 LIKE  '_o%'                                            Returns true if the matching string pattern contains "o" in
                                                       the second position
                                                        Example: "Boston", "Rostock"
 ILIKE  'm  %'                                         Returns true if the matching string pattern starts with "m" or
                                                        "M" and is at least 3 characters in length
                                                        Example: "Miami", "Munich"
 ILIKE  'b%n'                                           Returns true if the matching string pattern starts with "b" or
                                                        "B", and ends with "n" or "N"
                                                        Example: "Berlin", "bern", "Boston"

LIKE   and    ILIKE   Expressions      with    MATCHES
You can also use the LIKE and ILIKE expressions with MATCHES   and BEHAVIOR    MATCHES   expressions for
filtering nested data. For example, see Example 3 [page 54] and Example 4 [page 54].

Example      1
The following example displays the use of wildcards in the string pattern.
  SELECT   "Type  of  Goods",    COUNT("Type    of  Goods")
  FROM  FLATTEN(THIS_PROCESS)
 WHERE   "Type   of  Goods"   ILIKE   '%with   print'
  ORDER  BY  1
Result:
The query  collects the "Type of Goods" that ends with the value 'with print'.
  Type of Goods       COUNT(Type of Goods)
   Cappy with Print                 3,266
   Hoody with Print                 2,872
   T-shirt with Print               4,060

SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                                  PUBLIC    53Example     2
The  following example displays the use of escape character (\) in the string pattern.
  SELECT  "Type  of Goods",   case_id
 FROM  THIS  PROCESS
 WHERE   case_id  LIKE  "100\\%"
  GROUP  BY 1
Result:
The query returns the entries where the case_id value starts with 100, follows by a backslash character, and
ends with any characters or numbers in a SIGNAL table.
  Type of Goods       case_id
  Hoody               100/10
  Hoody with print    100\100
  Cappy with print    100/115
  T-shirt             100\5455


Example     3
The following example displays the use of ILIKE expression in MATCHES expression.
  SELECT  count (case_id)
  FROM THIS  PROCESS
 WHERE   event_name   MATCHES  ('Receive   Customer   Order'  ï¿½>  ILIKE  '%print%'   ï¿½> ILIKE
  '%ship%')
Result:
The query returns the count of case_ids from THIS_PROCESS where a print action occured, and where the
order was shipped either as standard or express.
          COUNT(case_id)
                   1,105


Example     4
The following example displays the use of ILIKE expression in BEHAVIOR MATCHES expression.
  SELECT  count (case_id)
                                                                            SAP Signavio Analytics Language Guide
54    PUBLIC                                                                  SAP Signavio Analytics Language FROM  THIS_PROCESS
 WHERE
 BEHAVIOR
      (event_name   == 'Receive   Customer  Order')  as  order_received,
       (event_name  ILIKE  '%print%')   as order_printed,
      (event_ILIKE   '%ship%')   as order_shipped
 MATCHES   (order_received   ~>  order_printed   ~> order_shipped)
Result:
The query returns the count of case_ids from THIS_PROCESS where a print action occured, and where the
order was shipped either as standard or express.
         COUNT(case_id)
                   1,105

Example    5
The following example displays the use of NOT LIKE expression.
  SELECT DISTINCT(event_name)
 FROM  FLATTEN(THIS_PROCESS)
 WHERE  event_name   NOT  LIKE  '%Purchase%'
Result:
The query selects the event_name from THIS_PROCESS where the event_name does not contain the string
'Purchase'.
   event_name
   Receive items from Printing
   Order Canceled
   Ship Goods Express
   Receive Customer Order
   Ship Goods Standard
   Receive Delivery Confirmation
   Change  Order Quantity
   Items Printed
   Send items to Printing
   Receive Payment

SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                       PUBLIC    551.4.6     Conditional          expressions

Learn about the CASE WHEN   expression in SIGNAL, the process mining query language of SAP Signavio
Process Intelligence.
This section provides you with the following conditional expressions:
    CASE  WHEN   expression [page 56]
    IF expression [page 59]


CASE    WHEN      expression

The CASE  WHEN   expression evaluates a list of conditions and returns a value when the first condition is met.
Once  a condition is true, it stops reading and returns the result. If no conditions are true, it returns the value in
the ELSE clause. If the ELSE clause is not present, it returns a NULL value.
Each CASE  statement must  end with the END statement. The ELSE statement is optional, and provides a way
to capture values not specified in the WHEN/THEN statements.
The WHEN   statement is evaluated in the following ways:
    If a match is found, then the corresponding result in the THEN statement is returned, and the evaluation
    stops. Any further WHEN statements  aren't evaluated.
    If no match is found and an ELSE statement is present in the expression, then the result in the ELSE
    statement is returned.
    If no match is found, and no ELSE statement is present, then a NULL value is returned.


Syntax

  CASE
       WHEN  condition   1  THEN  result   1
       [WHEN  condition   2  THEN  result   2]
       [ELSE  result   3]
 END
 Parameter                                           Description
 Condition 1                                         The first condition which compares column values and / or
                                                     expressions and returns a boolean (TRUE or FALSE) result.
 Result 1                                            The first result which is returned if condition 1 evaluates to
                                                     TRUE.
 Condition 2                                         The second condition which compares column values
                                                     and/or expressions and returns a boolean (TRUE or FALSE)
                                                     result.
 Result 2                                            The second result which is returned if condition 1 evaluates
                                                     to FALSE and condition 2 evaluates to TRUE.


                                                                                SAP Signavio Analytics Language Guide
56     PUBLIC                                                                     SAP Signavio Analytics Language Parameter                                          Description
 Result 3                                          The third result that is used if no match is found in the
                                                   previous conditions.
The CASE  WHEN  expression can be used in the following clauses:
    SELECT
    WHERE
The following comparison operators and keywords can be used in the WHEN clause:
 Operator / Key words                              Example
 <
                                                     WHEN  "Order  Amount"   <  '1000'  THEN
                                                     'Approved'
 >
                                                     WHEN  "Order  Amount"   >  '1000'  THEN
                                                     'Approved'
                                                     WHEN  "Order  Amount"   <=  '1000'  THEN
                                                     'Approved'
 -=
                                                     WHEN  "Order  Amount"   >=  '1000'  THEN
                                                     'Approved'
                                                     WHEN  "Order  Amount"   =  '1000'  THEN
                                                     'Approved'
 <
                                                     WHEN  "Order  Amount"   <>  '1000'  THEN
                                                     'Rejected'
 IN                                                 WHEN "Country"  IN ('Germany',  'France')  THEN
                                                    Europe
 NOT IN                                             WHEN "Country"  NOT IN ('Germany',  'France')
                                                    THEN 'Rest of  the World'


Examples

Example     1

The following example selects countries based on regions. When a country is in a specific region (condition is
true), it's added to the region (result). If a country doesn't match any of the conditions, it's added to the ELSE
result "Rest of World".
  SELECT  DISTINCT
        "Country",

SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                            PUBLIC   57      CASE  WHEN  "Country"  =  'USA' THEN  'North  America'
            WHEN  "Country"  =  'Germany'  THEN  'EU'
            WHEN  "Country"  =  'France'  THEN  'EU'
            WHEN  "Country"  =  'South Africa'   THEN  'Africa'
            ELSE  'Rest  of World'
            END AS  "Region"
 FROM  THIS_PROCESS

Result:
The query returns which countries reside in which regions in a SIGNAL table.

   Country        Region
   USA            North America
   France         EU
   Germany        EU





Example    2

The following example compares the minimum and maximum values of customer satisfaction ratings (CSAT)
at an event level in a CASE WHEN expression.

  SELECT  "Country",
  CASE WHEN  (SELECT (MAX ("CSAT")))  =  (SELECT (MIN ("CSAT")))  THEN  'None'
       WHEN  (SELECT (MAX ("CSAT")))     (SELECT (MIN ("CSAT")))  <=  1 THEN  'Low'
       WHEN  (SELECT (MAX ("CSAT")))   - (SELECT (MIN("CSAT")))   <=  3 THEN  'Medium'
       ELSE  'High'
       END  AS "CSAT  Delta",
       count (case_id)
 FROM  THIS_PROCESS
  GROUP BY  1,2

Result:
The query returns the total number of cases in each CSAT Delta category (None, Low, Medium, and High) and
Country. The CSAT Delta category is determined by the delta between the maximum CSAT and minimum CSAT
value within the case.

















                                                                          SAP Signavio Analytics Language Guide
58    PUBLIC                                                                SAP Signavio Analytics Language   Country    CSAT Delta    COUNT(case_id)
   USA        Low                      82
              None                     36
              High                    913
              Medium                 1,372
   Germany    None                     11
              Medium                  442
              Low                      27
              High                    310
   France     High                    301
              Low                      28
              Medium                  461
              None                     17


IF  expression
The IF expression evaluates a single condition and return values based on the defined parameters. You need to
provide two parameters,  one for true and one for false.
    If the condition evaluates to true, the expression returns the desired value.
    If the condition evaluates to false, the expression returns a different value.
The values returned can  be literals, column attributes or the results of other expressions, such as additional IF
expressions.


Syntax
IF(condition,     valueIfTrue,     valueIfFalse)

Parameters

 Parameter                                              Description
 Condition                                             The condition to be evaluated.

SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                                   PUBLIC    59 Parameter                                               Description
 valuelfTrue                                            The value to be returned if the condition is met. This value
                                                        can be a literal, column attribute, result of an expression, or
                                                        additional IF expression.
 valuelfFalse                                           The value to be returned if the condition is not met. This
                                                        value can be a literal, column attribute, result of an expres-
                                                        sion, or additional IF expression.

Nested     IF
IF expressions that contain additional IF expressions as value_if_true or value_if_false are called nested IF
expressions. Either or both of the possible return values, value_if_true and value_if_false, can be another IF
expression. The  number  of nested IF expressions is limited to 256.

Examples
Following are the examples  of simple IF and nested IF.

Example      with   simple     IF
The following example  returns a distinct list of cities along with an associated state. The IF expression is used
to compare  the City to a literal value 'San Francisco'. If the City name matches the defined condition, the
state value is returned as 'California'. If the city does not match the defined condition, then the state value is
returned as 'Other'.
  SELECT   DISTINCT    "City"
  IF("City"    =  'San  Francisco','California','Other')            AS  "State"
  FROM  THIS PROCESS
Result:
The  query returns the following result.
 cly                                                                                               State
  New York                                                                                         Other
  Boston                                                                                           Other
  Miami                                                                                            Other
 Washington                                                                                        Other
  Houston                                                                                          Other
 San Francisco                                                                                     California

                                                                                     SAP Signavio Analytics Language Guide
60     PUBLIC                                                                          SAP Signavio Analytics LanguageExample    with   nested   IF
The following example returns a distinct list of cities along with corresponding states. The first IF expression
is used to compare the City to a literal value 'San Francisco'. If the city name matches the defined condition,
the state value is returned as 'California'. If the city does not match the defined condition, the next nested IF
expression is evaluated. If the state does not match the condition in the last IF expression, then the state value
is returned as 'Other'.
  SELECT DISTINCT   "City"
  IF("City"  = 'San  Francisco','California',
  IF("City"  = 'Miami','Florida'
  IF("City"  = 'Houston','Texas','Other')))      AS  "State"
 FROM  THIS  PROCESS
Result:
The query returns the following result.
   City                              State
   Washington                        Other
   Houston                           Texas
   Boston                            Other
   Miami                             Florida
   New   York                        Other
  San    Francisco                   California









SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                        PUBLIC   611.4.7    Expressions         for   NULL     values
Learn about the available NULL value expressions in SIGNAL, the process mining query language of SAP
Signavio Process Intelligence.

IS  NULL
The IS NULL expression is used to test for empty values (NULL values). It returns TRUE if a NULL value is
found, otherwise it returns FALSE.

Syntax
  SELECT  expression
  FROM table
 WHERE   expression   IS NULL
 Parameter                                        Description
 expression                                       The expression to test for a NULL value.

Example
The following example returns the case IDs whose payment amount is null.
  SELECT  DISTINCT
           "case_id"  AS  "Case  ID",
           "Shipment  Number",
           "Shipment   Carrier"
  FROM FLATTEN(THIS_PROCESS)
  WHERE  "SHIPMENT  Number"   IS NULL
  LIMIT  10
Result:
The query returns the following result.







                                                                           SAP Signavio Analytics Language Guide
62    PUBLIC                                                                 SAP Signavio Analytics Language   Case  ID   Shipment   Number      Shipment   Carrier
  00004       null                   null
  00002       null                   null
  00003       null                   null
  00007       null                   null
  00010       null                   null
  00008       null                   null
  00005       null                   null
  00006       null                   null

IS  NOT   NULL
The IS NOT NULL expression is used to test for non-empty values (NOT NULL values). It returns TRUE if a
non-NULL  value is found, otherwise it returns FALSE.
Syntax
  SELECT  expression
 FROM  table
 WHERE  expression   IS  NOT NULL
 Parameter                                        Description
 expression                                       The expression to test for a NOT NULL value.
Example
The following example returns the case IDs where the payment amount is not null.
  SELECT  DISTINCT
           "case_id"  AS  "Case  ID",
           "Shipment  Number"
          "Shipment  Carrier"
SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                        PUBLIC    63 FROM  FLATTEN(THIS_PROCESS)
 WHERE   "SHIPMENT  Number"   IS NOT  NULL
 LIMIT  10
Result:
The query returns the following result.
  Case ID    Shipment   Number      Shipment   Carrier
  00003      D665427                DHL
  00004      U7596                  UPS
  00005      U2528                  UPS
  00007      D141672                DHL
  00009      U2697                  UPS
  00008      U9808                  UPS
  00006      U4566                  UPS
  00006      U9883                  UPS

1.4.8    Literal     expressions
Learn about the available literal expressions in SIGNAL, the process mining query language of SAP Signavio
Process Intelligence.
Following are the list of literal expressions:
    String literal [page 64]
    Number literal [page 65]
    DATE/TIMESTAMP   literal [page 65]
    DURATION  literal [page 65]
String   literal
String literals are always enclosed in single quotes. If a string literal contains one or more single quotes, these
single quotes must be followed by a single quote.
Example: O'Reilly -> 'O"Reilly'
                                                                           SAP Signavio Analytics Language Guide
64    PUBLIC                                                                 SAP Signavio Analytics LanguageNumber      literal
For decimal literals, the following conventions apply:
    0-9
    1.5 | .5
    1e-10 | .5e+1000

DATE/TIMESTAMP             literal
With the DATE/TIMESTAMP     literal function, you specify a timestamp as a literal.
Syntax:
  DATE  'literal'
  TIMESTAMP   'literal'
 Parameter                                            Description
 literal                                              The date or timestamp information, for ex-
                                                      ample DATE  '2019-12-24' and TIMESTAMP
                                                      '2019-12-24T12:00:00'

DURATION        literal
With the DURATION   function you specify a duration literal which is parsed into a time interval.
Syntax:
  DURATION   'literal'
 Parameter                                            Description
 literal                                              A numeric value to indicate the time and a string to indicate
                                                      the time unit, for example '3weeks', '4days', '3hours',
                                                      '5minutes','6seconds',and   '7milliseconds'
                                                      Combined usage is possible, for example '1day1hour'
                                                      For all duration strings, the singular and plural forms are
                                                      supported.
                                                      You can also follow the standard ISO-8601, for example
                                                      P1D6H30M.
Example:
  SELECT  COUNT(case_id)
  FROM  THIS  PROCESS
SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                                PUBLIC    65 WHERE   (SELECT   LAST(EndTime)    - FIRST(EndTime))     > DURATION   '10days'
This query returns the number of cases in this process with more than 10 days between the start time and the
end time.


1.4.9     SIGNAL        functions

List of available functions in SIGNAL, the process mining query language of SAP Signavio Process Intelligence
In this section, it is explained which functions you can use in SIGNAL queries. The following functions are
available:
    Aggregate functions [page 66]
    Arithmetic functions [page 84]
    Date functions [page 91]
    Window  functions [page 105]
    BUCKET()  function [page 133]


1.4.9.1         Aggregate          Functions

List of available aggregate functions in SIGNAL, the process mining query language of SAP Signavio Process
Intelligence.
Use aggregate functions to reduce collections of values down to a single value.


1.4.9.1.1          Linear      Regression         Functions

Learn about the Linear regression in SIGNAL, the process mining query language of SAP Signavio Process
Intelligence.
With the linear regression functions, you can calculate the relationship between two variables using the least
squares regression method, which is a standard approach for calculating a linear relationship. The least
squares regression line, also called the line of best fit, can be visualized as a straight line drawn through a set of
data points that represents the relationship between them.
For the regression line calculation, you need two parameters, slope and intercept. The slope and intercept
show  how two variables are related according to an average rate of change, which works well with scatter plots
because scatter plots show two variables. The regression line is plotted on a scatter plot of the same data to
show the general data trend.
The purpose of the linear regression function is to find the relationship between the explanatory variable, X,
and the dependent variable, Y. It predicts the value of Y when the value of X is known.

                                                                              SAP Signavio Analytics Language Guide
66    PUBLIC                                                                     SAP Signavio Analytics LanguageWhere     to Use   Linear    Regression
    The primary purpose  of the linear regression function is to facilitate the plotting of regression lines in
    Correlation widget.
    You can also use the linear regression function within custom SQL statements to calculate trend or
    regression values. This is useful for making predictions that extend beyond the provided data. For example,
    suppose  that order value is plotted against quantity and you want to know the value of an order size that is
    10 times the maximum   order size within your dataset.

Linear    Regression      Formula    and   Functions
A linear regression line has an equation of the form: ï¿½= a + bx
x is the explanatory variable and Y is the dependent variable.
a = intercept (the value of Y when X = 0) and b = slope.
Following are the two functions implemented to support the linear regression:
    regr_slope(Y, X) function: slope of the least-squares-fit linear equation determined by the (X, Y) pairs
    regr_intercept(Y, X) function: Y-intercept of the least-squares-fit linear equation determined by the (X, Y)
    pairs
The slope indicates the steepness of the regression line, whereas the intercept indicates its intersection with
the Y axis. The Y-intercept is the point at which the graph intersects the Y-axis. Based on the slope of each
X-axis unit, the subsequent point on the Y-axis is determined.

Syntax

  REGR_INTERCEPT(<yAttribute>,        <xAttribute>)
  REGR_SLOPE  (<yAttribute>,     <xAttribute>)
 Parameter                          Description                        Valid Types
 yAttribute                         Y is the dependent variable and is plot- Number
                                    ted along the Y axis of a scatterplot.
 xAttribute                         X is the explanatory variable and is plot- Number
                                    ted along the X axis of a scatterplot.
Returns: A Number,  the intercept of the univariate linear regression line determined by the (X, Y) pairs.





SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                               PUBLIC    67Example    1

The following query correlates the order amount with order quantity and return values for intercept and slope.
  SELECT
      REGR_INTERCEPT("Order     Amount"  ,  "Order  Quantity")   as "Intercept",
      REGR_SLOPE("Order    Amount"   , "Order  Quantity")   as  "Slope"
  FROM THIS  PROCESS
Result:
The query returns the following result.

  Intercept                   Slope
      -2.82                  30.372

Following is the scatter plot, generated using Correlation widget in a process. It shows the scatter plot and
regression line for order amount plotted against order quantity.


   Order Amount
   2k
  1.5k
   1k
   500
       ........'...''
     0             5            10            15           20            25            30      33
                                              Order Quantity




Example    2

The following query calculates the order value along the regression line relative to an order size that isn't
included in your data set.
 SELECT   300 as  "Quantity","intercept"     + 300  * "slope"   as "Amount"
 FROM
  (
    SELECT
      REGR_INTERCEPT("Order     Amount"  ,  "Order  Quantity")   as "intercept",
      REGR_SLOPE("Order    Amount"   , "Order  Quantity")   as  "slope"
    FROM  THIS_PROCESS
  ) as sub

                                                                           SAP Signavio Analytics Language Guide
68    PUBLIC                                                                 SAP Signavio Analytics Language
â¢â¢Result:
The query returns the following result.

                    Quantity                               Amount
                           300                           9,108.917


Example    3
The following query calculates the order value along the regression line relative to an order size that isn't
included in your data set and grouped by City.
  SELECT "City"
    300 as  "Quantity"
    "intercept"  + 300  * "slope"  as  "Amount"
 FROM
  (
    SELECT  "City",
      REGR_INTERCEPT("Order    Amount"  , "Order  Quantity")  as  "intercept",
      REGR_SLOPE("Order   Amount"  ,  "Order Quantity")   as "slope"
    FROM THIS  PROCESS
    GROUP BY  1
  ) as sub
Result:
The query returns the following result.

    City                     Quantity           Amount
    Miami                         300         9,291.066
    Washington                    300          8,122.38
    Boston                        300          8,422.01
    New  York                     300        10,248.269
    San Francisco                 300         8,154.724
    Houston                       300         9,562.717


SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                      PUBLIC   691.4.9.1.2          AVG
Calculates the average of a collection of numeric values. NULL values are ignored.

Syntax
  AVG(<expression>)
 Parameter                        Description                      Valid Types
 expression                       The column of values to be averaged. Number, Timestamp, Duration
Returns: The average as a Number, Timestamp or Duration. The return type matches the type of the
expression  parameter.
AVG can also be used as a window function:
  AVG(<expression>)    OVER  (
       [ PARTITION  BY  [, <partitionExpression>,      ...]  ]
       [ ORDER  BY <orderExpression>     [ { ASC  | DESC  }  ] [,  <orderExpression>,    ...]  [
  <windowFrame>   ] ]
  )
For more details about this syntax, refer to the Window Functions overview.

Example
This query returns the average order amount of all cases.
  SELECT  AVG("Order   Amount")
 FROM  THIS_PROCESS

Related    Information
Window  Functions [page 105]

1.4.9.1.3          BOOL_AND
Returns true if the supplied expression evaluates to true for all input rows, otherwise it returns false.
                                                                            SAP Signavio Analytics Language Guide
70    PUBLIC                                                                  SAP Signavio Analytics LanguageSyntax
  BOOL_AND (<expression>)
 Parameter                        Description                      Valid Types
 expression                       An expression applied to a collection of Boolean
                                  rows.
Returns: A Boolean. Result is true if all input rows evaluate to true for the supplied expression, otherwise false.
BOOL_AND   can also be used as a window function:
  BOOL_AND(<expression   >)  OVER  (
       [ PARTITION  BY  [,  <partitionExpression>,     ...]  ]
       [ ORDER  BY <orderExpression>     [ { ASC  | DESC  }  ] [,  <orderExpression>,    ...]  [
  <windowFrame>   ] ]
  )
For more details about this syntax, refer to the Window Functions overview.

Example
This query returns true if all rows record an approval performed by a manager.
  SELECT
      (SELECT   BOOL_AND(event_name    =  'Approve'  AND  performer   =  'Manager'))
 FROM  THIS_PROCESS

Related    Information
Window  Functions [page 105]

1.4.9.1.4          BOOL_OR
Returns true if the supplied expression evaluates to true for any input row, otherwise it returns false.

Syntax
  BOOL_OR(<expression>)
SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                          PUBLIC   71 Parameter                        Description                       Valid Types
 expression                       An expression applied to a collection of Boolean
                                  rows.
Returns: A Boolean. Result is true if any input row evaluates to true for the supplied expression, otherwise false.
BOOL_OR   can also be used as a window function:
  BOOL_OR(<expression>)     OVER  (
       [ PARTITION   BY [,  <partitionExpression>,     ...]   ]
       [ ORDER  BY  <orderExpression>    [ {  ASC  | DESC  } ]  [, <orderExpression>,     ...]   [
  <windowFrame>   ]  ]
  )
For more details about this syntax, refer to the Window Functions overview.

Example
This query returns true if any row records an approval performed by a manager.
  SELECT
       (SELECT  BOOL_OR(event_name     = 'Approve'   AND  performer   =  'Manager'))
  FROM THISPROCESS

Related    Information
Window  Functions [page 105]

1.4.9.1.5          COUNT
Counts the number of values in a specified column. NULL values aren't counted.

Syntax
  COUNT(<expression>)
 Parameter                        Description                       Valid Types
 expression                       The column whose values are to be Any
                                  counted.
Returns: The number of values in the provided collection of values.
                                                                             SAP Signavio Analytics Language Guide
72    PUBLIC                                                                   SAP Signavio Analytics LanguageCOUNT   can also be used as a window function:
  COUNT(<expression>)    OVER   (
       [ PARTITION   BY  [, <partitionExpression>,      ...]  ]
       [ ORDER  BY  <orderExpression>    [  { ASC  | DESC  }  ] [,  <orderExpression>,     ...]  [
  <windowFrame>   ]  ]
  )
For more details about this syntax, refer to the Window Functions overview.

Example
This query returns the number of cases.
  SELECT  COUNT(case_id)
  FROM  THIS PROCESS

Related    Information
Window  Functions [page 105]

1.4.9.1.6          COUNT        (DISTINCT)
Counts the number of distinct values in a specified column. If NULL values are present, they are excluded.
In the case of counting event-level columns, since event-level columns are lists, this function counts the
number  of distinct lists.

Syntax
  COUNT(DISTINCT    <expression>)
 Parameter                        Description                       Valid Types
 expression                       The column whose distinct values are Number, Text, Timestamp, List (i.e.
                                  to be counted.                    event-level column)
Returns: The number of distinct values in the provided collection of values.
SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                           PUBLIC    73Example     1 (Case-level)
This query returns the number of distinct cities.
  SELECT  COUNT(DISTINCT    city)
  FROM THIS  PROCESS

Example     2 (Event-level)
This query counts the number of distinct event sequences per case. Each distinct sequence represents a
process variant, therefore this query returns the number of process variants.
  SELECT  COUNT(DISTINCT    event_name)
 FROM  THIS_PROCESS

1.4.9.1.7          FIRST
Returns the first element from a collection of values.

Syntax
  FIRST(<expression>)
 Parameter                        Description                       Valid Types
 expression                       The collection of values from which the Number, Timestamp, Duration, Text,
                                  first is chosen.                  Boolean
Returns: The first value as a Number, Timestamp, Duration, Text or Boolean. The return type matches the type
of the expression parameter.
FIRST can also be used as a window function:
  FIRST(<expression>)    OVER   (
       [ PARTITION  BY  [,  <partitionExpression>,     ...]  ]
       [ ORDER  BY <orderExpression>     [ {  ASC  | DESC  } ]  [, <orderExpression  >,   ...]  [
  <windowFrame>   ]  ]
  )
For more details about this syntax, refer to the Window Functions overview.
                                                                            SAP Signavio Analytics Language Guide
74    PUBLIC                                                                   SAP Signavio Analytics LanguageExample
This query returns the name of the first event in this process.
  SELECT
       (SELECT  FIRST (event_name))
  FROM  THIS_PROCESS

Related    Information
Window  Functions [page 105]

1.4.9.1.8          LAST
Returns the last element from a collection of values.

Syntax
  LAST(<expression>)
 Parameter                        Description                       Valid Types
 expression                       The collection of values from which the Number, Timestamp, Duration, Text,
                                  last is chosen.                   Boolean
Returns: The last value as a Number, Timestamp, Duration, Text or Boolean. The return type matches the type
of the expression parameter.
LAST can also be used as a window function:
  LAST(<expression>)    OVER   (
       [ PARTITION   BY  [, <partitionExpression>,      ...]  ]
       [ ORDER  BY  <orderExpression>    [  { ASC  | DESC  }  ] [,  <orderExpression>,     ...]  [
  <windowFrame>   ]  ]
  )
For more details about this syntax, refer to the Window Functions overview.


SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                           PUBLIC    75Example
This query returns the name of the last event in this process.
  SELECT
       (SELECT  LAST(event_name))
 FROM  THIS_PROCESS

Related    Information
Window  Functions [page 105]

1.4.9.1.9          MAX
Finds the maximum value in a collection of values.

Syntax
 MAX(<expression>)
 Parameter                        Description                      Valid Types
 expression                       The collection from which the maxi- Number, Timestamp, Duration
                                  mum  value is chosen.
Returns: The maximum value as a Number, Timestamp or Duration. The return type matches the type of the
expression  parameter.
MAX  can also be used as a window function:
  MAX(<expression>)    OVER  (
       [ PARTITION  BY  [, <partitionExpression>,      ...]  ]
       [ ORDER  BY <orderExpression>     [ { ASC  | DESC  }  ] [, <orderExpression>,     ...]  [
  <windowFrame>   ] ]
  )
For more details about this syntax, refer to the Window Functions overview.


                                                                            SAP Signavio Analytics Language Guide
76    PUBLIC                                                                  SAP Signavio Analytics LanguageExample
This query returns the largest discount.
  SELECT  MAX(discount)
 FROM   THIS_PROCESS

Related    Information
Window  Functions [page 105]
1.4.9.1.10       MEDIAN
A shortcut for the PERCENTILE_CONT  function with a fixed percentile of 0.5, that is the middle number.

Syntax
 MEDIAN(<expression>)
 Parameter                         Description                      Valid Types
 expression                       The column of which you want to deter- Number, Timestamp, Duration
                                   mine the value that separates the lower
                                  from the upper half.
Returns: The median value as a Number, Timestamp or Duration. The return type matches the type of the
column_name   parameter.
Example
This query calculates the median of a set of numerical values.
                                                    A
 1                                                 65
 2                                                 72
 3                                                 81
 4                                                 95
SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                            PUBLIC   77                                                   A
 5                                                 112
 6                                                 128
  SELECT  MEDIAN(A)
  FROM  THIS_PROCESS
The query determines in a first step the value position = 3. Because the sorted list has an even number of
items, this query calculates the arithmetic mean, that is (81 + 95)/2 = 88.

1.4.9.1.11      MIN
Finds the minimum value in a collection of values.

Syntax
 MIN (<expression>)
 Parameter                        Description                       Valid Types
 expression                       The collection from which the minimum Number, Timestamp, Duration
                                  value is chosen.
Returns: The minimum value as a Number, Timestamp or Duration. The return type matches the type of the
expression   parameter.
MIN can also be used as a window function:
  MIN(<expression>)    OVER  (
       [ PARTITION   BY  [, <partitionExpression>,      ...]  ]
       [ ORDER  BY  <orderExpression>    [  { ASC  | DESC  }  ]  [, <orderExpression>,     ...]  [
  <windowFrame>   ]  ]
  )
For more details about this syntax, refer to the Window Functions overview.

Example
This query returns the smallest discount.
  SELECT  MIN(discount)
 FROM   THISPROCESS

                                                                             SAP Signavio Analytics Language Guide
78    PUBLIC                                                                   SAP Signavio Analytics LanguageRelated    Information
Window  Functions [page 105]

1.4.9.1.12       PERCENTILE_CONT
Returns the calculated continuous percentile, that is a value that corresponds to the specified fraction in the
ordering.
The calculation depends on the value position. The calculated value separates the lower from the upper
percentile. If the value position is a fraction, the value will be interpolated between the two adjacent values.

yntax

  PERCENTILE_CONT(<p>)     WITHIN   GROUP(ORDER   BY(<expression>))
 Parameter                         Description                       Valid Types
 p                                 Percentile rank, for example 0.50. Number (literal)
 expression                        The column of which you want to deter- Number, Timestamp, Duration
                                   mine the value that separates the lower
                                   from the upper percentile for the given
                                   percentile rank.
Returns: The calculated continuous percentile as a Number, Timestamp or Duration. The return type matches
the type of the expression parameter.

Example
                                                    A
 1                                                  65
 2                                                  72
 3                                                  81
 4                                                  95
 5                                                  112
 6                                                  128
  SELECT
  PERCENTILE_CONT   (0.25)  WITHIN   GROUP   (ORDER  BY A)
  FROM  THIS  PROCESS

SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                            PUBLIC    79This query determines in a first step the value position = 1.5. Because it's a fraction, the result value is the
average of position 1 and 2 = 68.5. Values below 68.5 are in the lower percentile, values above 68.5 are in the
upper percentile.
For p = 0.75, the result is as follows: value position = 4.5. The result value is the average of position 4 and 5, that
is 103.5.

1.4.9.1.13        PERCENTILE_DISC
Returns the calculated discrete percentile, that is a value that corresponds to the specified fraction in the
ordering.
The calculation depends on the value position. The calculated value separates the lower from the upper
percentile. If the value is a fraction, the higher value is taken.
This function supports all data types except strings.

Syntax

  PERCENTILE_DISC(<p>)      WITHIN   GROUP  (ORDER  BY(<expression>))
 Parameter                          Description                         Valid Types
 p                                  Percentile rank, for example 0.50.  Number  (literal)
 expression                         The column of which you want to deter- Any (except String)
                                    mine the value that separates the lower
                                    from the upper percentile for the given
                                    percentile rank.
Returns: The calculated discrete percentile. The return type matches the type of the expression parameter.

Example
                                                      A
 1                                                    65
 2                                                    72
 3                                                    81
 4                                                    95
 5                                                    112
 6                                                    128
  SELECT

                                                                                 SAP Signavio Analytics Language Guide
80     PUBLIC                                                                       SAP Signavio Analytics Language  PERCENTILE   DISC(0.25)   WITHIN  GROUP   (ORDER  BY  A)
  FROM  THIS  PROCESS
This query determines in a first step the value position = 1.5. Because it's a fraction, the result value is the value
of the higher position, that is 72.


1.4.9.1.14       STDDEV

Calculates the standard deviation for a collection of values.
The standard deviation describes the average deviation of all measured values from the mean value. A low
standard deviation indicates that the values tend to be close to the mean value. A high standard deviation
indicates that the values are spread out over a wide range.


Syntax

  STDDEV(<expression>)

 Parameter                         Description                      Valid Types
 expression                       The collection of values for which you Number, Timestamp, Duration
                                  want to determine the standard devia-
                                  tion.
Returns: The standard deviation as a Number, Timestamp, or Duration. The return type matches the type of
the expression  parameter.
STDDEV  can also be used as a window function:
  STDDEV(<expression>)     OVER  (
       [ PARTITION   BY  [, <partitionExpression>,      ...]  ]
       [ ORDER  BY  <orderExpression   >  [ { ASC    DESC  }  ]  [, <orderExpression>,     ...]  [
  <windowFrame>   ]  ]
  )
For more details about this syntax, refer to the Window Functions overview.


Example     1

This query returns the standard deviation of all order amounts.
  SELECT
      MIN("Order   Amount")   AS  "Min"
      MAX("Order   Amount")   AS  "Max"
      AVG("Order   Amount")   AS  "Avg"
       STDDEV("Order   Amount")   AS  "StdDev"
  FROM  THIS_PROCESS


SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                           PUBLIC    81Output:



        Min          Max            Avg          StdDev

         20      2,166.14       385.668         357.452





Example     2


This query shows how the cycle time of a process changes week-to-week. Specifically, it calculates both the
average and the standard deviation of the cycle time on a weekly basis.
To smooth out short-term fluctuations in the data, it uses windowed versions of the average (AVG) and
standard deviation (STDDEV) functions. These versions calculate a moving average and moving standard
deviation for the weekly mean cycle time respectively.
In the nested query, sq1, all cases are clustered together by week. The mean cycle time within each cluster is
calculated.
The outer query applies the windowed AVG and STDDEV functions to the weekly mean cycle time. In both cases,
the window includes the three weeks preceding and the three weeks following the current week.

  SELECT
      "Week"
      "Avg  Cycle  Time"
      AVG("Avg   Cycle  Time")  OVER  (ROWS  BETWEEN  3  PRECEDING  AND  3  FOLLOWING)  as
  mean,
      STDDEV("Avg   Cycle  Time")  OVER   (ROWS BETWEEN   3 PRECEDING   AND  3 FOLLOWING)   as
  std
 FROM
  (
      SELECT
           DATE_TRUNC('WEEK',     (SELECT  LAST  (END_TIME)))   AS "Week"
           AVG((SELECT   LAST(end_time)    - FIRST(end_time)))    AS  "Avg  Cycle  Time"
      FROM  THIS PROCESS
      ORDER  BY  1 ASC  NULLS  FIRST
      FILL  timeseries('WEEK')
  ) as sql



















                                                                           SAP Signavio Analytics Language Guide
82    PUBLIC                                                                 SAP Signavio Analytics Language  Week                         Avg Cycle Time                  mean              std
  06/01/2020, 00:00            6d 14h                          9d 20h            1d 23h
  13/01/2020, 00:00            9d 20h                          10d               1d 19h
  20/01/2020, 00:00            11d 5h                          10d               1d 15h
  27/01/2020, 00:00            11d 16h                         10d 4h            1d 13h
  03/02/2020, 00:00            10d 16h                         10d 18h           13h 40m
  10/02/2020, 00:00            10d 3h                          10d 20h           11h 12m
  17/02/2020, 00:00            10d 23h                         10d 18h           10h 45m
  24/02/2020, 00:00            10d 18h                         10d 17h           9h 18m

Related   Information
Window  Functions [page 105]
1.4.9.1.15      SUM
Calculates the sum of all values in a collection of numeric values. NULL values are ignored.
Syntax
 SUM(<expression>)
 Parameter                       Description                     Valid Types
 expression                      The collection of values to be summed. Number, Duration
Returns: The sum as a Number or Duration. The return type matches the type of the expression parameter.
SUM  can also be used as a window function:
  SUM(<expression>)   OVER  (
       [ PARTITION  BY [,  <partitionExpression>,    ...]  ]
      [ ORDER  BY  <orderExpression>   [  { ASC  | DESC }  ] [,  <orderExpression>,   ...]  [
  <windowFrame>   ] ]
SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                       PUBLIC   83  )
For more details about this syntax, refer to the Window Functions overview.
Example
This query returns the total order amount in Boston.
  SELECT  SUM("ORDER   AMOUNT")
  FROM  THIS PROCESS
  WHERE ("City"  =  'Boston')
Related    Information
Window  Functions [page 105]
1.4.9.2         Arithmetic         Functions
List of available arithmetic functions in SIGNAL.
Use the arithmetic functions to perform statistical calculations.
1.4.9.2.1          ABS
Returns the absolute value of an expression. For an expression, x, the non-negative value of x is returned
regardless of its sign.
Syntax
ABS(<expression>)
 Parameter                         Description                      Valid Types
 expression                        The value for which you want to calcu- Number
                                  late the absolute value.
Returns: The absolute value of the argument as a Number.
                                                                             SAP Signavio Analytics Language Guide
84    PUBLIC                                                                    SAP Signavio Analytics LanguageExample    1
This example shows ABS applied to simple values.
  SELECT ABS(-3)   AS Negative,   ABS(4)  AS Positive
 FROM  THIS_PROCESS
The resulting table displays the absolute values of the two values:
                Negative                   Positive
                        3                        4

Example    2
This example finds all changes to order quantities. Since changes can be negative or positive, this query
returns only the magnitude of each change.
  SELECT
      case_id,
      "Order  Quantity  Changed"   AS Change,
      ABS("Order   Quantity  Changed")  AS  AbsChange
  FROM FLATTEN(THIS_PROCESS)
 WHERE  event_name   =  'Change  Order Quantity'
Even where order sizes were reduced, those changes can be presented as absolute values.
  case_id              Change           AbsChange
  00001                      1                     1
  00003                      7                     7
  00004                      5                     5
  00005                      -7                    7
  00005                     -9                     9

1.4.9.2.2         LOG
Calculates the exponent of the equation x = b ^ (y) -> log (b,x) = y of a numeric expression.
SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                       PUBLIC   85Syntax
  LOG(<expression>,     <base>)
 Parameter                         Description                       Valid Types
 expression                        The value for which the logarithm is cal- Number
                                   culated.
 base                              The base to which the logarithm is cal- Number (literal)
                                   culated.
Returns: A Number, the logarithm of the value calculated to the specified base.

Example
  SELECT
       LOG(10,  1000),
       LOG(3,  27),
       LOG(2,  8)
  FROM  THIS  PROCESS
The table displays the results of the three calculations. In each case, the result is 3 (specifically, 2 ^3 = 8, 3 ^3
= 27, and 2 ^ 3 = 8).
   Log

                             10 LOG 1000                      3 LOG  27                    2 LOG  8
                                        3                              3                          3

1.4.9.2.3           POW
Raises a base value to an exponent power.

Syntax
  POW(<base>,   <exponent>)
                                                                              SAP Signavio Analytics Language Guide
86    PUBLIC                                                                     SAP Signavio Analytics Language Parameter                         Description                       Valid Types
 base                              The value to be raised.           Number
 exponent                          The exponent power to raise by.   Number (literal)
Returns: A number, the base value raised to the exponent value.

Example
  SELECT
      POW(9,   2),
      POW(9,   0.5),
      POW(9,   0),
      POW(9,   1)
 FROM   THIS_PROCESS
The table displays the results of the four calculations:
   Power

                9 POW  2                  9 POW  0.5               9 POW  0               9 POW  1
                      81                           3                      1                      9


1.4.9.2.4          SIGN
Returns the sign of a real number of a numeric expression.
For a real number x, return:
    -1ifx<0
    0 ifx=0
    1ifx> 0

Syntax
 SIGN(<expression>)

SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                            PUBLIC    87 Parameter                         Description                        Valid Types
 expression                        The value for which you want to extract Number
                                   the sign.
Returns: A Number  denoting the sign of the argument.

Example
  SELECT
       SIGN(10)  AS  Positive,
       SIGN(0)  AS  Zero,
       SIGN(-8)  AS  Negative
  FROM  THIS_PROCESS
The resulting table displays the signs of the three numeric expressions:
   SIGN

                            Positive                    Zero                               Negative
                                    1                       0                                     -1


1.4.9.2.5          SQRT
Calculates the square root of a numeric expression.

Syntax
  SQRT (<expression>)
 Parameter                         Description                        Valid Types
 expression                        The value for which you want to calcu- Number
                                   late the square root.
Returns: The square root of the argument as a Number.
                                                                               SAP Signavio Analytics Language Guide
88    PUBLIC                                                                     SAP Signavio Analytics LanguageExample     1
This query calculates the square root from the given argument. For expression = 9, the result is 3.
  SELECT  SORT (9)
  FROM  THIS_PROCESS


Example     2
This query calculates the square root from the order amounts.
  SELECT  SORT("Order    Amount  in  EUR")
  FROM  THIS_PROCESS


1.4.9.3         Numeric        Rounding         Functions
Learn about the numeric rounding functions in SIGNAL, the process mining query language of SAP Signavio
Process Intelligence.
The numeric rounding functions simplify calculations by converting floating-point numbers to an approximate
value that is shorter, clearer, and easier to remember.
These functions help group data, set threshold values for comparisons or histogram bucketing, and calculate
complex value expressions such as cost or duration.


Functions     and   Syntax
Following are the numeric rounding functions:
 Function                          Description                       Syntax
 CEIL                              The ceiling function returns the near- CEIL (numericAttribute)
                                   est integer greater than or equal to the
                                   provided numeric value by rounding to-
                                   wards positive infinity.
                                   For example,
                                       10.56 is rounded to 11
                                       -10.56 is rounded to -10

SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                             PUBLIC   89 Function                           Description                         Syntax
 FLOOR                              The floor function returns the nearest FLOOR (numericAttribute)
                                    integer less than or equal to the pro-
                                    vided numeric value by rounding to-
                                    wards negative infinity.
                                    For example,
                                         10.56 is rounded to 10
                                        -10.56 is rounded to -11
 ROUND                              The round function returns the nearest ROUND (numericAttribute)
                                    integer value to the provided numeric
                                    value.
                                    For example,
                                         10.45 is rounded to 10
                                        10.56 is rounded to 11
                                        -10.45 is rounded to -10
                                        -10.5 is rounded to -11
 TRUNC                              The truncate function returns the inte- TRUNC (numericAttribute)
                                    ger part of the provided numeric value
                                    by rounding towards zero.
                                    For example,
                                         10.45 is rounded to 10
                                        -10.5 is rounded to -10

 Parameter                                            Description
 numericAttribute                                     A numeric column or literal value.


Examples

Example     1

The following query returns the order amount rounded up or down to the nearest integer value based on the
specified function.
  SELECT   "case_id",
            "Order   Amount"
            CEIL("Order    Amount")   AS  "Order   Amount   -  Ceiling"
            FLOOR("Order    Amount")    AS  "Order  Amount   -  Floor",
            ROUND("Order    Amount")    AS  "Order  Amount   -  Round",
            TRUNC("Order    Amount")    AS  "Order  Amount   -  Truncated",
  FROM  THIS  PROCESS
  LIMIT  10

                                                                                 SAP Signavio Analytics Language Guide
90     PUBLIC                                                                       SAP Signavio Analytics LanguageResult:

The  query   returns  the following  result.

 case_id         Order Amount         Order Amount - Ceiling   Order Amount - Floor ï¿½  Order Amount - Round ï¿½     Order Amount - Truncated ï¿½
 00001                 944.42                     945                    944                       944                         944
 00002                 270.04                    271                     270                       270                         270
 00003                 469.9                     470                     469                       470                         469
 00004                 268.34                     269                    268                       268                         268
 00005                 327.94                    328                     327                       328                         327
 00006                 599.07                     600                    599                       599                         599
 00007                 521.17                     522                    521                       521                         521
 00008                 162.58                     163                    162                       163                         162
 00009                 165.44                     166                     165                      165                         165
 00010                 319.18                    320                     319                       319                         319




Example        2


The  following  query   shows   how  each  function   rounds  up  the negative   values.

  SELECT     CEIL(-1.5)      AS   "Literal      -1.5    -  Ceiling",
                                       FLOOR(-1.5)       AS   "Literal      -1.5   -   Floor"
                                       ROUND   (-1.5)    AS   "Literal      -1.5   -   Round"
                                       TRUNC(-1.5)       AS   "Literal      -1.5   -   Truncated"
  FROM    THIS   PROCESS
  LIMIT    1

Result:

The  query   returns  the following  result.

 Literal -1.5 - Ceiling             Literal -1.5 - Floor              Literal -1.5 - Round                  Literal -1.5 - Truncated
                                                  -2                                  -2                                      -1





1.4.9.4             Date        Functions


This  section  explains  the date  functions   available  in SIGNAL   queries.

Use  date  functions  to  execute  operations   on  date  and  time  values.

   i Note

   The  default  timestamp    format   in SIGNAL   is dd/mm/yyyy.














SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                                                    PUBLIC       911.4.9.4.1          DATE_PART

Extracts part of a date from a given timestamp.
For example, you can display the month and week of a timestamp in separate columns or you can display date
information that is not displayed by default, for example the hour.


Syntax

  DATE_PART(<precision>,     <expression>)

 Parameter                        Description                       Valid Types
 precision                        The precision level in single quotes for Text (literal)
                                  the timestamp that is returned.
                                  Available values:
                                      'year'
                                      'quarter'
                                      'month'
                                      'week' (ISO 8601-week numbering
                                      is applied)
                                      'day'
                                      'day_of_week' (returns 0 - 6, be-
                                      ginning with Sunday = 0)
                                      'hour'
                                      'minute'
                                      'second'
                                      millisecond
 expression                       The timestamp from which you want to Timestamp
                                  extract a part.
Returns: A Number corresponding to the value of the extracted part of the date.


Example

  SELECT
       "case_id"
       (SELECT  FIRST("end_time"))    AS  "Timestamp"
      DATE_PART('day',     (SELECT  FIRST("end_time")))     AS  "Day",
      DATE_PART('day_of_week',      (SELECT   FIRST("end_time")))    AS  "Day  of  week",
      DATE_PART('week',     (SELECT  FIRST("end_time")))     AS  "Week",
      DATE_PART('month',     (SELECT  FIRST("end_time")))     AS  "Month",
      DATE_PART('year',     (SELECT  FIRST("end_time")))     AS  "Year",
      DATE_PART('hour',     (SELECT  FIRST("end_time")))     AS  "Hour",

                                                                             SAP Signavio Analytics Language Guide
92    PUBLIC                                                                   SAP Signavio Analytics Language       DATE_PART('minute',       (SELECT  FIRST("end_time")))       AS  "Minute"
       DATE_PART('second',       (SELECT  FIRST("end_time")))       AS  "Second"
       DATE  PART('millisecond',       (SELECT   FIRST("end_time")))      AS  "Millisecond"
  FROM  THIS_PROCESS
This query extracts date parts from the timestamp of the cases and displays them in separate columns. If
the underlying data doesn't provide the queried precision, the value is displayed as "O", as in this example for
milliseconds.
   & Example
  Example  output:
     DATE_ PART Function

      case_id Timestamp    Day     Day of week Week   Month    Year  Hour   Minute   Second    Millisecond
     10100    08/08/2017     8             2     32       8   2.017    22       52        0           0
     10101    12/07/2017     12            3     28       7   2.017    13       30       43           0
     10102    26/06/2017     26            1     26       6   2.017    17       33       15           0
     10103    23/09/2017     23            6     38       9   2.017     5       51       49           0
     10104    28/07/2017     28            5     30       7   2.017    21       41       26           0
                                                                                                      o
     10105    01/06/2017      1            4     22       6   2.017    11
                                                          6   2.017     11      49       51
     10106    29/07/2017     29            6     30       7   2.017    21        2       43           0
     10107    06/07/2017      6            4     27       7   2.017    14       14       39           0
     10108    29/07/2017     29            6     30       7   2.017    12       40       30           0
     10109    01/08/2017      1            2     31       8   2.017    15       14        7           0



1.4.9.4.2           DATE_TRUNC

Truncates the displayed precision level of timestamps.
Truncation in this context means that all precision levels below the truncated date part of the timestamp are
displayed as "01". For example, if you truncate the timestamp with precision level "year", all months and days
are set to "01".


Syntax

  DATE_TRUNC(<precision>,       <expression>)

SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                                 PUBLIC    93 Parameter                          Description                        Valid Types
 precision                          The precision level in single quotes for Text (literal)
                                    the timestamp that is returned.
                                    Available values:
                                        'year'
                                        'quarter'
                                        'month'
                                        'week' (ISO 8601-week numbering
                                        is applied)
                                        'day'
                                        'hour'
                                        'minute'
                                        'second'
                                        'millisecond'
 expression                         The timestamp you want to truncate. Timestamp
Returns: A Timestamp  with the specified truncated level of precision.


Example

  SELECT
       DATE_TRUNC('day',     (SELECT   FIRST  (END_TIME)))    AS  "Truncated    (day)"
       DATE_TRUNC('month',      (SELECT   FIRST (END_TIME)))    AS  "Truncated    (month)",
       DATE_TRUNC('year',      (SELECT  FIRST(END_TIME)))      AS  "Truncated    (year)"
  FROM  THIS  PROCESS
This query returns the given timestamps with truncated date parts:
    DATE_TRUNC('day')   returns the timestamps unmodified because  precision levels below "day" are not
    displayed.
    DATE_TRUNC('month')    returns the timestamps with all precision levels below month are set to "01", that is
    01/mm/yyyy.
    DATE_TRUNC('year')   returns the timestamps with all precision levels below year are set to "01", that is
    01/01/yyyy.
  .Â® Example
  Example  output:








                                                                                SAP Signavio Analytics Language Guide
94     PUBLIC                                                                      SAP Signavio Analytics Language    DATE_TRUNC    Function

     Truncated (day)            Truncated (month)               Truncated (year)
     08/08/2017                 01/08/2017                      01/01/2017
      12/07/2017                01/07/2017                      01/01/2017
     26/06/2017                 01/06/2017                      01/01/2017
     23/09/2017                 01/09/2017                      01/01/2017
     28/07/2017                 01/07/2017                      01/01/2017


1.4.9.4.3         DURATION_BETWEEN
Calculates the working time between two timestamps.
The calculation is done according to a specific weekday calendar of relevant 'working' and 'non-working' time.
The built-in weekday calendars support a possible level of precision down to the millisecond.
  i Note
  The built-in calendars are defined at the day level. Working time for work days is considered as a full 24
  hours.

Syntax
  DURATION_BETWEEN(<timestampStart>,     <timestampEnd>,   <calendarID>)
 Parameter              Description                                     Valid Types
 timestampStart         The start of the duration.                      Timestamp
 timestampEnd           The end of the duration.                        Timestamp





SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                      PUBLIC   95 Parameter               Description                                      Valid Types

 calendarID              Label referring to a weekday calendar.           String (literal)

                         The following calendars are available:
                             Monday-Friday (use label 'WEEKDAY_MTWTF')
                             Monday-Saturday ('WEEKDAY_MTWTFS')
                             Sunday-Thursday ('WEEKDAY_SMTWT')
                             Saturday-Thursday ('WEEKDAY_SSMTWT')
                             Sunday-Friday ('WEEKDAY_SMTWTF')
                             Monday-Thursday and Saturday ('WEEK-
                             DAY_MTWT_S')

Returns: The difference between timestampStart and timestampEnd as a Duration.




Example


The query below demonstrates how the choice of weekday calendar affects calculated durations.

Three pairs of timestamps are selected. For each pair, the duration field, calculated without reference to
working time, displays the simple time difference. Each subsequent column shows how the original time
difference changes when taking into account a different weekday calendar.

  â¢  Example

    SELECT  case_id,
        (SELECT  FIRST(end_time))    AS  "start",
        (SELECT  LAST(end_time))    AS  "end",
        (SELECT  LAST(end_time))    - (SELECT   FIRST(end_time))   AS  "duration",
        DURATIONBETWEEN(
             (SELECT  FIRST(end_time)),
             (SELECT  LAST(end_time)),
             'WEEKDAY  MTWTF'
        ) AS  "MTWTF"
        DURATION   BETWEEN(
             (SELECT  FIRST(end_time)),
             (SELECT  LAST(end_time)),
             'WEEKDAY  MTWTFS'
        ) AS  "MTWTFS"
        DURATION_BETWEEN(
             (SELECT  FIRST(end_time)),
             (SELECT  LAST(end_time)),
             'WEEKDAY_SMTWT'
        ) AS  "SMTWT"
        DURATION   BETWEEN(
             (SELECT  FIRST(end_time)),
             (SELECT  LAST(end_time)),
             'WEEKDAY_SSMTWT')
        AS  "SSMTWT"
        DURATION   BETWEEN(
             (SELECT  FIRST(end_time)),
             (SELECT  LAST(end_time)),
             'WEEKDAY  SMTWTF'
        ) AS  "SMTWTF"
        DURATION_BETWEEN(
             (SELECT  FIRST(end_time)),


                                                                          SAP Signavio Analytics Language Guide
96    PUBLIC                                                                SAP Signavio Analytics Language              (SELECT   LAST(end_time)),
              'WEEKDAY   MTWT S'
         ) AS  "MTWT S"
    FROM  THIS_PROCESS
    LIMIT  3
  The weekdays  in each case are:
      Case  00001: Saturday (01/08/2020)   and Sunday (09/08/2020)
      Case  00002: Monday  (06/04/2020)   and Thursday  (09/04/2020)
      Case  00003: Friday (21/02/2020)  and Monday  (02/03/2020)
  Example  output:
    case_id start         end             duration  MTWTF   MTWTFS    SMTWT   SSMTWT   SMTWTF   MTWT_S
    00001  01/08/2020, 12:32 09/08/2020, 09:19 7d 20h 4d 20h 6d 20h   4d 20h  6d 20h   5d 20h   5d 20h
    00002  06/04/2020, 06:38 09/04/2020, 23:43 3d 17h 3d 17h 3d 17h   3d 17h  3d 17h   3d 17h   3d 17h
    00003  21/02/2020, 09:14 02/03/2020, 20:15 10d 11h 6d 11h 8d 11h  6d 11h  8d 11h   8d 11h   6d 11h

1.4.9.4.4           DURATION_FROM_DAYS
Converts a number  of days into a Duration.
Syntax
  DURATION_FROM_DAYS(<expression>)
 Parameter                          Description                        Valid Types
 expression                         Number of days.                    Number
Returns: A Duration, the length of time represented by the original number of days.
Example
This query demonstrates converting a number of days to a Duration.
  SELECT  DURATION_FROM_DAYS(3.5)       AS  "3  and  a half  days"
 FROM   THIS_PROCESS
Output:
  3 and a half days
  3d 12h

SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                              PUBLIC    971.4.9.4.5         DURATION_FROM_MILLISECONDS
Converts a number of milliseconds into a Duration.
Syntax
 DURATION_FROM_MILLISECONDS(<expression>)
 Parameter                      Description                    Valid Types
 expression                     Number of milliseconds.        Number
Returns: A Duration, the length of time represented by the original number of milliseconds.
Example
This query demonstrates two instances of converting a number of milliseconds to a Duration. In both cases, the
argument has a value of 720,000 and therefore returns a duration of 12 minutes.
  SELECT
      DURATION  FROM MILLISECONDS(720000)    AS "Duration  1",
      DURATION_FROM_MILLISECONDS(12*60*1000)     AS "Duration   2"
 FROM  THIS_PROCESS
Output:
  Duration 1                Duration 2
  12m                       12m

1.4.9.4.6         DURATION_TO_DAYS
Converts a Duration value into the equivalent number of days.
Syntax
 DURATION_TO_DAYS(<expression>)
                                                                       SAP Signavio Analytics Language Guide
98    PUBLIC                                                             SAP Signavio Analytics Language Parameter                        Description                       Valid Types
 expression                       The duration to be converted.     Duration
Returns: A Number, the days in the original duration. The value is a decimal and so may include fractions of a
day.

Example
This query calculates a case's duration by subtracting the last event's timestamp from the first event's
timestamp, which yields a duration. This duration becomes an argument in a call to DURATION_TO_DAYS.
  SELECT  case_id,
       (SELECT  FIRST(end_time))    AS  "Start",
       (SELECT  LAST(end_time))    AS  "End",
       (SELECT  LAST(end_time))    -  (SELECT  FIRST(end_time))    AS  "Duration",
      DURATION_TO_DAYS(     (SELECT  LAST(end_time))     - (SELECT  FIRST(end_time))     ) AS
  "Duration   in days"
  FROM  THIS_PROCESS
Output:
  case_id    Start                 End                    Duration             Duration in days
  00001      01/08/2020, 12:32     09/08/2020, 09:19      7d 20h                              7.866
  00002      06/04/2020, 06:38     09/04/2020, 23:43      3d 17h                              3.712
  00003      21/02/2020, 09:14     02/03/2020, 20:15      10d 11h                            10.459
  00004      09/10/2020, 19:26     16/10/2020, 02:45      6d 7h                               6.305
  00005      25/12/2020, 18:21     07/01/2021, 01:24      12d 7h                             12.293

Related    Information
DURATION   literal [page 65]





SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                          PUBLIC    991.4.9.4.7          DURATION_TO_MILLISECONDS
Converts a Duration value into the equivalent number of milliseconds.

Syntax

  DURATION_TO_MILLISECONDS(<expression>)
 Parameter                        Description                       Valid Types
 expression                       The duration to be converted.     Duration
Returns: A Number, the milliseconds in the original duration.

Example
This query calculates a case's duration by subtracting the last event's timestamp from the first
event's timestamps, which yields a duration. This duration becomes an argument in two calls to
DURATION_TO_MILLISECONDS.     The first call returns the number of milliseconds. The second call does the
same  but is followed by a conversion of the millisecond value into minutes.
  SELECT  case_id,
       (SELECT  FIRST(end_time))    AS  "Start",
       (SELECT  LAST(end_time))    AS  "End"
       (SELECT  LAST(end_time))    -  (SELECT  FIRST(end_time))    AS  "Duration",
      DURATION_TO_MILLISECONDS(       (SELECT  LAST(end_time))    -  (SELECT
  FIRST(end_time))    ) AS  "In ms",
      DURATION_TO_MILLISECONDS(       (SELECT  LAST(end_time))    -  (SELECT
  FIRST(end_time))    ) /  (1000*60)   AS "In  min"
 FROM  THIS_PROCESS
Output:
 case id    Start                 End                    Duration          In ms          In min
 00001      01/08/2020, 12:32     09/08/2020, 09:19      7d 20h           679,612,000     11,326.867
 00002      06/04/2020, 06:38     09/04/2020, 23:43      3d 17h           320,697,000       5,344.95
 00003      21/02/2020, 09:14     02/03/2020, 20:15      10d 11h          903,668,000     15,061.133
 00004      09/10/2020, 19:26     16/10/2020, 02:45      6d 7h            544,717,000      9,078.617
 00005      25/12/2020, 18:21     07/01/2021, 01:24      12d 7h          1,062,150,000      17,702.5

                                                                             SAP Signavio Analytics Language Guide
100   PUBLIC                                                                   SAP Signavio Analytics Language1.4.9.4.8          NOW
Returns the current UTC timestamp.
What  is UTC?
UTC  is Coordinated Universal Time, the main standard by which clocks are globally synchronized.
A UTC timestamp  represents time measured at 0Â° longitude. All time zones are offset from UTC to calculate
local time. For example, Central European Time (CET) is UTC+1. A local time of 09:00 CET would be 08:00
UTC.
UTC  does not change with seasons and is not affected by daylight saving. Therefore, Central European
Summer  Time (CEST) is UTC+2. A local time of 10:00 CEST would be 08:00 UTC.

Syntax
NOW ()
Returns: A Timestamp corresponding to the date and time at which the query is executed.

Example
In the following example, the output of the call to NOw becomes the expression parameter value for
DATE_PART.  The result displays the current quarter at the time the query is executed.
  SELECT
      NOW () ,
      DATE_PART('quarter',     NOW())  as  "current_quarter"
  FROM THISPROCESS
 NOW                                current_quarter
 09/03/2023,  09:19                                 1


1.4.9.5         String     Functions
List of available string functions in SIGNAL.
Use string functions to manipulate strings in queries.
SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                         PUBLIC   1011.4.9.5.1          CONCAT
Combines  two strings into a single string value by concatenating them.
CONCAT   can only be applied to non-nested attributes. To use CONCAT on nested attributes, use the FLATTEN
operator. Alternatively, use a nested query that returns a single string attribute as a result.

Syntax
  CONCAT(<expressionl>,     <expression2>)
 Parameter                         Description                       Valid Types
 expression1                       An expression, literal or non-nested at- String
                                   tribute.
 expression2                       An expression, literal or non-nested at- String
                                   tribute.
Returns: A String, the result of appending expression2 to expression1.
Alternative syntax, which allows concatenation of an arbitrary number of strings:
 <expression1>     || <expression2>     [ || <expressionN>      ... ]

Example     (Non-nested      Attributes)
This query concatenates a dash to the name of every event which features the string 'ship'. It then uses the
output of that call as a parameter to a second call to CONCAT, appending the carrier name.
  SELECT
       COUNT(DISTINCT    case_id)  AS  "Case   Count",  event_name,
      "Shipment   Carrier",
       CONCAT (CONCAT  (event_name,      - '),  "Shipment   Carrier")   AS  "Shipment   Type  and
 Provider"
  FROM FLATTEN(THIS_PROCESS)
 WHERE   event_name   ILIKE   '%ship%'
Output:
  event_name               Shipment Carrier      Shipment Type and Provider            Case Count
  Ship Goods Standard      UPS                   Ship Goods Standard - UPS                        140
                            DHL                  Ship Goods Standard - DHL                      1,537
  Ship Goods Express       DHL                   Ship Goods Express - DHL                          31
                           UPS                   Ship Goods Express - UPS                       1,379

                                                                              SAP Signavio Analytics Language Guide
102   PUBLIC                                                                    SAP Signavio Analytics LanguageExample     (Nested   Attributes)
This query selects a field from a nested attribute, using a subquery to select the first event name. Using the
alternate syntax for concatenation, it appends to this event name the case ID.
  SELECT
      case_id,
       (SELECT FIRST(event_name))     AS "Nested   Attribute:  Event_Name"
       (SELECT FIRST(event_name))     || '  ' || case_id   AS "Nested   Attribute
  Adjustment:  Event_Name   +  Case_Id"
 FROM  THIS  PROCESS
Output:
 case_id    Nested Attribute: Event_Name     Nested Attribute Adjustment: Event_Name  + Case_Id
 00001      Receive Customer  Order          Receive Customer  Order 00001
 00002      Receive Customer  Order          Receive Customer  Order 00002
 00003      Receive Customer  Order          Receive Customer  Order 00003
  00004     Receive Customer  Order          Receive Customer  Order 00004
 00005      Receive Customer  Order          Receive Customer  Order 00005

1.4.9.5.2          REPLACE
Searches a string, replacing all occurrences of a specified substring with an alternative string
REPLACE  can only be applied to non-nested attributes. To use REPLACE on nested attributes, use the
FLATTEN  operator. Alternatively, use a nested query that returns a single string attribute as a result.

Syntax
 REPLACE(<sourceExpression>,      <searchExpression>,     <replacementExpression>)
 Parameter                        Description                     Valid Types
 sourceExpression                The string to be searched. An expres- String
                                 sion or non-nested attribute.
 searchExpression                The substring to be replaced. An ex- String
                                 pression or literal value.

SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                         PUBLIC  103 Parameter                        Description                       Valid Types
 replacementExpression            The string which replaces the substring. String
                                  An expression or literal value.
Returns: A String, the result of replacing in sourceExpression all incidences of searchExpression with
replacementExpression.

Example     (Non-nested      Attributes)
  SELECT
      DISTINCT   "Type  of  Goods"
      REPLACE("Type    of  Goods",   'Cappy',   'Cap')  AS "Single   Text  Adjustment
  (Literal):   Cappy->Cap"
      REPLACE("Type    of  Goods",   'w',  'W')  AS "Multiple   Text  Adjustment    (Literal):
 W->W"
 FROM  FLATTEN(THIS_PROCESS)
Output:
  Type of Goods     Single Text Adjustment (Literal): Cappy->Cap Multiple Text Adjustment (Literal): w->W
  Hoody             Hoody                                      Hoody
  T-shirt           T-shirt                                    T-shirt
  Cappy with Print  Cap with Print                             Cappy With Print
  Hoody with Print  Hoody with Print                           Hoody With Print
  T-shirt with Print T-shirt with Print                       T-shirt With Print
  Cappy             Cap                                        Cappy


Example     (Nested    Attributes)
  SELECT
      case_id,
       (SELECT  FIRST(event_name))     AS "Nested   Attribute:   Event_Name"
      REPLACE((SELECT    FIRST(event_name)),      'Customer','Cust')     AS "Nested   Attribute
 Adjustment:    Customer->Cust"
 FROM  THIS_PROCESS





                                                                             SAP Signavio Analytics Language Guide
104   PUBLIC                                                                   SAP Signavio Analytics LanguageOutput:
  case_id    Nested Attribute: Event_Name        Nested Attribute Adjustment: Customer->Cust
  00001      Receive Customer Order              Receive Cust Order
  00002      Receive Customer Order              Receive Cust Order
  00003      Receive Customer Order              Receive Cust Order
  00004      Receive Customer Order              Receive Cust Order
  00005      Receive Customer Order               Receive Cust Order


1.4.9.6         Window        Functions

Learn about window functions in SIGNAL, the process mining query language of SAP Signavio Process
Intelligence.
This section explains the window functions that you can use in your SIGNAL queries.
Window  functions are aggregate-like functions that you can perform over a selection of the rows which are
selected by a query. You can use window functions to perform calculations on a set of table rows that are
related to the current row in a table. In window functions, each row remains separate to the query output.
Window  functions have access to all the rows that are part of the current row's group which is determined by
the PARTITION  BY list of the window function.
Below  is the general form of a window function: {aggregation function} OVER   ([PARTITION   BY
 {partition   expressions}]    [ORDER  BY  {order   expressions}]    [[ROWS |   RANGE]  BETWEEN
 {window  frame}])
    The {aggregation function} is the function which groups the values of multiple rows to create a single
    summary  value.
    The ORDER   BY clause sorts the data set in the PARTITION BY clause in ascending or descending order.
    The PARTITION  BY clause is a subclause of the OVER clause and groups a data set into partitions.
    ROWS|RANGE    modes  define the scope of the {window frame}.
    The {window frame} is the set of rows related to the current row where the window function is used to
    calculate the values of the defined window. You can define the window frame by using the ROW and RANGE
    modes.


Limitations

Below is a list of current limitations that apply while using window functions in SIGNAL queries:
    Window  functions can only be used on flat data, not on event level or nested data.

SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                             PUBLIC   105    You can't create an empty window frame when using window functions. The following are examples of
    empty window frames:
        ROWS  BETWEEN  1 PRECEDING  AND 2 PRECEDING
        ROWS  BETWEEN  1 FOLLOWING  AND  1 PRECEDING
        ROWS  BETWEEN  1 FOLLOWING  AND  CURRENT  ROW



Considerations

Below is a list of considerations when using window functions in SIGNAL queries:
    Window functions are evaluated after aggregate functions in a SELECT clause.
    Window functions can only occur in SELECT clauses and on flat data. Nested data structures aren't
    supported. If you have a nested data structure like an event log, you can use window functions on case
    level. If you want to use window functions on event level you can use the FLATTEN operator to create a flat
    table and then use PARTITION BY case_id.
    In ORDER BY clauses, only use expressions such as column names and not numeric values for indices.


Functions

In window functions you can use aggregate and non-aggregate functions.


Aggregate     functions

You can use the following aggregate functions:
    SUM
    COUNT
    MIN
    MAX
    AVG
    FIRST
    LAST
    BOOL_OR
    BOOL_AND
For more information, see Aggregate functions [page 66].



                                                                           SAP Signavio Analytics Language Guide
106   PUBLIC                                                                 SAP Signavio Analytics LanguageNon-aggregate       functions
You can use the following non-aggregate functions:
    LAG
    LEAD
    ROW_NUMBER
For more information, see Non-aggregate functions [page 123].


1.4.9.6.1         Window        Sort    Order
Learn about window functions in SIGNAL, the process mining query language of SAP Signavio Process
Intelligence.
The ORDER  BY clause sorts the data set in the PARTITION BY clause in ascending or descending order.


Syntax

  SELECT  <columnName>,   SUM(<columnName>)    OVER   (ORDER BY  <columnName>   ASC)
 Parameter                                        Description
 columnName                                       The column name in your table you want to include in the
                                                  function.


Example
Consider the following table:
 City                                             Value
 Berlin                                           1000
 Paris                                            3000
 London                                           2500
 Rome                                             1500
  SELECT  city,  SUM(value)   OVER  (ORDER  BY value  ASC)

SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                         PUBLIC   107This query returns the cumulative sum:
 City                                              Value
 Berlin                                            1000
 Rome                                              2500
 London                                            5000
 Paris                                             8000


1.4.9.6.2          Window        Partition

Learn about window functions in SIGNAL, the process mining query language of SAP Signavio Process
Intelligence.
The PARTITION  BY clause defines the group of rows which the window function operates with. You can add
multiple expressions after the PARTITION BY. For example:
    PARTITION  BY attr, ..
    PARTITION  BY attr, ... ORDER BY attr,


Syntax

  SELECT  column  name,   SUM(column   name)  OVER  (PARTITION   BY  column  name)
 Parameter                                         Description
 column name                                       The column name in your table you want to include in the
                                                   function.
  SELECT  column  name,   SUM(column   name)  OVER  (PARTITION   BY  column  name  ORDER  BY
  column  name)
 Parameter                                         Description
 column name                                       The column name in your table you want to include in the
                                                   function.


Examples
Example 1

                                                                             SAP Signavio Analytics Language Guide
108   PUBLIC                                                                   SAP Signavio Analytics LanguageConsider the following table:
 City                                                  Value
 Berlin                                                1000
 Berlin                                                1800
 Paris                                                 3000
 London                                                2500
 Paris                                                 1500
 London                                                1200
 Berlin                                                1300
  SELECT   city,  SUM(value)     OVER  (PARTITION    BY  city)
A grouped  sum is returned:
 City                                                  Value
 Berlin                                                4100
 Berlin                                                4100
 Berlin                                                4100
 Paris                                                 4500
 Paris                                                 4500
 London                                                3700
 London                                                3700
Example  2
Consider the following table:
 City                                                  Value
 Berlin                                                1000
 Berlin                                                1800
 Paris                                                 3000
 London                                                2500
 Paris                                                 1500
 London                                                1200
 Berlin                                                1300
Now  an ORDER   BY is added to the function:
  SELECT   city,  SUM(value)    OVER   (PARTITION    BY  city  ORDER   BY  value)



SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                                 PUBLIC    109The cumulative sums per city are returned:
 City                                              Value
 Berlin                                            1000
 Berlin                                            2300
 Berlin                                            4100
 London                                            1200
 London                                            3700
 Paris                                             1500
 Paris                                             4500

1.4.9.6.3          Window        Frame
Learn about window functions in SIGNAL, the process mining query language of SAP Signavio Process
Intelligence.
The window frame is the set of rows related to the current row where the window function is used to calculate
the values of the defined window. You can define the window frame by using the ROW and RANGE modes.
The window frame contains a frame_start and a frame_end. These frames are the start and end of your
window frame.
In the frame_start you can add the following keywords:
    CURRENT   ROW
    UNBOUND   PRECEDING
    offset PRECEDING
In the frame_end you can add the following keywords:
    CURRENT   ROW
    UNBOUNDED    FOLLOWING
    offset FOLLOWING
The frame_start of CURRENT  ROW  means the frame starts with the current row's first peer row (a row that the
window's ORDER  BY clause sorts as equivalent to the current row). The frame_end of CURRENT ROW means
the frame ends with the current row's last peer row.
The UNBOUNDED    keyword is the first or last row of the peer group with the partition.
The offset expression's data type can vary depending on the data type of the ordering column. If you use
numeric ordering columns, the type is the same as the ordering column.
If the ordering column is of the type timestamp ('10 days'), you can have the following RANGE BETWEEN '1 day'
PRECEDING   AND '10 days' FOLLOWING. The offset expression must be a non-null and non-negative value.




                                                                            SAP Signavio Analytics Language Guide
110   PUBLIC                                                                  SAP Signavio Analytics LanguageROWS
With the ROWS mode, you can define the start and end of the window frame in terms of rows relevant to the
current row. You can define the window frame with the ROWS mode in following ways:
    ROWS  BETWEEN   10 PRECEDING  AND  CURRENT  ROW
    ROWS  BETWEEN   10 PRECEDING  AND 10 FOLLOWING
    ROWS  BETWEEN   UNBOUNDED    PRECEDING  AND  UNBOUNDED    FOLLOWING
The UNBOUNDED    keyword refers to the first or last row in a column or partition.
    UNBOUNDED    PRECEDING  is the first row
    UNBOUNDED    FOLLOWING  is the last row
If there is no ORDER BY clause, the returned results are undefined and the order in which the rows are
processed isn't uniform.
An offset of O refers to the current row.
Syntax:
  SELECT  column  name,  SUM(column   name)
  OVER  (ORDER  BY column  name  ASC  ROWS  BETWEEN  1  PRECEDING  AND  1 FOLLOWING)
 Parameter                                        Description
 column name                                      The column name in your table you want to include in the
                                                  function.
Example:
Consider the following table:
 City                                             Value
 Berlin                                           1000
 Paris                                            3000
 London                                           2500
 Paris                                            1500
 SELECT   city,  SUM(value)   OVER  (ROWS  BETWEEN  1 PRECEDING   AND  1 FOLLOWING)
The following is returned:
 City                                             Value
 Berlin                                           4000
 Paris                                            6500
 London                                           7000
 Paris                                            4000


SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                         PUBLIC   111RANGE
With the RANGE mode, you can define where the window frame starts and ends in window functions. When
using the RANGE keyword the ORDER BY clause is required and you must specify one column name by which
the window frame is ordered. Using the RANGE keyword is useful when working time series and when there are
many  gaps or duplicate data in your tables.
With the RANGE keyword, you can define the window frame by the maximum difference between the value of
the column in the current row and its value in the preceding or following rows of the scope.
The RANGE  mode  only works with data types that are of the type interval, which are numbers and timestamps.
Choice and Boolean data types aren't supported.
You can define the window frame with the RANGE mode in the following ways:
    ORDER  BY attr RANGE BETWEEN  10 PRECEDING  AND  CURRENT   ROW
    ORDER  BY attr RANGE BETWEEN  1.0 PRECEDING  AND 1.0 FOLLOWING
    ORDER  BY attr RANGE BETWEEN  DURATION   "1day" PRECEDING AND  DURATION  "1hour" FOLLOWING
    ORDER  BY attr RANGE BETWEEN  UNBOUNDED    PRECEDING  AND  UNBOUNDED    FOLLOWING
Syntax:
  SELECT  column  name  , SUM(column   name)
  OVER  (ORDER BY  column  name  RANGE  BETWEEN  interval   type  PRECEDING  AND  interval
  type FOLLOWING)
 Parameter                                        Description
 column name                                      The column name in your table you want to include in the
                                                  function.
 interval type                                    Data type which are of type interval such as numbers (1.0)
                                                  and timestamps ('10days').
Example:
Consider the following table:
 City                                             Value
 Berlin                                           1000
 Paris                                            3000
 London                                           3000
 Paris                                            2000
  SELECT  city,  SUM(value)  OVER   (ORDER BY  value  RANGE  BETWEEN  1000.0  PRECEDING   AND
  1000.0  FOLLOWING)
The following is returned:
 City                                             Value
 Berlin                                           3000.0

                                                                           SAP Signavio Analytics Language Guide
112   PUBLIC                                                                 SAP Signavio Analytics Language City                                             Value
 Paris                                            9000.0
 London                                           8000.0
 Paris                                            8000.0

1.4.9.6.4         Window-Supporting                Aggregate         Functions
The functions listed in this section support windows.
Some  of the standard aggregate functions can be applied to windows. This allows the function to be applied to
defined groups of rows instead of the entire table.
For more general information about windows, refer to the Window Functions overview.

Related    Information
Aggregate Functions [page 66]
Window  Functions [page 105]

1.4.9.6.4.1       AVG
Calculates the average of a collection of numeric values. NULL values are ignored.

Syntax
  AVG(<expression>)
 Parameter                        Description                     Valid Types
 expression                      The column of values to be averaged. Number, Timestamp, Duration
Returns: The average as a Number, Timestamp or Duration. The return type matches the type of the
expression  parameter.
AVG can also be used as a window function:
  AVG(<expression>)   OVER   (
       [ PARTITION  BY  [, <partitionExpression>,     ...]  ]
       [ ORDER BY  <orderExpression>    [ {  ASC  | DESC  } ]  [, <orderExpression>,    ...]  [
  <windowFrame>   ] ]
SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                         PUBLIC  113 )
For more details about this syntax, refer to the Window Functions overview.

Example
This query returns the average order amount of all cases.
  SELECT  AVG("Order   Amount")
 FROM  THIS  PROCESS

Related    Information
Window  Functions [page 105]

1.4.9.6.4.2        BOOL_AND
Returns true if the supplied expression evaluates to true for all input rows, otherwise it returns false.

Syntax
  BOOL_AND(<expression>)
 Parameter                        Description                       Valid Types
 expression                       An expression applied to a collection of Boolean
                                  rows.
Returns: A Boolean. Result is true if all input rows evaluate to true for the supplied expression, otherwise false.
BOOL_AND   can also be used as a window function:
  BOOL_AND(<expression   >)  OVER  (
       [ PARTITION  BY  [,  <partitionExpression>,      ...] ]
       [ ORDER  BY <orderExpression>     [  { ASC  | DESC  }  ] [,  <orderExpression>,    ...]   [
  <windowFrame>   ] ]
  )
For more details about this syntax, refer to the Window Functions overview.
                                                                             SAP Signavio Analytics Language Guide
114   PUBLIC                                                                   SAP Signavio Analytics LanguageExample
This query returns true if all rows record an approval performed by a manager.
  SELECT
      (SELECT   BOOL_AND(event_name    =  'Approve'   AND performer   =  'Manager'))
  FROM THIS_PROCESS

Related    Information
Window  Functions [page 105]

1.4.9.6.4.3        BOOL_OR
Returns true if the supplied expression evaluates to true for any input row, otherwise it returns false.

yntax
  BOOL_OR(<expression>)
 Parameter                        Description                      Valid Types
 expression                       An expression applied to a collection of Boolean
                                  rows.
Returns: A Boolean. Result is true if any input row evaluates to true for the supplied expression, otherwise false.
BOOL_OR   can also be used as a window function:
  BOOL_OR(<expression   >) OVER   (
       [ PARTITION  BY  [,  <partitionExpression>,     ...]  ]
       [ ORDER  BY <orderExpression>     [ { ASC  | DESC  }  ]  [, <orderExpression>,    ...]   [
  <windowFrame>   ] ]
  )
For more details about this syntax, refer to the Window Functions overview.

Example
This query returns true if any row records an approval performed by a manager.
  SELECT
SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                          PUBLIC   115      (SELECT  BOOL_OR(event_name    =  'Approve'  AND  performer  =  'Manager'))
  FROM THIS  PROCESS

Related    Information
Window  Functions [page 105]

1.4.9.6.4.4       COUNT
Counts the number of values in a specified column. NULL values aren't counted.

Syntax
  COUNT(<expression>)
 Parameter                       Description                      Valid Types
 expression                      The column whose values are to be Any
                                 counted.
Returns: The number of values in the provided collection of values.
COUNT  can also be used as a window function:
  COUNT(<expression>)    OVER  (
       [ PARTITION  BY  [, <partitionExpression>,     ...]  ]
       [ ORDER BY  <orderExpression>    [ { ASC  | DESC  } ]  [, <orderExpression>,    ...]  [
  <windowFrame>   ] ]
  )
For more details about this syntax, refer to the Window Functions overview.

Example
This query returns the number of cases.
  SELECT COUNT(case_id)
 FROM  THISPROCESS
                                                                          SAP Signavio Analytics Language Guide
116   PUBLIC                                                                SAP Signavio Analytics LanguageRelated    Information
Window  Functions [page 105]

1.4.9.6.4.5        FIRST
Returns the first element from a collection of values.

Syntax
  FIRST (<expression>)
 Parameter                        Description                       Valid Types
 expression                       The collection of values from which the Number, Timestamp, Duration, Text,
                                  first is chosen.                  Boolean
Returns: The first value as a Number, Timestamp, Duration, Text or Boolean. The return type matches the type
of the expression parameter.
FIRST can also be used as a window function:
  FIRST(<expression>)    OVER  (
      [  PARTITION  BY  [,  <partitionExpression>,     ...]  ]
       [ ORDER  BY <orderExpression>     [ {  ASC  | DESC  } ]  [, <orderExpression>,     ...]  [
  <windowFrame>   ]  ]
For more details about this syntax, refer to the Window Functions overview.

Example
This query returns the name of the first event in this process.
  SELECT
      (SELECT   FIRST (event_name))
  FROM THIS_PROCESS

Related    Information
Window  Functions [page 105]
SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                          PUBLIC   1171.4.9.6.4.6       LAST
Returns the last element from a collection of values.

Syntax
  LAST (<expression>)
 Parameter                        Description                      Valid Types
 expression                       The collection of values from which the Number, Timestamp, Duration, Text,
                                  last is chosen.                  Boolean
Returns: The last value as a Number, Timestamp, Duration, Text or Boolean. The return type matches the type
of the expression parameter.
LAST can also be used as a window function:
  LAST(<expression>)    OVER  (
       [ PARTITION  BY  [, <partitionExpression>,      ...]  ]
      [ ORDER   BY <orderExpression>     [ { ASC  | DESC  }  ] [,  <orderExpression>,    ...]  [
  <windowFrame>   ] ]
 )
For more details about this syntax, refer to the Window Functions overview.

Example
This query returns the name of the last event in this process.
  SELECT
      (SELECT   LAST(event_name))
 FROM  THISPROCESS

Related    Information
Window  Functions [page 105]

1.4.9.6.4.7       MAX
Finds the maximum value in a collection of values.
                                                                            SAP Signavio Analytics Language Guide
118   PUBLIC                                                                  SAP Signavio Analytics LanguageSyntax
 MAX(<expression>)
 Parameter                        Description                      Valid Types
 expression                       The collection from which the maxi- Number, Timestamp, Duration
                                  mum  value is chosen.
Returns: The maximum  value as a Number, Timestamp or Duration. The return type matches the type of the
expression  parameter.
MAX  can also be used as a window function:
  MAX(<expression>)    OVER  (
       [ PARTITION  BY  [, <partitionExpression>,      ...]  ]
       [ ORDER  BY <orderExpression>     [ { ASC  | DESC  }  ] [, <orderExpression>,     ...]  [
  <windowFrame>   ] ]
  )
For more details about this syntax, refer to the Window Functions overview.

Example
This query returns the largest discount.
  SELECT  MAX(discount)
 FROM  THIS_PROCESS

Related    Information
Window  Functions [page 105]

1.4.9.6.4.8        MIN
Finds the minimum value in a collection of values.

Syntax
 MIN(<expression>)
SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                         PUBLIC   119 Parameter                        Description                       Valid Types
 expression                       The collection from which the minimum Number, Timestamp, Duration
                                  value is chosen.
Returns: The minimum value as a Number, Timestamp or Duration. The return type matches the type of the
expression   parameter.
MIN can also be used as a window function:
  MIN(<expression>)    OVER  (
       [ PARTITION   BY [,  <partitionExpression>,      ...]  ]
       [ ORDER  BY <orderExpression>     [  { ASC  | DESC  }  ] [, <orderExpression>,     ...]   [
  <windowFrame>   ]  ]
  )
For more details about this syntax, refer to the Window Functions overview.

Example
This query returns the smallest discount.
  SELECT  MIN (discount)
  FROM THIS_PROCESS

Related    Information
Window  Functions [page 105]

1.4.9.6.4.9        STDDEV
Calculates the standard deviation for a collection of values.
The standard deviation describes the average deviation of all measured values from the mean value. A low
standard deviation indicates that the values tend to be close to the mean value. A high standard deviation
indicates that the values are spread out over a wide range.

Syntax
 STDDEV(<expression>)
                                                                             SAP Signavio Analytics Language Guide
120   PUBLIC                                                                   SAP Signavio Analytics Language Parameter                         Description                       Valid Types
 expression                        The collection of values for which you Number, Timestamp, Duration
                                   want to determine the standard devia-
                                   tion.
Returns: The standard deviation as a Number, Timestamp, or Duration. The return type matches the type of
the expression  parameter.
STDDEV   can also be used as a window function:
  STDDEV(<expression>)     OVER  (
       [ PARTITION   BY  [, <partitionExpression>,      ...]  ]
       [ ORDER  BY  <orderExpression>     [ { ASC  |  DESC  } ]  [, <orderExpression>,     ...]   [
  <windowFrame>    ] ]
  )
For more details about this syntax, refer to the Window Functions overview.



Example     1

This query returns the standard deviation of all order amounts.
  SELECT
      MIN("Order    Amount")   AS "Min"
      MAX("Order    Amount")   AS "Max"
       AVG("Order   Amount")   AS "Avg",
       STDDEV("Order   Amount")   AS  "StdDev"
  FROM  THISPROCESS
Output:


        Min          Max             Avg           StdDev

          20     2,166.14        385.668          357.452




Example     2

This query shows how the cycle time of a process changes week-to-week. Specifically, it calculates both the
average and the standard deviation of the cycle time on a weekly basis.
To smooth out short-term fluctuations in the data, it uses windowed versions of the average (AVG) and
standard deviation (STDDEV) functions. These versions calculate a moving average and moving standard
deviation for the weekly mean cycle time respectively.
In the nested query, sq1, all cases are clustered together by week. The mean cycle time within each cluster is
calculated.


SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                            PUBLIC   121The outer query applies the windowed AVG and STDDEV functions to the weekly mean cycle time. In both cases,
the window includes the three weeks preceding and the three weeks following the current week.
  SELECT
      "Week"
      "Avg Cycle  Time"
      AVG("Avg  Cycle  Time") OVER   (ROWS BETWEEN  3 PRECEDING  AND  3 FOLLOWING)  as
 mean,
      STDDEV("Avg  Cycle  Time")  OVER  (ROWS BETWEEN  3 PRECEDING  AND  3 FOLLOWING)  as
  std
 FROM
  (
      SELECT
          DATE_TRUNC('WEEK',    (SELECT LAST  (END_TIME)))  AS  "Week",
          AVG((SELECT   LAST(end_time)  -  FIRST(end_time)))   AS "Avg  Cycle  Time"
      FROM THIS  PROCESS
      ORDER  BY 1 ASC NULLS  FIRST
      FILL timeseries('WEEK')
  ) as sql


  Week                        Avg Cycle Time                 mean              std

  06/01/2020, 00:00           6d 14h                         9d 20h            1d 23h

  13/01/2020, 00:00           9d 20h                         10d               1d 19h

  20/01/2020, 00:00           11d 5h                         10d               1d 15h

  27/01/2020, 00:00           11d 16h                        10d 4h            1d 13h

  03/02/2020, 00:00           10d 16h                        10d 18h           13h 40m

  10/02/2020, 00:00           10d 3h                         10d 20h           11h 12m

  17/02/2020, 00:00           10d 23h                        10d 18h           10h 45m

  24/02/2020, 00:00           10d 18h                        10d 17h           9h 18m





Related   Information


Window Functions [page 105]




1.4.9.6.4.10       SUM


Calculates the sum of all values in a collection of numeric values. NULL values are ignored.


                                                                       SAP Signavio Analytics Language Guide
122   PUBLIC                                                              SAP Signavio Analytics LanguageSyntax
 SUM(<expression>)
 Parameter                       Description                      Valid Types
 expression                      The collection of values to be summed. Number, Duration
Returns: The sum as a Number or Duration. The return type matches the type of the expression parameter.
SUM  can also be used as a window function:
  SUM(<expression>)   OVER  (
      [ PARTITION   BY  [, <partitionExpression>,     ...]  ]
      [ ORDER  BY  <orderExpression>    [ { ASC  | DESC  }  ] [,  <orderExpression>,    ...]  [
  <windowFrame>   ] ]
For more details about this syntax, refer to the Window Functions overview.

Example
This query returns the total order amount in Boston.
  SELECT  SUM("ORDER  AMOUNT")
 FROM  THIS  PROCESS
  WHERE("City"   = 'Boston')

Related    Information
Window  Functions [page 105]

1.4.9.6.5          Non-Aggregate           Functions
The functions in this section do not aggregate collections of values into a single value. They are applied to
individual rows within a window.
For more general information about windows, refer to the Window Functions overview.

Related    Information
Window  Functions [page 105]
SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                        PUBLIC   1231.4.9.6.5.1       LAG

Returns a single column value from the preceding row according to the window partition and sort criteria.
When  no preceding row exists, a null value is returned.


Syntax

  LAG(<columnName>)    OVER  (
       [ PARTITION  BY  <partitionExpression>      [, <partitionExpression>,      ...  ] ]
      ORDER  BY  <sortExpression>
  )
 Parameter                                         Description
 columnName                                        The column from the preceding row to be included in the
                                                   current row.
 partitionExpression                               An expression determining how the rows are grouped.
 sortExpression                                    An expression determining how each partition is sorted.


Example
This query partitions data by case ID, sorting each partition chronologically. Each row includes the case ID and
event name along with two additional columns:
    The event name from the preceding row
    The difference between the timestamps of the preceding and current rows
The result shows the name of each event that occurred, the name of the preceding event and how much time
separates the two events. For events having no predecessor, a null value is displayed.
  SELECT
       case_id,
      LAG(event_name)    OVER   (PARTITION  BY  case_id   ORDER  BY end_time)   AS  Predecessor,
      event_name   AS  Event,
      end time     LAG(end_time)    OVER   (PARTITION  BY  case_id  ORDER   BY end_time)   AS
 cycle_time
  FROM FLATTEN(THISPROCESS)
  .& Example
  Example output:






                                                                             SAP Signavio Analytics Language Guide
124   PUBLIC                                                                   SAP Signavio Analytics Language   case_id     Predecessor                           Event                                 cycle_time
   00001       null                                  Receive Customer Order                null
   00001       Receive Customer Order                Change Order Quantity                 14h 47m
   00001       Change Order Quantity                 Receive Payment                       2d 13h
   00001       Receive Payment                       Ship Goods Express                    17h 9m
   00001       Ship Goods Express                    Receive Delivery Confirmation         3d 23h
   00002       null                                  Receive Customer Order                null
   00002       Receive Customer Order                Receive Payment                       1d 15h
   00002       Receive Payment                       Send items to Printing                18h 49m
   00002       Send items to Printing                Order Canceled                        1d 6h


1.4.9.6.5.2        LEAD
Returns a single column value from the succeeding row according to the window partition and sort criteria.
When  no succeeding row exists, a null value is returned.

Syntax
  LEAD(<columnName>)     OVER  (
       [ PARTITION   BY  <partitionExpression>       [, <partitionExpression>,       ... ]  ]
       ORDER  BY  <sortExpression>
  )
 Parameter                                           Description
 columnName                                          The column from the succeeding row to be included in the
                                                     current row.
 partitionExpression                                 An expression determining how the rows are grouped.
 sortExpression                                      An expression determining how each partition is sorted.




SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                             PUBLIC    125Example
This query partitions data by case ID, sorting each partition chronologically. Each row includes the case ID and
event name along with two additional columns:
    The event name from the next row
    The difference between the timestamps of the current and succeeding rows
The result shows the name of each event that occurred, the name of the succeeding event and how much time
separates the two events. For events having no successor, a null value is displayed.
  SELECT
      case_id,
      event_name   AS  Event,
      LEAD (event_name)    OVER  (PARTITION   BY case_id   ORDER  BY  end_time)   AS Successor,
      LEAD(end_time)    OVER  (PARTITION   BY  case_id  ORDER   BY end_time)   -  end_time  AS
  CycleTime
  FROM FLATTEN(THIS_PROCESS)
  .& Example
  Example output:
   case_id    Event                                Successor                            CycleTime
   00001      Receive Customer Order               Change  Order Quantity               14h 47m
   00001      Change  Order Quantity               Receive Payment                      2d 13h
   00001      Receive Payment                      Ship Goods Express                   17h 9m
   00001      Ship Goods Express                   Receive Delivery Confirmation        3d 23h
   00001      Receive Delivery Confirmation        null                                 null
   00002      Receive Customer Order               Receive Payment                      1d 15h
   00002      Receive Payment                      Send items to Printing               18h 49m
   00002      Send  items to Printing              Order Canceled                       1d 6h
   00002      Order Canceled                       null                                 null


1.4.9.6.6          Ranking       Functions
The functions in this section are window functions that sort data partitions and assign a rank value for each row
within a result set.
Using these functions, you can filter the results and sort them for consistent stacking in visualizations such as
stacked bar charts.
                                                                            SAP Signavio Analytics Language Guide
126   PUBLIC                                                                   SAP Signavio Analytics LanguageRanking functions, as follows:
    ROW_NUMBER():    Returns sequential row numbers.
    RANK(): Returns the rank for each row in a partition, with gaps in the ranking values.
    DENSE_RANK():   Returns the rank for each row in a partition, with no gaps in the ranking values.


1.4.9.6.6.1       DENSE_RANK

Returns the rank of each row in a result set based on the order defined in the OVER clause for each partition
The DENSE_RANK    function assigns the same ranking for rows with identical values and doesn't skip the rank
positions for these identical rows. For example, rows with rank values, 1, 2, 2, 2, 3, 4. The rank value of the next
nonidentical row will have the succeeding rank.


Syntax

  DENSE  RANK () OVER   (
       [ PARTITION   BY  <expression>    [, <expression>,      ...] ]
       [ ORDER  BY  <expression>    [ {  ASC |  DESC  }  ] [,  <expression>,    ...]  ]
  )
 Parameters                                         Description
 expression                                         The column or argument determining how the rows are
                                                    grouped and how each partition is sorted. Mandatory if PAR-
                                                    TITION BY or ORDER BY clauses are included in the query.
PARTITION  BY: Splits the result set into partitions. Optional.
ORDER   BY: Sorts each partition based on the defined criteria. Optional. If ORDER BY clause isn't included in
your query, each row will have the same rank value, one.
ASC  | DESC: ASC sorts the result set in ascending order and DESC sorts it in descending order based on the
expressions defined in ORDER BY.


Example     1

In the following query, the cities are first partitioned by the type of good and sorted by the count of high value
orders per Type of Goods. The query then returns the cities with order amount greater than 1500 ranked in
descending order.
  SELECT  "Type  of  Goods",
            "City",
            count(case_id)   AS  "Orders   >  $1500",
           ROW_NUMBER()    OVER   (PARTITION   BY  "Type  of Goods"   ORDER  BY  count(case_id)
  DESC)  AS  "ROW_NUMBER",

SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                             PUBLIC   127           RANK  () OVER   (PARTITION   BY  "Type  of  Goods"   ORDER  BY  count  (case_id)  DESC)
  AS "RANK",
            DENSE_RANK()    OVER  (PARTITION    BY "Type   of Goods"   ORDER   BY count  (case_id)
  DESC)  AS  "DENSE_RANK"
  FROM  THIS  PROCESS
  WHERE  "Order   Amount"   > 1500
 GROUP   BY  1,2
  .& Example
  Result:
   Cities Ranked by Count of High Value Orders per Type of Goods

    Type of Goods        City            ROW_NUMBER           RANK       DENSE_RANK     Orders >$1500
    T-shirt with Print   Boston                        1             1               1               1
    Hoody                Houston                       1             1               1               8
                         Boston                        2             2               2               5
                         New York                      3             3               3               3
                         San Francisco                 4             4               4               2
                         Washington                    5             4               4               2
                         Miami                         6             6               5               1
    Hoody with Print     Houston                       1             1               1              18
                         New York                      2             2               2              15
                         San Francisco                 3             3               3               4
                         Washington                    4             4               4               3
                         Miami                         5             4               4               3
                         Boston                        6             6               5               1



Example     2

The following query partitions the result set by the type of goods and returns the list of cities with order amount
greater than 1500 within a partition. In the result set, the RANK and DENSE RANK of all the returned rows is
one as the ORDER  BY clause isn't included in the query.
  SELECT  "Type   of Goods",
          "City"
            count(case_id)    AS  "Orders   > $1500",
            ROW_NUMBER()    OVER  () AS  "ROW_NUMBER"
            RANK () OVER   () AS  "RANK"
           DENSE _RANK()    OVER  () AS  "DENSE   RANK"
  FROM  THIS  PROCESS
  WHERE  "Order   Amount"  >  1500


                                                                               SAP Signavio Analytics Language Guide
128    PUBLIC                                                                     SAP Signavio Analytics Language   .& Example
   Result:
   Rank & Dense Rank without ORDER BY Clause

    Type of Goods          City               ROW_NUMBER        RANK       DENSE_RANK       Orders > $1500
    Hoody with Print       Houston                          1          1                1                 18
                           New York                         4          1                1                 15
                           Washington                       5          1                1                  3
                           Miami                            7          1                1                  3
                           Boston                           8          1                1                  1
                           San Francisco                    9          1                1                  4
    Hoody                  Miami                            2          1                1                  1
                           San Francisco                    6          1                1                  2
                           Houston                         10          1                1                  8
                           Boston                           11         1                1                  5
                           Washington                      12          1                1                  2
                           New York                         13         1                1                  3
    T-shirt with Print     Boston                           3          1                1                  1



1.4.9.6.6.2         RANK

Returns  the rank of each row in a result set based on the order defined in the OVER clause for each partition.
The  RANK  function assigns the same  ranking for rows with identical values and skips the rank positions for
these identical rows. For example, rows with rank values, 1, 2, 2, 2, 5, 6. The rank value of the next nonidentical
row depends   on the number  of rows with same ranking. The number   of rows with the same ranking determines
the number  of rank values to be skipped.


Syntax

  RANK ()  OVER   (
        [ PARTITION    BY  <expression>     [,  <expression>,      ...]  ]
        [ ORDER  BY  <expression>      [ {  ASC  |  DESC  }  ]  [, <expression>,      ...]  ]


SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                                   PUBLIC    129 Parameters                                         Description
 expression                                         The column or argument determining how the rows are
                                                    grouped and how each partition is sorted. Mandatory if PAR-
                                                    TITION BY or ORDER BY clauses are included in the query.

PARTITION  BY: Splits the result set into partitions. Optional.
ORDER  BY: Sorts each partition based on the defined criteria. Optional.
ASC | DESC: ASC  sorts the result set in ascending order and DESC sorts it in descending order based on the
expressions defined in ORDER BY.



Example

In the following query, the cities are first partitioned by the type of good and sorted by the count of high value
orders per Type of Goods. The query then returns the cities with order amount greater than 1500 ranked in
descending order.
  SELECT  "Type  of  Goods",
          "City"
           count(case_id)    AS  "Orders   > $1500",
          ROW_NUMBER()    OVER  (PARTITION   BY  "Type  of  Goods"   ORDER  BY  count (case_id)
  DESC)  AS "ROW_NUMBER"
          RANK()  OVER(PARTITION     BY  "Type  of Goods"   ORDER  BY  count(case_id)    DESC)  AS
 "RANK"
 FROM   THIS  PROCESS
 WHERE   "Order  Amount"   >  1500
  GROUP  BY 1,  2

  .& Example
  Result:





















                                                                              SAP Signavio Analytics Language Guide
130   PUBLIC                                                                    SAP Signavio Analytics Language   Cities Ranked by Count of High Value Orders per Type of Goods

    Type of Goods           City               ROW_NUMBER               RANK        Orders > $1500
    T-shirt with Print      Boston                             1                1                   1
    Hoody                   Houston                            1                1                  8
                             Boston                            2               2                   5
                            New York                           3               3                   3
                            San Francisco                      4               4                   2
                            Washington                         5               4                   2
                            Miami                              6                6                  1
    Hoody with Print        Houston                            1                1                 18
                            New York                           2                2                 15
                            San Francisco                      3               3                   4
                            Washington                         4               4                   3
                            Miami                              5               4                   3
                            Boston                             6               6                   1


1.4.9.6.6.3        ROW_NUMBER
Returns the calculated row number based on partitioned and sorted set of values.
The ranking happens sequentially based on the order defined in the OVER clause for each partition. The rank
value is different even if the rows contain the same values.

Syntax
  ROW_NUMBER  () OVER   (
       [ PARTITION   BY  <expression>    [, <expression>,    ...]  ]
       [ ORDER  BY  expression   [  { ASC  | DESC  }  ] [,  <expression>,    ...]  ]




SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                            PUBLIC   131 Parameters                                       Description
 expression                                       The column or argument that determines how the rows are
                                                  grouped and how each partition is sorted. Mandatory if PAR-
                                                  TITION BY or ORDER BY clauses are included in the query.
PARTITION  BY: Splits the result set into partitions. Optional.
ORDER  BY: Sorts each partition based on the defined criteria. Optional.
ASC  | DESC: ASC sorts the result set in ascending order and DESC sorts it in descending order based on the
expressions defined in ORDER BY.
Example
In the following query, the order amount is first partitioned based on the city and the type of good. The query
then returns the order amount ranked in descending order in the result set.
  SELECT  "Type  of Goods",
          "City",
          "Order  Amount"
          ROW_NUMBER()   OVER  (PARTITION   BY  "Type  of Goods",   "City"   ORDER  BY  "Order
  Amount"  DESC)
  FROM THISPROCESS
  WHERE  "Order  Amount"  >  1500
  ORDER  BY 1,  2, 4
  .ï¿½ Example
  Result:
    Type of Goods          City               Order Amount          ROW_NUMBER()     OVER()
    Hoody                  Boston                        1,738.26                               1
    Hoody                  Boston                        1,732.03                              2
    Hoody                  Boston                        1,721.64                              3
    Hoody                  Boston                         1,684.4                              4
    Hoody                  Boston                        1,528.04                               5
    Hoody                  Houston                       1,719.93                               1
    Hoody                  Houston                       1,644.87                              2
    Hoody                  Houston                       1,612.53                              3
    Hoody                  Houston                       1,539.99                              4
    Hoody                  Houston                       1,539.11                               5

                                                                            SAP Signavio Analytics Language Guide
132   PUBLIC                                                                  SAP Signavio Analytics Language1.4.9.7         BUCKET          function

Learn about the BUCKET()  function in SIGNAL, the process mining query language of SAP Signavio Process
Intelligence.
The BUCKET()   function calculates the indexes of values in a range of values (as buckets) that are equal in
size. The bucket indexes can then be applied to an aggregate function, for example a COUNT() function, which
counts the values within that bucket.
The BUCKET()   function uses following parameters to calculate the bucket indexes as a positive integer
number:
    The value to be bucketed (expression)
    The minimum   value within the result range (min)
    The fixed width for each bucket (bucket_width)
    The total number of consecutive, non-overlapping buckets (#_inlier_buckets)
Syntax:
BUCKET(expression,     min,   bucket_width,    #_inlier_buckets)

 Parameter                                           Description
 expression                                          Specify a column with numeric or duration values in the
                                                     expression.
 min                                                 The starting value of the bucket. The values must be either
                                                     numeric or duration values.
 bucket_width                                        The width of the bucket. The value must be either a positive
                                                     numeric or positive duration [page 5] that is greater than
                                                     zero.
 #_inlier_buckets                                    The number of required buckets. The value must be a posi-
                                                     tive integer that is greater than or equal to one.
To understand the range of values in the bucket, you can first determine the bucket boundaries and then apply
the boundaries to the BUCKET() function. To determine the bucket boundaries and then apply the boundaries
to the BUCKET() function, use the following pattern:
  SELECT
  IF  (b =  0, NULL,   ((b -  1)  * bucket_width)    +  min)  AS  bucket_start,
  IF  (b =  #_inlier_buckets    +  1,  NULL,  (b  * bucket_width)    +  min)  AS  bucket_end,
  value
  FROM  (
  SELECT  BUCKET(expression,      bucket_start,    bucket_width,    #_inlier_buckets)     AS  b,
  COUNT(1)   AS value
 FROM
  ) AS  sub
The bucket boundaries pattern isn't required for the BUCKET() function to work. It provides a useful way to
understand the range of values in the bucket. The pattern defines the minimum and maximum values being
aggregated in the bucket.
Example  1:
The following example calculates the bucket boundaries (bucket_start and bucket_end). Then aggregates the
total number of cases based on 'Order Amount'. The cases are bucketed into intervals of 100â¬ (bucket_width).


SAP Signavio Analytics Language Guide
SAP Signavio Analytics Language                                                             PUBLIC    133The results are then calculated for 100 buckets (#_inlier buckets) where the 'Order Amount' is greater than 1â¬
(min) and less than 10001â¬ (max). The maximum value is calculated with the following formula: min + bucket
width x #_inlier_buckets = 1+ 100 x 100 = 10001.
  SELECT
  total_cases,
  bucket_id,
  IF (bucket_id   > 100,  -1,  ((bucket_id-1)    * 100)  +  0) AS  bucket_start,
  IF (bucket_id   > 100,  -1,  (bucket_id   *  100)  + 0) AS  bucket_end
 FROM  (
 SELECT
  BUCKET("Order   Amount",   1, 100,100)   as  bucket_id,
  COUNT(case_id)   as  total_cases
 FROM  FLATTEN(THIS_PROCESS)
  WHERE  "Order  Amount"   is not  null
  GROUP  BY 1
  ORER   Y  1
 )  as sub
Result:


   bucket_id  bucket_start bucket_end   total_cases
          9          800          900         550
         10          900         1,000      11,768
          11        1,000        1,100      12,221
         12         1,100       1,200         485
         15         1,400        1,500       2,362
          16        1,500        1,600       2,039

Example 2:
The following example aggregates the total number of cases based on the 'Order Amount'. The cases are
bucketed into intervals of 100â¬ (bucket_width). The results are calculated for 10 buckets (#_inlier_buckets)
where the 'Order Amount' is greater than 1â¬ (min) and less than 1001â¬ (max). The maximum value is
calculated with the following formula: min + bucket width x #_inlier_buckets = 1 + 100 x 10 = 1001
The result displays in a breakdown widget. The values on the X axis represent the bucket ID. Buckets that
contain at least one case within them are displayed. The cases that have a bucket value of 10 but exceed the
maximum   value are added into the outlier bucket. The outlier bucket has a bucket ID of 11.
  SELECT
  BUCKET("Order   Amount",   1, 100,10)   as order_amount,
  COUNT(case_id)
 FROM  FLATTEN(THIS_PROCESS)
  WHERE  "Order  Amount"   is not  null
  GROUP  BY 1
  ORDER  BY 1






                                                                            SAP Signavio Analytics Language Guide
134   PUBLIC                                                                  SAP Signavio Analytics LanguageResult:
     COUNT(case_id)
    20k
    15k
    10k
     5k
      0        9              10              11
                        order_amount





















SAP Signavio Analytics Language Guide
SAP  Signavio Analytics Language                                                                                              PUBLIC       1352          SIGNAL              keywords


Learn about the keywords  in SIGNAL,  the process mining query  language of SAP  Signavio Process Intelligence.
This reference contains the keywords  used in SIGNAL.
If an attribute is named like a keyword, the attribute must be enclosed in double quotes.
 Keyword                                                Description
 AND                                                    Logical operator
 ANY                                                    Wildcard operator for MATCHES
 AS                                                     Function to rename the result set with an alias
 ASC                                                    Sorts the result set in ascending order
 AVG                                                    Function to determine the average of multiple values
 BEHAVIOUR                                              Operator to check whether an expression matches a com-
                                                        plex pattern. Used in conjunction with MATCHES.
 BOOL  AND                                              Function that returns a value if all conditions are true
 BOOL_OR                                                Function that returns a value if at least one condition is true
 CASE WHEN                                              An expression which evaluates a list of conditions and re-
                                                        turns a value when the conditions are met.
 COUNT                                                  Function to determine the number of records
 COUNT  DISTINCT                                        Function to determine the number of distinct records
 CREATE                                                 Reserved keyword
 DATE_TRUNC                                             Date function to truncate timestamps
 DESC                                                   Sorts the result set in descending order
 DROP                                                   Reserved keyword
 DURATION                                               Date function to specify a duration
 EXTERNAL                                               Reserved keyword
 FILL NULL                                              Function to fill all results with NULL
 FILL GROUP                                             Function to fill groups with distinct values
 FILL TIMESERIES                                        Function to fill gaps in the result set for a timeseries with
                                                        NULL  values
 FILTER                                                 Filters values inside of an expression
 FIRST                                                  Function to return the first value of an array
 FORMAT                                                 Reserved keyword
 FROM                                                   Specifies from where to retrieve the data
 GRANT                                                  Reserved keyword


                                                                                    SAP Signavio Analytics Language Guide
136    PUBLIC                                                                                     SIGNAL keywords Keyword                                                  Description
 GROUP  BY                                                Function to group multiple values
 HAVING                                                   Reserved keyword
 IF                                                       Function to specify a condition
 IN                                                       Filter function
 IS NOT NULL                                              Operator for NULL values
 IS NULL                                                  Operator for NULL values
 LAST                                                     Function to return the last value of an array
 LIMIT                                                    Function to limit the number of records in the result set
 LOCATION                                                 Reserved keyword
 MATCHES                                                  Operator to check whether an expression matches a simple
                                                          pattern
 MAX                                                      Aggregate function to determine the maximum value
 MIN                                                      Aggregate function to determine the minimum value
 NOT IN                                                   Logical predicate to test the existence of a value
 NULL                                                     A field with a NULL value is a field with no value
 OFFSET                                                   Starting point to return rows from a result set.
 ONLY                                                     Reserved keyword
 OR                                                       Logical operator
 ORDER  BY                                                Function to sort the result set according to sorting criteria
 PARQUET                                                  Reserved keyword
 PERMISSIONS                                              Reserved keyword
 PUBLIC                                                   Reserved keyword
 PRIVATE                                                  Reserved keyword
 REPLACE                                                  Reserved keyword
 SELECT                                                   Selects data from the table.
 SUM                                                      Function to sum up the values of the result set
 TABLE                                                    Reserved keyword
 TO                                                       Reserved keyword
 UNION  ALL                                               Combines  the result set of two or more SELECT statements
 WHERE                                                    Filters a result set to include only records that fulfill a speci-
                                                          fied condition
 WITH                                                     Reserved keyword





SAP Signavio Analytics Language Guide
SIGNAL keywords                                                                                       PUBLIC    1373          SIGNAL              tutorial




Learn about  using SIGNAL  in the following tutorial, the process mining query language of SAP Signavio Process
Intelligence.
This tutorial supports you to get started with SIGNAL.
Based  on a sample  process with test data, this tutorial introduces you to the main principles of SIGNAL,
starting from simple case-attribute based  queries to more complex  event-based   queries.
The tutorial is structured as follows:
 Section                     Examples                    Learning success            Introduced keywords
 Count cases and cities       â¢  How  many cases exist    â¢  Count a case attribute  COUNT
                                 for this process?           Count the distinct re-  COUNT   DISTINCT
                                 How  many different cit-    cords of a case attribute
                                 ies are involved in this    Count two or more case  AS
                                 process?                    attributes              ORDER  BY
                                 How  many cases exist    â¢  Rename  case attribute
                                                                                     WHERE
                                 for each city?              names  with alias names
                                 How  many cases exist        Sort the result set    IN
                                 for New York and Miami?     Filter a result set to in-
                                                             clude only records that
                                                             fulfill a specified condi-
                                                             tion
 Analyze order amounts        â¢  What is the average or-  â¢  Determine the average   AVG
                                 der amount of this proc-    value of a case attribute
                                                                                     SUM
                                 ess?                     â¢  Determine a filtered
                                 What is the average or-     average case attribute  FILTER
                                 der amount in Houston?      Sum  up a case attribute
                                 What  is the total order â¢  Determine the percent-
                                 amount  in Boston?          age value of a case at-
                                 What is the percentage      tribute compared to the
                                 order amount in Boston      overall value
                                 compared  to the total   â¢  Apply filter condition(s)
                                 order amount?               within a query
 Determine process cycle      â¢  How  long is the average â¢  Calculate cycle times   MAX
 times                           cycle time of all cases?    Perform subqueries on   MIN
                                 How  long is the average    event attributes
                                 cycle time by city?      â¢  Determine cycle time by
                                 What are the maxi-          case attribute
                                 mum  / minimum  cycle    â¢  Calculate the largest /
                                 times by city?              smallest values


                                                                                      SAP Signavio Analytics Language Guide
138    PUBLIC                                                                                        SIGNAL tutorial Section                         Examples                        Learning  success               Introduced   keywords
 Investigate events               â¢   How  many  cases  have          Counting  the total num-   IF
                                      been  closed / canceled?        ber of events
                                                                                                 NOT
                                       What is the drop-out        â¢  Filter for not true condi-
                                      rate?                           tions                      MATCHES
                                      How  many  cases  follow     â¢  Determine  the process
                                      the standard  process?          conformance
                                      How  many  cases  are
                                      canceled  although the T-
                                      shirts have been sent for
                                      printing?





3.1         Understand                the     sample          process

Understand    the  sample   process   used  in the SIGNAL    tutorial.
This  tutorial is using the following  sample   process:

                                                             Customer
                                              Customer Service
      ï¿½
              Receive   Receive payment
            customer order
      Tshirt
      ordered
                                                Logistics
                                  Individual print
                                   ordered?
                                       no                                                Ship goods
                                                                                                              Receive delivery
                                                                                                         x
                                                                                                                        >
                                                                                         standard              information
                                                                                                                         com
                                         Send T-Shirt to
                                          printing
                                                                            Receive T-shirt    Ship goods
                                                                            from printing      express
                                               Printine Team
                                                          T-shirt printed

   i Note
   For a more   detailed  view  of the process  flow,  check  the  Process  Discovery   widget  of the sample   process.

In this tutorial, the following  case  and  event  attributes  are used:
     Case  attributes
          Case  ID
          City
          Order  Amount    in EUR
     Event  attributes
          EventName


SAP Signavio Analytics Language Guide
SIGNAL tutorial                                                                                                   PUBLIC      139
                                  T-Shirt fadory
Printing Team                     Logistics                     Customer Service
                                         d           Timestamp

Example     (extract):

 Imported     data

  Caseld                       EventName                   Timestamp                   City                         Customer ID
  Type                         Type                        Type                         Type                        Type
                                                                                        Choice                      Choice
  Case ID                      'ENT.NAME
                                                           ID.TIME
  10100                        Receive Customer Order      2017-08-08 22:52             Houston                     10100
  10100                        Receive Customer Order      2017-08-08 22:52             Houston                     10100
  10100                        Receive Payment             2017-08-12 13:04             Houston                     10100
  10100                        Receive Payment             2017-08-12 13:04             Houston                     10100
  10100                        Ship Goods Standard         2017-08-16 02:20             Houston                     10100
  10100                        Ship Goods Standard         2017-08-16 02:20             Houston                     10100
  10100                        Receive Delivery Confirmation 2017-08-22 05:18           Houston                     10100
  10100                        Receive Delivery Confirmation 2017-08-22 05:18           Houston                     10100
  10101                        Receive Customer Order      2017-07-12 13:30             San Francisco               10099
  10101                        Receive Customer Order      2017-07-12 13:30             San Francisco               10099
  10101                        Receive Payment             2017-07-15 07:15             San Francisco               10099
  10101                        Receive Payment             2017-07-15 07:15             San Francisco               10099
  10101                        Ship Goods Standard         2017-07-19 08:03             San Francisco               10099
  10101                        Ship Goods Standard         2017-07-19 08:03             San Francisco               10099
  10101                        Receive Delivery Confirmation 2017-08-06 01:47           San Francisco               10099
  10101                        Receive Delivery Confirmation 2017-08-06 01:47           San Francisco               10099
  10102                        Receive Customer Order      2017-06-26 17:33            Washington                   10198

   i Note

   For  more   detailed    information    about   the  test  data,  check   them    under   Process    Settings   > Data   in the  sample
   process.






3.2          Count           cases         and       cities


Read   about   the  overview     of case  attributes    used  in the   SIGNAL    tutorial.

You  want   to get  an  overview    about    the case   attributes   of the   process:   How    many    cases   exist for  this process?
How    many   different   cities  are involved    in this process?     How   many    cases   exist  for each   city?  How   many    cases
exist  for New   York   and  Miami?




Example          1:  How      many       cases      exist     for    this    process?


Learning    success:    Count    a case  attribute.

Query    instruction:   Count    (keyword:    COUNT)      all cases   (expression:    case_id)   in this  process.

SIGNAL     syntax:

  SELECT
  COUNT    (case_id)
  FROM     THIS_PROCESS

Query    result: The   total  number     of cases,  displayed    in a  Value  widget.



                                                                                                             SAP Signavio Analytics Language Guide
140      PUBLIC                                                                                                                 SIGNAL  tutorial    Number      of cases

    877




Example    2: How   many   different  cities  are involved   in this process?
Learning success: Count the distinct records of a case attribute.
Query instruction: Count (keyword: COUNT) all cities (expression: City) in this process. Unlike example 1, only
distinct (keyword: DISTINCT) records are counted.
SIGNAL syntax:
  SELECT
 COUNT (DISTINCT  City)
  FROM THIS PROCESS
Query result: The total number of distinct cities, displayed in a Value widget:
   Number     of cities               ï¿½

   6








SAP Signavio Analytics Language Guide
SIGNAL tutorial                                                                    PUBLIC   141
a e eExample     3: How   many   cases   exist  for each   city?
Learning success:
    Count two or more case attributes.
    Rename case attribute names with alias names.
    Sort the result set.
Query instruction: Count (keyword: COUNT) the number of cases (expression: case id) by city (expression:
City). Rename the case attribute names with aliases (keyword: AS) to "Case Number" and "Site". This makes
labels for widgets easier to understand. Finally sort the result set by Case numbers (keywords: ORDER BY 1) in
descending order (keyword: DESC).
The order expression 1 selects the column, which has to be sorted. You can sort in ascending order (keyword:
ASC), descending order (keyword: DESC), by null values first (keyword: NULLS FIRST,) or by null values last
(keyword: NULLS LAST).
SIGNAL  syntax:
  SELECT
  COUNT(case_id)   AS "Case  Numbers",   City  AS "Site"
 FROM  THIS_PROCESS
 ORDER  BY  1 DESC
Query display: The total number of cases by city, displayed in a SIGNAL table widget and in a Breakdown
widget.
Table:

    Number      of  cases   by  city


     Site               Case  Numbers
     Boston                          180
     Houston                         157
     Washington                      139
     New   York                      138
     Miami                           133
     San  Francisco                  130


                                                                          SAP Signavio Analytics Language Guide
142   PUBLIC                                                                            SIGNAL tutorialBreakdown (bar chart):
   Number    of cases by  city


     Case Numbers
    180
    150
    120
     90
     60
     30
      0
            Boston                    Washington                    Miami
                                                Site



Example    4:  How   many   cases   exist for  New   York  and  Miami?
Learning success: Filter a result set to include only records that fulfill a specified condition.
Query instruction: This query is very similar to example 3, but in this case, you do not query all cases but only
the cases for New York and Miami. To filter the result, introduce the filter (keyword: WHERE) and specify the
filter condition (keyword: IN + expression: 'New York', 'Miami'). Sort the result set by cities (keyword: ORDER
BY 1), in descending order(keyword: DESC).
SIGNAL syntax:
  SELECT
  COUNT(case_id)  AS  "Case  Numbers",  "City"  AS  "Site"
  FROM THIS  PROCESS
 WHERE  City  IN('New  York',  'Miami')
  ORDER BY  1 DESC
Query display: The total number of cases by filtered cities, displayed in a SIGNAL table widget and in a
Breakdown widget.




SAP Signavio Analytics Language Guide
SIGNAL tutorial                                                                      PUBLIC  143
eoeTable:
    Number     of cases  in New   York   and  Miami

     Site        Case  Numbers
     New  York               138
     Miami                   133

Breakdown (bar chart):
   Number   of cases in New York and Miamiï¿½

     Case Numbers
    150
    120
    90
    60
    30
     0
                      New York                              Miami
                                          Site


3.3     Analyze     order   amounts
You want to get insights about the order amount: What is the average order amount of this process? What is
the average order amount in Houston? What is the total order amount in Boston? What is the order amount in
Boston related to the total order amount?
                                                                 SAP Signavio Analytics Language Guide
144  PUBLIC                                                                 SIGNAL tutorial
e e eExample    1: What   is the  average   order  amount    of this  process?
Learning success: Determine the average value of a case attribute.
Query instruction: Determine the average value (keyword: AVG) for the order amount(expression: Order
Amount in EUR).
SIGNAL syntax:
  SELECT
 AVG("Order   Amount  in EUR")
  FROM THIS  PROCESS
Query result: The aggregated value, displayed in a Value widget:

    Average   order   amount


    â¬211.00





Example    2: What   is the  average   order  amount     in Houston?
Learning success: Determine a filtered average case attribute.
Query instruction: Determine the average order amount (see example 1). Introduce the filter (keyword:
WHERE)  and specify the filter condition (expression: "City"='Houston').
SIGNAL syntax:
  SELECT
 AVG("Order   Amount  in EUR")
 FROM  THISPROCESS
 WHERE("City"='Houston')







SAP Signavio Analytics Language Guide
SIGNAL tutorial                                                                      PUBLIC  145Query result: The average order amount in Houston, displayed in Value widget:

   Average   order   amount    in
   Houston

   â¬202.44





Example    3: What   is the total order  amount    in Boston?
Learning success: Sum up a case attribute.
Query instruction: Sum up (keyword: SUM) the total order amount (expression: "Order Amount in EUR").
Introduce the filter (keyword: WHERE) and specify the filter condition (expression: "City"='Boston').
SIGNAL syntax:
 SELECT
 SUM("Order  Amount  in EUR")
 FROM  THIS PROCESS
 WHERE("City"='Boston')
Query result: The total order amount in Boston, displayed in a Value widget:

   Total  order  amount    inï¿½
                                           8
   Boston

   â¬38,925.40








                                                                      SAP Signavio Analytics Language Guide
146   PUBLIC                                                                      SIGNAL tutorialExample    4:  What   is the percentage     order  amount     in Boston   compared     to the
total  order  amount?
Learning success:
    Determine the percentage value of a case attribute compared to the overall value.
    Apply filter condition(s) within a query.
Query instruction: Sum up the order amount in Boston (see example 3). Unlike example 3, you cannot
apply the filter condition as the last step. You have to filter (keyword: FILTER + filter condition: (WHERE
"City"='Boston')) the result set before you can calculate the percentage value.
SIGNAL syntax:
 SELECT
  SUM("Order  Amount  in EUR")
 FILTER   (WHERE "City"='Boston')
  /SUM("Order  Amount  in EUR")
 *  100
  FROM THIS  PROCESS
Query result: The percentage order amount of Boston, displayed in a Value widget:

   Amount     in Boston   in %


   21,036%





3.4      Determine        case    cycle    times
Read about how cycle times are determined in the SIGNAL tutorial.
You want to determine the cycle times of your process: How long is the average cycle time of all cases? How
long is the average cycle time by city? What are the maximum / minimum cycle times by city?





SAP Signavio Analytics Language Guide
SIGNAL tutorial                                                                      PUBLIC   147Example     1: How   long  is the  average   cycle  time   of all cases?
Learning success:
    Calculate cycle times
    Perform subqueries on event attributes
Query instruction: You have to calculate the cycle times first and then aggregate them to an average value. The
cycle times are calculated from the event-based timestamps, so you have to perform a subquery (keyword:
(SELECT).
To calculate the cycle time, you have to subtract the first event timestamp (keyword: SELECT FIRST +
expression: end_time) from the last event timestamp (keyword: SELECT LAST + expression: end_time). From
these values, you aggregate the average value (keyword: AVG) .
SIGNAL  syntax:
  SELECT
  AVG (
  (SELECT  LAST(end_time))
  (SELECT  FIRST(end_time)))
 FROM  THIS_PROCESS
Query result: The average cycle time, displayed in a Value widget:

    Average    cycle  time


    15d       2h





Example     2: How   long  is the  average    cycle  time  by  city?
Learning success: Determine cycle time by case attribute.
Query instruction: Determine the average cycle time (see example 1) by city (expression: City). Rename the
case attribute with an alias (keyword: AS) to "Cycle Time".
SIGNAL  syntax:
  SELECT
 AVG (
  (SELECT  LAST(end_time))
  (SELECT  FIRST(end_time)))    AS "Cycle  Time",   "City"

                                                                           SAP Signavio Analytics Language Guide
148   PUBLIC                                                                            SIGNAL tutorial FROM  THIS_PROCESS
Query result: The average cycle times by city, displayed in a SIGNAL table widget:

    Average    cycle  time  by  city


     City             Cycle Time
     San  Francisco   14d 9h
     Houston          15d 8h
     Boston           14d  11h
     New  York        15d 4h
     Washington       16d 4h
     Miami            14d 23h



Example    3: What    are the  maximum     /  minimum     cycle  times   by city?
Learning success: Calculate the largest / smallest values.
Query instruction: According to example 1, you calculate the cycle times by city. From these values, you
determine the smallest value(keyword: MIN) and the largest values(keyword: MAX). Rename the values with
aliases (keyword: AS) to "Maximum Cycle Time" and "Minimum Cycle Time". Finally sort the result set by
city(keywords: ORDER BY 3) in ascending order(keyword: ASC).
SIGNAL syntax:
  SELECT
 MAX (
  (SELECT LAST(end_time))
  (SELECT FIRST(end_time)))    AS "Maximum  Cycle  Time",
 MIN (
  SELECT LAST(end_time))
  (SELECT FIRST(end_time)))    AS "Minimum  Cycle  Time",
  "City"
  FROM THIS  PROCESS
  ORDER BY  3 ASC

SAP Signavio Analytics Language Guide
SIGNAL tutorial                                                                      PUBLIC  149Query result: The maximum /minimum cycle times, displayed in a SIGNAL table widget:
    Maximum/Minimum              cycle  times    by  city

     City               Maximum     Cycle Time     Minimum    Cycle  Time
     Boston             30d  8h                   2d  23h
     Houston            37d  22h                  3d  12h
     Miami              33d  19h                   5d 1h
     New   York         32d  8h                   2d  5h
     San  Francisco     32d  14h                   1d 7h
     Washington         34d  20h                  4d  10h


3.5      Investigate       events
Read about how events of the process are used in the SIGNAL tutorial.
You want to get an overview about the events of the process: How many cases have been closed / canceled?
What is the drop-out rate? How many cases follow the standard process? How many cases are canceled
although the T-shirt has been sent for printing?
Example    1: How   many   cases   have  been   closed  /  canceled?
Learning success: Counting the total number of events.
You perform two subqueries for the last event names and sum up all cases for which the respective condition is
fulfilled. The event names are event-based attributes, so you perform a subquery (keyword: (SELECT).
Select the last events of the cases (keyword: SELECT LAST + expression: event_name).
If (keyword: IF) the last event name is "Receive Delivery Confirmation" (keyword: IN + expression: ('Receive
Delivery Confirmation')) count 1, otherwise 0 (keyword: 1,0)). Sum up (keyword: SUM) the value for all cases.
Rename  the value with an alias(keyword: AS) to "Closed Cases".
                                                                        SAP Signavio Analytics Language Guide
150   PUBLIC                                                                         SIGNAL tutorialTo count the value for the canceled cases, reverse the count condition (keyword: 0,1). Rename the column
header with an alias (keyword: AS) to "Canceled Cases".
SIGNAL syntax:

  SELECT
 SUM
  (IF
  ((SELECT  LAST("event_name"))
  IN('Receive  Delivery  Confirmation'),1,0))    AS  "Closed  Cases",
 SUM
  (IF
  ((SELECT  LAST ("event_name"))
 IN('Receive   Delivery  Confirmation'),0,1))    AS  "Canceled  Cases"
 FROM  THIS_PROCESS

Query result: The total number of closed and canceled cases, displayed in a SIGNAL table widget:



    Number      of  closed/cancelled       cases





     Closed  Cases     Canceled   Cases

                805                   72







Example    2: What    is the drop-out    rate?


Learning success: Filter for not true conditions.

Query instruction: Select the last events of the cases (keyword: SELECT LAST + expression: event_name).
Filter the result set(keyword: FILTER (WHERE) for event names other than (keyword: NOT) "Receive Delivery
Confirmation" (keyword: IN+ expression: ('Receive Delivery Confirmation')) and calculate the percentage.
SIGNAL syntax:

  SELECT
  (COUNT(case_id)   FILTER
  (WHERE NOT (SELECT  LAST (event_name)
  IN('Receive  Delivery  Confirmation'))))
  /
 COUNT (case_id)
 *100
 FROM  THIS_PROCESS









SAP Signavio Analytics Language Guide
SIGNAL tutorial                                                                       PUBLIC  151Query results: The drop-out rate, displayed in a Value widget:


    Drop-out    rate


   8,21        %







Example     3: How    many   cases    follow  the  standard     process?

Learning success: Determine the process conformance.
Query instruction: This query is similar to example 2, but in this case, you do not only search for the first or last
event but for a certain pattern of events.
You query the following pattern:
 1. The starting event is "Receive Customer Order" (expression: ''Receive Customer Order')
 2. The next event (directly or indirectly following the start event) is "Receive Payment" (expression: ->
    'Receive Payment').
 3. The next event (directly or indirectly following the preceding event) is either "Ship Goods Standard" or
    "Ship Goods Express"(expression: ~>('Ship Goods Standard | 'Ship Goods Express')) .
 4. The final event (directly or indirectly following the preceding event) is "Receive Delivery Confirmation"
    (expression: 'Receive Delivery Confirmation'$).
For the conformance to this pattern, you calculate the percentage.
SIGNAL  syntax:
  SELECT
  (COUNT(case_id)    FILTER
  (WHERE  event  name  MATCHES
  (^ 'Receive   Customer   Order'
  <>'Receive   Payment'
  ï¿½>('Ship  Goods   Standard'|'Ship    Goods  Express')
  ï¿½> 'Receive   Delivery   Confirmation'$)))
  COUNT(case_id)
 *100
  FROM THIS  PROCESS

Query result: The pattern matching, displayed in a Value widget.




                                                                             SAP Signavio Analytics Language Guide
152   PUBLIC                                                                               SIGNAL tutorial
a a a    Pattern    matching     in %



    85,633%







Example     4: How    many   cases   are  canceled    although     T-shirt  has  been   sent   for
printing?

Learning success: Determine the process conformance.
Query instruction: This query is similar to example 3, but for a different type of pattern: You want to determine
how many  orders have been canceled while the T-Shirt has already been sent for printing.
You query the following pattern:
 1. The starting event is "Receive Customer Order"(expression: ^'Receive Customer Order')
 2. The next event (directly or indirectly following the start event) is "Receive Payment"(expression: ~>
    'Receive Payment').
 3. The next event (directly or indirectly following the preceding event) is "Send T-shirt to Printing"(expression:
    ~>'Ship T-shirt to Printing') .
 4. The final event (directly or indirectly following the preceding event) is "Order Canceled"(expression: 'Order
    Canceled'$).
For the conformance to this pattern, you calculate the percentage.
SIGNAL  syntax:
  SELECT
  (COUNT(case_id)   FILTER
  (WHERE  event  name  MATCHES
  (^ 'Receive   Customer  Order'
  >>'Receive  Payment'
  ï¿½>'Send  T-shirt  to  Printing')
  ï¿½>'Order  Canceled'$)))
  /
  COUNT(case_id)
 *100
  FROM THIS_PROCESS

Query result: The pattern matching, displayed in a Value widget.




SAP Signavio Analytics Language Guide
SIGNAL tutorial                                                                          PUBLIC   153   Canceled    before    printing                ï¿½
   7,07%









                                                                          SAP Signavio Analytics Language Guide
154   PUBLIC                                                                            SIGNAL tutorial Important                        Disclaimers                          and           Legal             Information







Hyperlinks

Some  links are classified by an icon and/or a mouseover text. These links provide additional information.
About the icons:
     Links with the icon  : You are entering a Web site that is not hosted by SAP. By using such links, you agree (unless expressly stated otherwise in your
     agreements with SAP) to this:
           The content of the linked-to site is not SAP documentation. You may not infer any product claims against SAP based on this information.
           SAP does not agree or disagree with the content on the linked-to site, nor does SAP warrant the availability and correctness. SAP shall not be liable for any
           damages caused by the use of such content unless damages have been caused by SAP's gross negligence or willful misconduct.
      Links with the icon : You are leaving the documentation for that particular SAP product or service and are entering an SAP-hosted Web site. By using
      such links, you agree that (unless expressly stated otherwise in your agreements with SAP) you may not infer any product claims against SAP based on this
     information.

Videos        Hosted        on    External         Platforms

Some  videos may point to third-party video hosting platforms. SAP cannot guarantee the future availability of videos stored on these platforms. Furthermore, any
advertisements or other content hosted on these platforms (for example, suggested videos or by navigating to other videos hosted on the same site), are not within
the control or responsibility of SAP.

Beta      and     Other       Experimental             Features

Experimental features are not part of the officially delivered scope that SAP guarantees for future releases. This means that experimental features may be changed by
SAP at any time for any reason without notice. Experimental features are not for productive use. You may not demonstrate, test, examine, evaluate or otherwise use
the experimental features in a live operating environment or with data that has not been sufficiently backed up.
The purpose of experimental features is to get feedback early on, allowing customers and partners to influence the future product accordingly. By providing your
feedback (e.g. in the SAP Community), you accept that intellectual property rights of the contributions or derivative works shall remain the exclusive property of SAP.

Example          Code

Any software coding and/or code snippets are examples. They are not for productive use. The example code is only intended to better explain and visualize the syntax
and phrasing rules. SAP does not warrant the correctness and completeness of the example code. SAP shall not be liable for errors or damages caused by the use of
example code unless damages have been caused by SAP's gross negligence or willful misconduct.

Bias-Free          Language

SAP supports a culture of diversity and inclusion. Whenever possible, we use unbiased language in our documentation to refer to people of all cultures, ethnicities,
genders, and abilities.















SAP Signavio Analytics Language Guide
Important Disclaimers and Legal Information                                                                                     PUBLIC      155www.sap.com/contactsap

























Â© 2023  SAP SE or an SAP affiliate company. All rights reserved.
No part of this publication may be reproduced or transmitted in any form
or for any purpose without the express permission of SAP SE or an SAP
affiliate company. The information contained herein may be changed
without prior notice.
Some  software products marketed by SAP SE and its distributors
contain proprietary software components of other software vendors.
National product specifications may vary.
These materials are provided by SAP SE or an SAP affiliate company for
informational purposes only, without representation or warranty of any
kind, and SAP or its affiliated companies shall not be liable for errors or
omissions with respect to the materials. The only warranties for SAP or
SAP affiliate company products and services are those that are set forth
in the express warranty statements accompanying such products and
services, if any. Nothing herein should be construed as constituting an
additional warranty.
SAP and other SAP products and services mentioned herein as well as
their respective logos are trademarks or registered trademarks of SAP
SE (or an SAP affiliate company) in Germany and other countries. All
other product and service names mentioned are the trademarks of their
respective companies.
Please see https://www.sap.com/about/legal/trademark.html for
additional trademark information and notices.










      THE        BEST         RUN          SAP