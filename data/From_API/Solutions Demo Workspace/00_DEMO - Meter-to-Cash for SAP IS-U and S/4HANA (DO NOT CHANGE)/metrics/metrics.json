{"metrics": [{"id": "volume-of-open-invoices-8", "name": "Volume of open invoices", "description": "Volume of currently open invoices which were not yet paid", "signalFragment": "SUM(\"LastInvoiceAmount\")\n-\n(SUM(\"LastInvoiceAmount\") FILTER (\n\t\tWHERE (SELECT BOOL_OR(event_name IN (${receive_payment_events})\n\t\tAND NOT event_name IN (${invoice_billing_cancellation_events})))\n\t))", "variables": ["receivepaymentevents-1", "invoicebillingcancellationeve-1"], "__typename": "Metric"}, {"id": "number-of-meter-reading-order-16", "name": "Number of meter reading orders that were paid after dunning notice", "description": "Number of meter reading orders that were paid after dunning notice", "signalFragment": "COUNT(case_id) FILTER (\n\tWHERE event_name MATCHES(${order_paid_after_dunning_condition})\n\t)", "variables": ["orderpaidafterdunningconditio-1"], "__typename": "Metric"}, {"id": "average-time-from-create-mete-9", "name": "Average time from 'Create Meter Reading Order' to 'Obtain Meter Reading Data'", "description": "Average time from meter reading order creation to meter reading data obtained", "signalFragment": "AVG(\n\t(SELECT LAST(end_time)\n\t\tWHERE event_name IN (${obtain_readings_events}))\n\t-(SELECT FIRST(end_time)\n\tWHERE event_name IN (${create_reading_orders_events}))\n\t)", "variables": ["obtainreadingsevents-1", "createreadingordersevents-1"], "__typename": "Metric"}, {"id": "percentage-of-meter-reading-o-15", "name": "Percentage of meter reading orders that were paid after dunning notice", "description": "Percentage of meter reading orders that were paid after dunning notice", "signalFragment": "COUNT(case_id) FILTER (\n\tWHERE event_name MATCHES(${order_paid_after_dunning_condition})\n\t)\n/ COUNT(case_id)*100", "variables": ["orderpaidafterdunningconditio-1"], "__typename": "Metric"}, {"id": "percentage-of-meter-reading-o-16", "name": "Percentage of meter reading orders that resulted in a dunning notice", "description": "Percentage of meter reading orders that resulted in a dunning notice", "signalFragment": "COUNT(case_id) FILTER (\n\tWHERE event_name MATCHES(${order_dunning_condition})\n\t)\n/ COUNT(case_id)*100", "variables": ["orderdunningcondition-1"], "__typename": "Metric"}, {"id": "volume-of-overdue-invoices-9", "name": "Volume of overdue invoices", "description": "Volume of currently open invoices which were not yet paid and are overdue", "signalFragment": "COUNT(case_id) FILTER (\n\t\tWHERE ${overdue_invoice_condition}\n\t\tAND (SELECT BOOL_AND(NOT event_name IN (${receive_payment_events}, ${invoice_billing_cancellation_events})))\n\t)", "variables": ["overdueinvoicecondition-1", "receivepaymentevents-1", "invoicebillingcancellationeve-1"], "__typename": "Metric"}, {"id": "percentage-of-meter-readings--8", "name": "Percentage of meter readings with cancellations of invoice or billing", "description": "Percentage of meter readings with cancellations of invoice or billing", "signalFragment": "COUNT(case_id) FILTER (\n\t\tWHERE (SELECT BOOL_OR(event_name IN (${invoice_billing_cancellation_events})))\n\t\t)\n/ COUNT(case_id)\n* 100", "variables": ["invoicebillingcancellationeve-1"], "__typename": "Metric"}, {"id": "number-of-meter-reading-order-15", "name": "Number of meter reading orders that resulted in a dunning notice", "description": "Number of meter reading orders that resulted in a dunning notice", "signalFragment": "COUNT(case_id) FILTER (\n\tWHERE event_name MATCHES(${order_dunning_condition})\n\t)", "variables": ["orderdunningcondition-1"], "__typename": "Metric"}, {"id": "number-of-missing-meter-readi-9", "name": "Number of missing meter readings", "description": "Number of meter readings for which the scheduled reading date is passed, but no data was obtained", "signalFragment": "COUNT (case_id) FILTER (\n\t\tWHERE ${overdue_reading_date_condition}\n\t\tAND (SELECT BOOL_AND(NOT event_name IN (${obtain_readings_events})))\n\t)", "variables": ["overduereadingdatecondition-1", "obtainreadingsevents-1"], "__typename": "Metric"}, {"id": "number-of-manual-changes-to-m-10", "name": "Number of manual changes to meter readings", "description": "Number of manual changes on the obtained meter reading data", "signalFragment": "COUNT(case_id) FILTER (\n\t\tWHERE (SELECT BOOL_OR(event_name IN (${change_readings_events}))\n\t\tAND BOOL_OR(${mtc_manual_changes_condition}))\n\t\t)", "variables": ["changereadingsevents-1", "mtcmanualchangescondition-1"], "__typename": "Metric"}, {"id": "ratio-between-timely-and-late-8", "name": "Ratio between timely and late meter readings", "description": "Ratio between timely and late meter readings", "signalFragment": "(COUNT(case_id) FILTER (\n\tWHERE (\n\t\t(SELECT BOOL_OR(event_name IN (${obtain_readings_events})))\n\t\tAND ${timely_meter_reading_condition})\n\t)\n/\nCOUNT(case_id) FILTER (\n\tWHERE (\n\t\t(SELECT BOOL_OR(event_name IN (${obtain_readings_events})))\n\t\tAND ${late_meter_reading_condition})\n\t)\n)*100", "variables": ["obtainreadingsevents-1", "timelymeterreadingcondition-1", "latemeterreadingcondition-1"], "__typename": "Metric"}, {"id": "percentage-of-timely-meter-re-9", "name": "Percentage of timely meter readings", "description": "Percentage of total meter readings completed on-time", "signalFragment": "COUNT(case_id) FILTER (\n\tWHERE (\n\t\t(SELECT BOOL_OR(event_name IN (${obtain_readings_events})))\n\t\tAND ${timely_meter_reading_condition})\n\t)\n/\nCOUNT(case_id) *100", "variables": ["obtainreadingsevents-1", "timelymeterreadingcondition-1"], "__typename": "Metric"}, {"id": "number-of-meter-readings-perf-20", "name": "Number of meter readings performed on-site", "description": "Number of meter readings performed on-site by utility", "signalFragment": "COUNT(case_id) FILTER (\n\tWHERE (\n\t\tSELECT BOOL_OR(event_name IN (${obtain_readings_events})\n\t\tAND ${utility_reading_condition}))\n\t)", "variables": ["obtainreadingsevents-1", "utilityreadingcondition-1"], "__typename": "Metric"}, {"id": "conformance-level-9", "name": "Conformance level", "description": "Percentage of cases without conformance issues", "signalFragment": "COUNT(case_id) FILTER (\n\tWHERE NOT event_name MATCHES ((${no_happy_path_events}))\n\t)\n/ COUNT(case_id)\n* 100", "variables": ["nohappypathevents-1"], "__typename": "Metric"}, {"id": "number-of-meter-readings-perf-19", "name": "Number of meter readings performed by customer", "description": "Number of meter readings performed by customer (self-reading)", "signalFragment": "COUNT(case_id) FILTER (\n\tWHERE (\n\t\tSELECT BOOL_OR(event_name IN (${obtain_readings_events})\n\t\tAND ${self_reading_condition}))\n\t)", "variables": ["obtainreadingsevents-1", "selfreadingcondition-1"], "__typename": "Metric"}, {"id": "number-of-non-reachable-smart-9", "name": "Number of non-reachable smart meters", "description": "Number of smart meter devices for which no data was transmitted for 10+ days", "signalFragment": "COUNT(case_id) FILTER (WHERE (\n\tSELECT LAST(end_time) FILTER (WHERE event_name IN (${obtain_readings_events}))\n\t-\n\tFIRST(end_time) FILTER (WHERE event_name IN (${create_reading_orders_events}))\n\t) > DURATION ${non_reachable_smart_meters_period}\n)", "variables": ["obtainreadingsevents-1", "createreadingordersevents-1", "nonreachablesmartmetersperiod-1"], "__typename": "Metric"}, {"id": "number-of-meter-reading-data--9", "name": "Number of meter reading data obtained after invoicing", "description": "Number of meter reading data obtained after invoicing period", "signalFragment": "COUNT(case_id) FILTER (\n\tWHERE (\n\t\t(SELECT BOOL_OR(event_name IN (${obtain_readings_events})))\n\t\tAND ${after_invoicing_condition}\n\t)\n)", "variables": ["obtainreadingsevents-1", "afterinvoicingcondition-1"], "__typename": "Metric"}, {"id": "percentage-of-late-meter-read-15", "name": "Percentage of late meter readings", "description": "Percentage of total meter readings completed late", "signalFragment": "COUNT(case_id) FILTER (\n\tWHERE (\n\t\t(SELECT BOOL_OR(event_name IN (${obtain_readings_events})))\n\t\tAND ${late_meter_reading_condition})\n\t)\n/\nCOUNT(case_id) *100", "variables": ["obtainreadingsevents-1", "latemeterreadingcondition-1"], "__typename": "Metric"}], "metricVariables": [{"id": "receivepaymentevents-1", "name": "receive_payment_events", "description": "Events identifying when an invoice has been cleared. For example: 'Receive Incoming Payment'", "value": "'Receive Incoming Payment'", "__typename": "MetricVariable"}, {"id": "overduereadingdatecondition-1", "name": "overdue_reading_date_condition", "description": "Condition defining that the scheduled reading date passed. For example: \"MeterReadingScheduledReadingDate\" < NOW()", "value": "\"MeterReadingScheduledReadingDate\" < NOW()", "__typename": "MetricVariable"}, {"id": "automationcondition-1", "name": "automation_condition", "description": "Attributes indicating that an event was automated, for example \"EventCreatedByUserType\" != 'Dialog'", "value": "\"EventCreatedByUserType\" != 'Dialog'", "__typename": "MetricVariable"}, {"id": "mtcmanualchangescondition-1", "name": "mtc_manual_changes_condition", "description": "Attributes indicating that an event was executed manually. For example: \"EventCreatedByUserType\" = 'Dialog'", "value": "\"EventCreatedByUserType\" = 'Dialog'", "__typename": "MetricVariable"}, {"id": "nohappypathevents-1", "name": "no_happy_path_events", "description": "Events that should not be part of the \"to be\" process. For example: 'Change Meter Reading Data'", "value": "'Change Meter Reading Data' | 'Meter Reading performed by Utility' | 'Meter Reading performed by Customer' | 'Interpolate Meter Reading' | 'Assign Meter Reader' | 'Data Plausbility Check Initially Failed' | 'Data Plausibility Check Failed' | 'Data Plausibility Check Passed' | 'Cancel Billing Document' | 'Cancel Invoice Document' | 'Create Dunning Notice' | 'Billing Doc Plausibility Check Failed' | 'Invoice Doc Plausibility Check Failed'", "__typename": "MetricVariable"}, {"id": "afterinvoicingcondition-1", "name": "after_invoicing_condition", "description": "Condition defining that a given event happens after invoicing. For example: LAST(end_time)) > \"LastInvoiceBillingKeyDate\"", "value": "(SELECT LAST(end_time)) > \"LastInvoiceBillingKeyDate\"", "__typename": "MetricVariable"}, {"id": "utilityreadingcondition-1", "name": "utility_reading_condition", "description": "Condition defining that the reading was performed by utility. For example: \"MeterReadingTypeActual\" = 'Utility'", "value": "\"MeterReadingTypeActual\" = 'Utility'", "__typename": "MetricVariable"}, {"id": "overdueinvoicecondition-1", "name": "overdue_invoice_condition", "description": "Condition defining that the invoice due date passed. For example: \"LastInvoicePaymentDueDate\" < NOW()", "value": "\"LastInvoicePaymentDueDate\" < NOW()", "__typename": "MetricVariable"}, {"id": "latemeterreadingcondition-1", "name": "late_meter_reading_condition", "description": "Condition defining that the meter reading was done late compared to the reference event timestamp. For example: LAST(end_time)) > \"MeterReadingScheduledReadingDate\"", "value": "(SELECT LAST(end_time)) > \"MeterReadingScheduledReadingDate\"", "__typename": "MetricVariable"}, {"id": "selfreadingcondition-1", "name": "self_reading_condition", "description": "Condition defining that the reading was performed by the customer. For example: \"MeterReadingTypeActual\" = 'Customer'", "value": "\"MeterReadingTypeActual\" = 'Customer'", "__typename": "MetricVariable"}, {"id": "orderdunningcondition-1", "name": "order_dunning_condition", "description": "Condition defining that the meter reading order resulted in a dunning notice. For example: 'Create Meter Reading Order' ~> 'Create Dunning Notice'", "value": "'Create Meter Reading Order' ~> 'Create Dunning Notice'", "__typename": "MetricVariable"}, {"id": "timelymeterreadingcondition-1", "name": "timely_meter_reading_condition", "description": "Condition defining that the meter reading was done timely compared to the reference event timestamp. For example: LAST(end_time)) <= \"MeterReadingScheduledReadingDate\"", "value": "(SELECT LAST(end_time)) <= \"MeterReadingScheduledReadingDate\"", "__typename": "MetricVariable"}, {"id": "changereadingsevents-1", "name": "change_readings_events", "description": "Events identifying when meter readings are changed. For example: 'Change Meter Reading Data'", "value": "'Change Meter Reading Data'", "__typename": "MetricVariable"}, {"id": "invoicebillingcancellationeve-1", "name": "invoice_billing_cancellation_events", "description": "Events identifying when invoice or billing documents are cancelled. For example: 'Cancel Billing Document','Cancel Invoice Document'", "value": "'Cancel Billing Document','Cancel Invoice Document'", "__typename": "MetricVariable"}, {"id": "createreadingordersevents-1", "name": "create_reading_orders_events", "description": "Events identifying when meter reading orders are created. For example: 'Create Meter Reading Order'", "value": "'Create Meter Reading Order'", "__typename": "MetricVariable"}, {"id": "obtainreadingsevents-1", "name": "obtain_readings_events", "description": "Events identifying when meter readings data have been obtained. For example: 'Obtain Meter Reading Data'", "value": "'Obtain Meter Reading Data'", "__typename": "MetricVariable"}, {"id": "nonreachablesmartmetersperiod-1", "name": "non_reachable_smart_meters_period", "description": "Reference time period over which a smart meter is considered non-reachable. For example: '10days'", "value": "'10days'", "__typename": "MetricVariable"}, {"id": "orderpaidafterdunningconditio-1", "name": "order_paid_after_dunning_condition", "description": "Condition defining that the meter reading order resulted in a dunning notice and afterwards it was paid. For example: 'Create Meter Reading Order' ~> 'Create Dunning Notice' ~> 'Receive Incoming Payment'", "value": "'Create Meter Reading Order' ~> 'Create Dunning Notice' ~> 'Receive Incoming Payment'", "__typename": "MetricVariable"}]}