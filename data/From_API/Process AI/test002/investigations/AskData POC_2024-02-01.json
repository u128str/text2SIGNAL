{"metrics":[],"metricsVariables":[],"processVariables":[],"investigation":{"name":"AskData POC","rootWidget":{"name":"root chapter","id":"root-chapter-3","visualization":{"type":"CHAPTER"},"filters":[],"children":[{"name":"Process Discovery","id":"process-discovery-3","visualization":{"type":"FUZZY_MODEL","edgeGranularity":4,"nodeGranularity":13,"width":"FULL"},"dataSource":{"type":"STRUCTURED","projections":[{"type":"PARAMETERIZED","attribute":"OCCURRENCES","aggregation":"SUM","parameter":{"type":"SEMANTIC_TYPE","semanticType":"OCCURRENCES"}}]},"filters":[],"children":[]},{"name":"Introduction","id":"introduction-2","visualization":{"type":"CHAPTER"},"filters":[],"children":[{"name":"AskData Natural Language Processing POC","id":"askdata-natural-language-proc-2","visualization":{"type":"TEXT"},"dataSource":{"type":"STATIC","data":{"entityMap":{},"blocks":[{"depth":0,"data":{},"inlineStyleRanges":[],"text":"This investigation was created to demonstrate some (process agnostic) mining use cases in Process Intelligence to support the AskData SIGNAL NLP Proof of Concept.","type":"unstyled","key":"1c9go","entityRanges":[]},{"depth":0,"data":{},"inlineStyleRanges":[],"text":"This template, along with the underlying data source is to be shared with our colleagues at AskData to train an NLP algorithm to translate simple process type questions into SIGNAL code.","type":"unstyled","key":"4m7e9","entityRanges":[]},{"depth":0,"data":{},"inlineStyleRanges":[],"text":"The data source is an Order To Cash Process, however the example SIGNAL can be used for any process type.","type":"unordered-list-item","key":"f5ke7","entityRanges":[]},{"depth":0,"data":{},"inlineStyleRanges":[],"text":"The shape of the process data is outlined in the value widgets below","type":"unordered-list-item","key":"7o9hq","entityRanges":[]},{"depth":0,"data":{},"inlineStyleRanges":[],"text":"Each widget is configured with custom SIGNAL demonstrating query syntax for specific mining scenarios.","type":"unordered-list-item","key":"48t5b","entityRanges":[]}]}},"filters":[],"children":[]},{"name":"Total Cases","id":"total-cases-2","visualization":{"type":"VALUE"},"dataSource":{"type":"SIGNAL","query":"SELECT count(case_id) FROM THIS_PROCESS"},"filters":[],"children":[]},{"name":"Total Events","id":"total-events-2","visualization":{"type":"VALUE"},"dataSource":{"type":"SIGNAL","query":"SELECT count(1) \nFROM FLATTEN(THIS_PROCESS)"},"filters":[],"children":[]},{"name":"Events Per Case","id":"events-per-case-2","visualization":{"type":"VALUE","rounding":{"numberOfDecimals":0,"mode":"ROUND_UP"}},"dataSource":{"type":"SIGNAL","query":"SELECT count(1) / count(distinct case_id)\nFROM FLATTEN(THIS_PROCESS)"},"filters":[],"children":[]},{"name":"Total Variants","id":"total-variants-2","visualization":{"type":"VALUE"},"dataSource":{"type":"SIGNAL","query":"SELECT count(DISTINCT event_name) FROM THIS_PROCESS"},"filters":[],"children":[]}]},{"name":"Use Case: Cycle Time","id":"use-case-cycle-time-2","visualization":{"type":"CHAPTER"},"filters":[],"children":[{"name":"Cycle Time Example 1: Average cycle time across all cases","id":"cycle-time-example-1-average--2","visualization":{"type":"TEXT"},"dataSource":{"type":"STATIC","data":{"entityMap":{},"blocks":[{"depth":0,"data":{},"inlineStyleRanges":[{"offset":49,"length":35,"style":"BOLD"}],"text":"The Value Widget below is configured to show the average cycle time across all cases.","type":"unstyled","key":"avn2a","entityRanges":[]},{"depth":0,"data":{},"inlineStyleRanges":[],"text":"Cycle time is the time between two recorded events, in this case the first and last recorded event across all cases.","type":"unstyled","key":"37hd2","entityRanges":[]}]}},"filters":[],"children":[]},{"name":"Average Cycle Time","id":"average-cycle-time-5","visualization":{"type":"VALUE"},"dataSource":{"type":"SIGNAL","query":"SELECT AVG((SELECT LAST(end_time) - FIRST(end_time))) AS \"Average Cycle Time\"\nFROM THIS_PROCESS"},"filters":[],"children":[]},{"name":"Cycle Time Example 2: Median Cycle Time between Specific Events","id":"cycle-time-example-2-median-c-2","visualization":{"type":"TEXT"},"dataSource":{"type":"STATIC","data":{"entityMap":{},"blocks":[{"depth":0,"data":{},"inlineStyleRanges":[{"offset":49,"length":40,"style":"BOLD"},{"offset":174,"length":1,"style":"BOLD"}],"text":"The Value Widget below is configured to show the median cycle time for returns processing, ie the median cycle time between creating a return request and receiving the return.","type":"unstyled","key":"140b0","entityRanges":[]},{"depth":0,"data":{},"inlineStyleRanges":[],"text":"Cycle time is the time between two recorded events, in this case the first recorded instance of the 'Create Return Request' event, and last recorded instance of the 'Return Received' event across all cases.","type":"unstyled","key":"74qgl","entityRanges":[]}]}},"filters":[],"children":[]},{"name":"Median Returns Cycle Time","id":"median-returns-cycle-time-2","visualization":{"type":"VALUE"},"dataSource":{"type":"SIGNAL","query":"SELECT MEDIAN(\n\t\t\t   (SELECT LAST(end_time) \n\t\t\t    WHERE event_name = 'Receive Return')\n\t\t\t    -\n               (SELECT FIRST(end_time) \n                WHERE event_name = 'Create Return Request')\n             ) AS \"Median Return Cycle Time\"\nFROM THIS_PROCESS"},"filters":[],"children":[]}]},{"name":"Use Case: Variants","id":"use-case-variants-2","visualization":{"type":"CHAPTER"},"filters":[],"children":[{"name":"Variants Example 1: Top X Variants","id":"variants-example-1-top-x-vari-2","visualization":{"type":"TEXT"},"dataSource":{"type":"STATIC","data":{"entityMap":{},"blocks":[{"depth":0,"data":{},"inlineStyleRanges":[{"offset":56,"length":85,"style":"BOLD"}],"text":"The SIGNAL Table Widget below is configured to show the top 5 process variants with their Average Cycle Times, ranked according to Case Count.","type":"unstyled","key":"dtd58","entityRanges":[]},{"depth":0,"data":{},"inlineStyleRanges":[],"text":"A process variant is a unique sequence of recorded events in a process (sometimes referred to as a trace).","type":"unstyled","key":"dd9k4","entityRanges":[]}]}},"filters":[],"children":[]},{"name":"Top 5 Variants and their Average Cycle Time, ranked by Case Count","id":"top-5-variants-and-their-aver-2","visualization":{"type":"OLAP_TABLE","columnConfigurations":[]},"dataSource":{"type":"SIGNAL","query":"SELECT event_name AS \"Variant\", \n  \t   COUNT(DISTINCT case_id) as \"Case Count\",\n       AVG((SELECT LAST(end_time) - FIRST(end_time))) AS \"Average Cycle Time\"\n  FROM THIS_PROCESS\n GROUP BY 1\n ORDER BY 2 DESC\n LIMIT 5"},"filters":[],"children":[]},{"name":"Variant Example 2: Top X Variants by Percentile","id":"variant-example-2-top-x-varia-2","visualization":{"type":"TEXT"},"dataSource":{"type":"STATIC","data":{"entityMap":{},"blocks":[{"depth":0,"data":{},"inlineStyleRanges":[{"offset":56,"length":58,"style":"BOLD"}],"text":"The SIGNAL Table Widget below is configured to show the maximum cycle time of 90% of all cases within each variant. For the purposes of the demo, we limit the results to the top 5 results.","type":"unstyled","key":"eeqkg","entityRanges":[]},{"depth":0,"data":{},"inlineStyleRanges":[],"text":"A process variant is a unique sequence of recorded events in a process (sometimes referred to as a trace).","type":"unstyled","key":"67v41","entityRanges":[]}]}},"filters":[],"children":[]},{"name":"Top 5 Variants ranked by 90th Percentile Cycle Time","id":"top-5-variants-ranked-by-90th-2","visualization":{"type":"OLAP_TABLE","columnConfigurations":[]},"dataSource":{"type":"SIGNAL","query":"SELECT event_name AS \"Variant\", \n\t  PERCENTILE_DISC(0.9) WITHIN GROUP(ORDER BY (SELECT LAST(end_time) - FIRST(end_time))) AS \"90th Percentile Cycle Time per Variant\"\n  FROM THIS_PROCESS\n GROUP BY 1\n ORDER BY 2 DESC\n LIMIT 5"},"filters":[],"children":[]}]},{"name":"Use Case: Rework / Repeated Events","id":"use-case-rework--repeated-eve-2","visualization":{"type":"CHAPTER"},"filters":[],"children":[{"name":"Rework Example 1: Cases with X repeated events","id":"rework-example-1-cases-with-x-2","visualization":{"type":"TEXT"},"dataSource":{"type":"STATIC","data":{"entityMap":{},"blocks":[{"depth":0,"data":{},"inlineStyleRanges":[{"offset":52,"length":19,"style":"BOLD"}],"text":"The SIGNAL Table Widget below is configured to show cases with rework. Rework is identified by a number of repeated process steps exceeding a given threshold. ","type":"unstyled","key":"26ttp","entityRanges":[]},{"depth":0,"data":{},"inlineStyleRanges":[{"offset":84,"length":7,"style":"BOLD"}],"text":"In this example, we show cases that have at least 1 event that is repeated at least 3 times.","type":"unstyled","key":"f19ie","entityRanges":[]}]}},"filters":[],"children":[]},{"name":"Cases with Rework (Any event repeated more than 3 times)","id":"cases-with-rework-any-event-r-2","description":"Rework means the same event_name occurrent multiple times in the same case","visualization":{"type":"OLAP_TABLE","columnConfigurations":[]},"dataSource":{"type":"SIGNAL","query":"SELECT case_id, \"event_name\", \"end_time\", \"Risk Class\" \nFROM THIS_PROCESS\nWHERE (SELECT MAX(occ)\n       FROM (SELECT OCCURRENCE(event_name) AS occ) AS sub) > 3\nORDER BY 1"},"filters":[],"children":[]}]},{"name":"Use Case: Compliance","id":"use-case-compliance-2","visualization":{"type":"CHAPTER"},"filters":[],"children":[{"name":"Compliance Example 1: Compliance Rate for Standard Invoice Processing","id":"compliance-example-1-complian-2","visualization":{"type":"TEXT"},"dataSource":{"type":"STATIC","data":{"entityMap":{},"blocks":[{"depth":0,"data":{},"inlineStyleRanges":[{"offset":49,"length":60,"style":"BOLD"}],"text":"The value widget below is configured to show the compliance rate for standard invoicing with payment received. ","type":"unstyled","key":"8ssgq","entityRanges":[]},{"depth":0,"data":{},"inlineStyleRanges":[],"text":"Compliance rate represents the count of cases exhibiting specific patterns / behaviours / sequences of events, divided by the total number of cases. ","type":"unstyled","key":"5abqm","entityRanges":[]},{"depth":0,"data":{},"inlineStyleRanges":[],"text":"In this example we combine SIGNAL FILTER and MATCHES expressions count cases exhibiting a specific event pattern.","type":"unstyled","key":"3mdrj","entityRanges":[]}]}},"filters":[],"children":[]},{"name":"Invoice Payment Compliance Rate","id":"invoice-payment-compliance-ra-2","visualization":{"type":"VALUE","rounding":{"numberOfDecimals":2,"mode":"ROUND_CLOSEST"},"unit":{"type":"SUFFIX","suffix":"%"}},"dataSource":{"type":"SIGNAL","query":"SELECT (\n\t\tCOUNT(1) FILTER (WHERE event_name MATCHES ('Create Invoice'~> 'Receive Payment'))\n       /\n       COUNT(1)\n       ) * 100 AS \"Standard Invoicing Compliance Rate\"\n\nFROM THIS_PROCESS"},"filters":[],"children":[]}]},{"name":"Use Case: Pattern Matching / Deviations","id":"use-case-pattern-matching--de-2","visualization":{"type":"CHAPTER"},"filters":[],"children":[{"name":"Pattern Matching Example 1: Unpaid Invoices (Standard Process Deviation)","id":"pattern-matching-example-1-un-2","visualization":{"type":"TEXT"},"dataSource":{"type":"STATIC","data":{"entityMap":{},"blocks":[{"depth":0,"data":{},"inlineStyleRanges":[{"offset":49,"length":104,"style":"BOLD"}],"text":"The value widget below is configured to show the count of cases where invoice payment has not been received and customer risk class has not been assessed. ","type":"unstyled","key":"5qu4t","entityRanges":[]},{"depth":0,"data":{},"inlineStyleRanges":[],"text":"We calculate this by counting the cases exhibiting specific behaviours, specifically where the case level attribute 'Risk Class' = 'Not Evaluated' and the event 'Create Invoice' is not followed by the event 'Receive Payment' or 'Cancel Invoice'. ","type":"unstyled","key":"6inpb","entityRanges":[]},{"depth":0,"data":{},"inlineStyleRanges":[],"text":"A behaviour is an expression evaluating case or event level attributes and can be used in a pattern matching expression.","type":"unstyled","key":"ce4lg","entityRanges":[]}]}},"filters":[],"children":[]},{"name":"Unpaid Invoices with Non Evaluated Risk Class","id":"unpaid-invoices-with-non-eval-2","visualization":{"type":"VALUE"},"dataSource":{"type":"SIGNAL","query":"SELECT COUNT(1) AS \"Case Count\"\nFROM THIS_PROCESS\nWHERE \"Risk Class\" = 'Not evaluated'\nAND\nBEHAVIOUR\n         (event_name = 'Create Invoice') AS create_invoice,\n         (\"Risk Class\" = 'Not evaluated') AS no_risk_evaluation\nMATCHES (no_risk_evaluation ~> create_invoice)\nAND \nNOT event_name MATCHES ('Create Invoice' ~> 'Receive Payment')\nAND\nNOT event_name MATCHES ('Create Invoice' ~> 'Cancel Invoice')"},"filters":[],"children":[]},{"name":"Pattern Matching Example 2: Unpaid Invoices by Risk Class (Standard Process Deviation)","id":"pattern-matching-example-2-un-2","visualization":{"type":"TEXT"},"dataSource":{"type":"STATIC","data":{"entityMap":{},"blocks":[{"depth":0,"data":{},"inlineStyleRanges":[{"offset":56,"length":91,"style":"BOLD"}],"text":"The SIGNAL Table widget below is configured to show the count of cases where invoice payment has not been received according to customer risk class.","type":"unstyled","key":"7ghd3","entityRanges":[]},{"depth":0,"data":{},"inlineStyleRanges":[],"text":"We calculate this by counting the cases exhibiting specific behaviours, specifically the event 'Create Invoice' is not followed by the event 'Receive Payment' or 'Cancel Invoice', and group the result by the case level attribute 'Risk Class'.","type":"unstyled","key":"51mfc","entityRanges":[]},{"depth":0,"data":{},"inlineStyleRanges":[],"text":"A behaviour is an expression evaluating case or event level attributes and can be used in a pattern matching expression.","type":"unstyled","key":"e314a","entityRanges":[]}]}},"filters":[],"children":[]},{"name":"Cases by Risk Class where Issued Invoice was neither followed by payment or cancelation","id":"cases-by-risk-class-where-iss-2","visualization":{"type":"OLAP_TABLE","columnConfigurations":[]},"dataSource":{"type":"SIGNAL","query":"SELECT \"Risk Class\", \n\t   COUNT(1) AS \"Case Count\"\nFROM THIS_PROCESS\nWHERE event_name \nMATCHES ('Create Invoice')\nAND\nNOT event_name \nMATCHES ('Create Invoice'\n\t\t~> 'Receive Payment')\nAND\nNOT event_name \nMATCHES ('Create Invoice'\n\t\t~> 'Cancel Invoice')\nGROUP BY 1\nORDER BY 2 DESC"},"filters":[],"children":[]}]},{"name":"Use Case: Timeseries","id":"use-case-timeseries-2","visualization":{"type":"CHAPTER"},"filters":[],"children":[{"name":"Timeseries Example 1: Active Cases within Period","id":"timeseries-example-1-active-c-2","visualization":{"type":"TEXT"},"dataSource":{"type":"STATIC","data":{"entityMap":{},"blocks":[{"depth":0,"data":{},"inlineStyleRanges":[{"offset":56,"length":113,"style":"BOLD"},{"offset":229,"length":6,"style":"BOLD"}],"text":"The SIGNAL Table widget below is configured to show the count of active cases per time period, meaning cases that were started at or before that period but not yet ended. In this example we consider the time period aggregated by months.","type":"unstyled","key":"2ebp1","entityRanges":[]},{"depth":0,"data":{},"inlineStyleRanges":[{"offset":158,"length":15,"style":"BOLD"},{"offset":196,"length":14,"style":"BOLD"}],"text":"We calculate this by calculating a running count of first (case opened) and last (case closed) events per month. We then use the LAG function to subtract the previous period closed cases from the current period opened cases running count to get the total number of active cases started at or before the month but not yet ended.","type":"unstyled","key":"dllld","entityRanges":[]},{"depth":0,"data":{},"inlineStyleRanges":[],"text":"","type":"unstyled","key":"1krc7","entityRanges":[]}]}},"filters":[],"children":[]},{"name":"Active cases by month","id":"active-cases-by-month-2","visualization":{"type":"OLAP_TABLE","columnConfigurations":[]},"dataSource":{"type":"SIGNAL","query":"SELECT \"Month\"\n\t   ,count_started AS \"Cases Started During Month\"\n       ,count_finished AS \"Cases Completed During Month\"\n       ,IF(count_started IS NOT NULL, count_started, 0) - IF(LAG(count_finished) OVER () IS NOT NULL, LAG(count_finished) OVER (), 0) AS \"Active Cases\"\n  FROM (SELECT \"Month\"\n             , SUM(count_started) OVER (ORDER BY \"Month\") AS count_started\n             , SUM(count_finished) OVER (ORDER BY \"Month\") AS count_finished\n          FROM (SELECT \"Month\"\n                     , COUNT(1) FILTER (WHERE started = 1) AS count_started\n                     , COUNT(1) FILTER (WHERE started = 0) AS count_finished\n                  FROM (SELECT date_trunc('month', (SELECT FIRST(end_time))) AS \"Month\", \n                  \t\t\t   1 AS started\n                        FROM THIS_PROCESS\n                        UNION ALL\n                        SELECT date_trunc('month', (SELECT LAST(end_time))) AS \"Month\", \n                               0 AS started\n                        FROM THIS_PROCESS) AS sub\n                 GROUP BY 1\n                 FILL TIMESERIES('month')\n               ) AS sub2\n       ) AS sub3"},"filters":[],"children":[]},{"name":"Time Series: Active cases by month","id":"time-series-active-cases-by-m-2","visualization":{"type":"TIME_SERIES"},"dataSource":{"type":"SIGNAL","query":"SELECT \"Month\"\n       ,IF(count_started IS NOT NULL, count_started, 0) - IF(LAG(count_finished) OVER () IS NOT NULL, LAG(count_finished) OVER (), 0) AS \"Active Cases\"\n  FROM (SELECT \"Month\"\n             , SUM(count_started) OVER (ORDER BY \"Month\") AS count_started\n             , SUM(count_finished) OVER (ORDER BY \"Month\") AS count_finished\n          FROM (SELECT \"Month\"\n                     , COUNT(1) FILTER (WHERE started = 1) AS count_started\n                     , COUNT(1) FILTER (WHERE started = 0) AS count_finished\n                  FROM (SELECT date_trunc('month', (SELECT FIRST(end_time))) AS \"Month\", \n                  \t\t\t   1 AS started\n                        FROM THIS_PROCESS\n                        UNION ALL\n                        SELECT date_trunc('month', (SELECT LAST(end_time))) AS \"Month\", \n                               0 AS started\n                        FROM THIS_PROCESS) AS sub\n                 GROUP BY 1\n                 FILL TIMESERIES('month')\n               ) AS sub2\n       ) AS sub3"},"filters":[],"children":[]}]}]},"metricsBar":[],"eventToShapeMappings":{"mappings":[]}}}