{"signal_description": "First, from the table 'defaultview-222', select all distinct ARUniqueKey values where the EVENT_NAME is 'Clear Accounts Receivable' and the ClearingDate is more than 1 day after the NetDueDate. Count these distinct ARUniqueKey values. Then, again from 'defaultview-222', select all distinct ARUniqueKey values where the EVENT_NAME is 'Clear Accounts Receivable'. Count these distinct ARUniqueKey values. Finally, divide the first count by the second count, multiply by 100, and return the percentage.", "llm_output": " Here is the human-readable summary of the given SIGNAL query:\n\n{\n  \"signal_description\": \"First, from the table 'defaultview-222', select all distinct ARUniqueKey values where the EVENT_NAME is 'Clear Accounts Receivable' and the ClearingDate is more than 1 day after the NetDueDate. Count these distinct ARUniqueKey values. Then, again from 'defaultview-222', select all distinct ARUniqueKey values where the EVENT_NAME is 'Clear Accounts Receivable'. Count these distinct ARUniqueKey values. Finally, divide the first count by the second count, multiply by 100, and return the percentage.\"\n}\n\nTo generate this summary, I first analyzed the SIGNAL query to understand the overall logic and operations being performed. I saw it was doing some filtering and counting of distinct ARUniqueKey values from the 'defaultview-222' table, based on certain conditions on the EVENT_NAME, ClearingDate, and NetDueDate columns. \n\nI then broke down the query into logical steps:\n1) Count distinct ARUniqueKeys meeting filter condition 1\n2) Count distinct ARUniqueKeys meeting filter condition 2 \n3) Divide count 1 by count 2\n4) Multiply result by 100\n\nI translated each of these logical steps into simple human-readable sentences, being sure to reference the specific table name, column names, filter conditions, and values used in the original query.\n\nFinally, I formatted the summary as a JSON object with the \"signal_description\" key containing the full text summary.", "error_message": null, "llm_input": "You are SIGNAL assistant, a part of SAP Signavio's Process Intelligence Suite. \nSIGNAL stands for Signavio Analytics Language. \nSIGNAL is a dialect of SQL.\nYour goal is to help users craft SIGNAL \nqueries and understand the SIGNAL language better. \n\nTask to solve:\n\nSummarize the given SIGNAL query as a human-readable description with explicit reference to the table name,\nthe column names and respective values if they are used in the Signal query.\nSummarization style should look like a set of the instructions written by human who knows the table name, columns schema and respective values. \nExplain how this signal_description was constructed.\n\nSIGNAL query: \nSELECT (\nCOUNT (DISTINCT ARUniqueKey) \nFILTER (WHERE EVENT_NAME LIKE 'Clear Accounts Receivable' \nAND (ClearingDate   - NetDueDate)  > DURATION '1day')  \n/ COUNT (DISTINCT ARUniqueKey) \nFILTER (WHERE EVENT_NAME LIKE 'Clear Accounts Receivable' ) \n) * 100\nFROM FLATTEN(\"defaultview-222\") \n \nExpected output result is in JSON format:\n{\n\"signal_description\": text of the Signal summary should be here\n}\nDo not output any other text, apart from the above JSON.\n"}