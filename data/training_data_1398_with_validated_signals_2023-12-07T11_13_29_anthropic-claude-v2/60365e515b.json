{"signal_description": "From the table 'defaultview-57', select the columns 'Event_Name', 'Following event', 'Event Created By User Type', and 'End_Time'. Alias the 'Event_Name' column as 'Event Name'. Calculate the time difference between the current row's 'End_Time' and the previous row's 'End_Time' for each 'Case_Id', and alias it as 'Event_Cycle_Time'. Filter out rows where 'Event_Cycle_Time' is null. Group the results by 'Event Name' and 'Following event'. For each group, calculate the count of 'Event Name' and alias it as 'Occurence'. Calculate the count of 'Event Name' where 'Event Created By User Type' is 'System' or 'Service', divide it by the total count of 'Event Name', and multiply by 100 to get the 'Automation Rate in %'. Also calculate the average, minimum and maximum of 'Event_Cycle_Time' and alias them as 'AVG Lead Time', 'MIN Lead Time' and 'MAX Lead Time' respectively. Finally, sort the results by 'Occurence' in descending order.", "llm_output": " Here is the summary of the given SIGNAL query in a human-readable format:\n\n{\n  \"signal_description\": \"From the table 'defaultview-57', select the columns 'Event_Name', 'Following event', 'Event Created By User Type', and 'End_Time'. Alias the 'Event_Name' column as 'Event Name'. Calculate the time difference between the current row's 'End_Time' and the previous row's 'End_Time' for each 'Case_Id', and alias it as 'Event_Cycle_Time'. Filter out rows where 'Event_Cycle_Time' is null. Group the results by 'Event Name' and 'Following event'. For each group, calculate the count of 'Event Name' and alias it as 'Occurence'. Calculate the count of 'Event Name' where 'Event Created By User Type' is 'System' or 'Service', divide it by the total count of 'Event Name', and multiply by 100 to get the 'Automation Rate in %'. Also calculate the average, minimum and maximum of 'Event_Cycle_Time' and alias them as 'AVG Lead Time', 'MIN Lead Time' and 'MAX Lead Time' respectively. Finally, sort the results by 'Occurence' in descending order.\"\n}\n\nTo generate this summary, I analyzed the SIGNAL query to identify the key clauses like SELECT, FROM, WHERE, GROUP BY and ORDER BY. I looked at the column names, aliases, aggregate functions and operations to understand what was being calculated. I summarized each part in simple human language while preserving the intent and logic of the original query.", "error_message": null, "llm_input": "You are SIGNAL assistant, a part of SAP Signavio's Process Intelligence Suite. \nSIGNAL stands for Signavio Analytics Language. \nSIGNAL is a dialect of SQL.\nYour goal is to help users craft SIGNAL \nqueries and understand the SIGNAL language better. \n\nTask to solve:\n\nSummarize the given SIGNAL query as a human-readable description with explicit reference to the table name,\nthe column names and respective values if they are used in the Signal query.\nSummarization style should look like a set of the instructions written by human who knows the table name, columns schema and respective values. \nExplain how this signal_description was constructed.\n\nSIGNAL query: \nSELECT\n\tEvent_Name AS \"Event Name\", \n    \"Following event\",\n    COUNT(Event_Name) AS \"Occurence\",\n    COUNT(event_name) FILTER(\n    \tWHERE \"Event Created By User Type\" IN ('System','Service'))\n    / COUNT(\"event_name\") * 100 AS \"Automation Rate in %\",\n    \n    AVG(Event_Cycle_Time) AS \"AVG Lead Time\",\n    MIN(Event_Cycle_Time) AS \"MIN Lead Time\",\n    MAX(Event_Cycle_Time) AS \"MAX Lead Time\"\n    \nFROM (\n\tSELECT\n    \tEvent_Name,\n        LAG(Event_Name) OVER () AS \"Following event\",\n        End_Time - LAG(End_Time) OVER (PARTITION BY Case_Id) AS Event_Cycle_Time,\n        \"Event Created By User Type\"\n\tFROM FLATTEN(\"defaultview-57\") \n) AS sub_query_Event_Cycle_Time\n\nWHERE Event_Cycle_Time IS NOT NULL \nGROUP BY 1, 2\nORDER BY 3 DESC\n \n \nExpected output result is in JSON format:\n{\n\"signal_description\": text of the Signal summary should be here\n}\nDo not output any other text, apart from the above JSON.\n"}