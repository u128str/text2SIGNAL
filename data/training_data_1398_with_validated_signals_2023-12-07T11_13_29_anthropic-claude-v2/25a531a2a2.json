{"signal_description": "From the table 'defaultview-217', select the column 'LastEpic' and two aggregated columns: 1) 'Count' which counts the number of case_id's where the event 'Change Status to In Progress' occurs at least once for that case_id, and 2) 'Rework' which calculates the percentage of case_id's where the event 'Change Status to In Progress' occurs more than once out of the total number of case_id's where it occurs at least once. Order the results by 'Rework' in descending order first, then by 'Count' in descending order.", "llm_output": " Here is the human-readable summary of the given SIGNAL query:\n\n{\n  \"signal_description\": \"From the table 'defaultview-217', select the column 'LastEpic' and two aggregated columns: 1) 'Count' which counts the number of case_id's where the event 'Change Status to In Progress' occurs at least once for that case_id, and 2) 'Rework' which calculates the percentage of case_id's where the event 'Change Status to In Progress' occurs more than once out of the total number of case_id's where it occurs at least once. Order the results by 'Rework' in descending order first, then by 'Count' in descending order.\"  \n}\n\nTo generate this summary, I first analyzed the SELECT clause to see which columns are being selected - the raw column \"LastEpic\" and two aggregated columns \"Count\" and \"Rework\". \n\nI looked at the FROM clause to see the table being queried - \"defaultview-217\".\n\nThen I examined the WHERE clauses in the aggregated columns to understand the logic for filtering and counting the case_id's - filtering for those case_id's where the event \"Change Status to In Progress\" occurs either at least once or more than once.\n\nThe ORDER BY clause tells me how the final results will be sorted. \n\nPutting this all together, I was able to summarize in plain language the intent of the query and how it operates on the data in the table.", "error_message": null, "llm_input": "You are SIGNAL assistant, a part of SAP Signavio's Process Intelligence Suite. \nSIGNAL stands for Signavio Analytics Language. \nSIGNAL is a dialect of SQL.\nYour goal is to help users craft SIGNAL \nqueries and understand the SIGNAL language better. \n\nTask to solve:\n\nSummarize the given SIGNAL query as a human-readable description with explicit reference to the table name,\nthe column names and respective values if they are used in the Signal query.\nSummarization style should look like a set of the instructions written by human who knows the table name, columns schema and respective values. \nExplain how this signal_description was constructed.\n\nSIGNAL query: \nSELECT\n\"LastEpic\" ,\nCOUNT(case_id) FILTER (\nWHERE (SELECT count(event_name) \nWHERE event_name = 'Change Status to In Progress' ) > 0 ) as \"Count\",\n\nCOUNT(case_id) \nFILTER (\n\tWHERE (SELECT count(event_name) WHERE event_name = 'Change Status to In Progress' ) > 1 )\n/ COUNT(case_id) FILTER (\nWHERE (SELECT count(event_name) \n\nWHERE event_name = 'Change Status to In Progress' ) > 0 )\n* 100 as \"Rework\"\nFROM \"defaultview-217\"\nORDER BY 3 DESC, 2 DESC \n \nExpected output result is in JSON format:\n{\n\"signal_description\": text of the Signal summary should be here\n}\nDo not output any other text, apart from the above JSON.\n"}