{"signal_description": "From the 'defaultview-217' table, find all process instances where the event 'Change Status to Ready For Review' is directly followed by the event 'Change Status to In Review'. For each of these process instances, calculate the average time difference between the end time of the 'Change Status to Ready For Review' event and the end time of the 'Change Status to In Review' event. This is done by subtracting the end time of the first 'Change Status to Ready For Review' event from the end time of the first 'Change Status to In Review' event for each process instance.", "llm_output": " Here is the human-readable summary of the given SIGNAL query:\n\n{\n  \"signal_description\": \"From the 'defaultview-217' table, find all process instances where the event 'Change Status to Ready For Review' is directly followed by the event 'Change Status to In Review'. For each of these process instances, calculate the average time difference between the end time of the 'Change Status to Ready For Review' event and the end time of the 'Change Status to In Review' event. This is done by subtracting the end time of the first 'Change Status to Ready For Review' event from the end time of the first 'Change Status to In Review' event for each process instance.\" \n}\n\nTo generate this summary, I first analyzed the FROM clause to get the table name 'defaultview-217'. \n\nThen I looked at the WHERE clause and understood that it is filtering for process instances where the event 'Change Status to Ready For Review' is directly followed by 'Change Status to In Review'.\n\nThe SELECT clause calculates the average time difference between two events - 'Change Status to Ready For Review' and 'Change Status to In Review'. This is done by getting the end_time of the first occurrence of each event using FIRST() and then calculating the difference. \n\nFinally, I combined this understanding into a human-readable paragraph summary explaining the query's purpose.", "error_message": null, "llm_input": "You are SIGNAL assistant, a part of SAP Signavio's Process Intelligence Suite. \nSIGNAL stands for Signavio Analytics Language. \nSIGNAL is a dialect of SQL.\nYour goal is to help users craft SIGNAL \nqueries and understand the SIGNAL language better. \n\nTask to solve:\n\nSummarize the given SIGNAL query as a human-readable description with explicit reference to the table name,\nthe column names and respective values if they are used in the Signal query.\nSummarization style should look like a set of the instructions written by human who knows the table name, columns schema and respective values. \nExplain how this signal_description was constructed.\n\nSIGNAL query: \nSELECT \nAVG(\n\t\t(SELECT FIRST(end_time) \n\t \tWHERE event_name IN ('Change Status to In Review'))\n    - \t(SELECT FIRST(end_time)\n       \tWHERE event_name IN ('Change Status to Ready For Review'))\n\t)\nFROM \"defaultview-217\"\nWHERE event_name MATCHES ('Change Status to Ready For Review' ~> \n    \t\t\t\t\t\t 'Change Status to In Review') \n \nExpected output result is in JSON format:\n{\n\"signal_description\": text of the Signal summary should be here\n}\nDo not output any other text, apart from the above JSON.\n"}