{"signal_description": "From the 'defaultview-197' table, select the 'Overdue Category' column, which categorizes the receivables based on how overdue they are by comparing the current date NOW() to the NetDueDate column. It also selects the count of distinct ARUniqueKey values as '#Receivables'. Only include rows where NetDueDate is not null, the event_name is 'Create Accounts Receivable', ClearingDate is null, and the current date is past the NetDueDate. Group the results by 'Overdue Category' and order by that column ascending.", "llm_output": " Here is the human-readable summary of the given SIGNAL query:\n\n{\n  \"signal_description\": \"From the 'defaultview-197' table, select the 'Overdue Category' column, which categorizes the receivables based on how overdue they are by comparing the current date NOW() to the NetDueDate column. It also selects the count of distinct ARUniqueKey values as '#Receivables'. Only include rows where NetDueDate is not null, the event_name is 'Create Accounts Receivable', ClearingDate is null, and the current date is past the NetDueDate. Group the results by 'Overdue Category' and order by that column ascending.\" \n}\n\nTo generate this summary, I:\n- Identified the main table being queried as 'defaultview-197'\n- Noted the two columns being selected - one generated by the CASE statement ('Overdue Category') and one count aggregate ('#Receivables')\n- Summarized the CASE logic that categorizes by days overdue\n- Listed the WHERE clause filters on specific columns and values\n- Mentioned the GROUP BY and ORDER BY clauses at the end", "error_message": null, "llm_input": "You are SIGNAL assistant, a part of SAP Signavio's Process Intelligence Suite. \nSIGNAL stands for Signavio Analytics Language. \nSIGNAL is a dialect of SQL.\nYour goal is to help users craft SIGNAL \nqueries and understand the SIGNAL language better. \n\nTask to solve:\n\nSummarize the given SIGNAL query as a human-readable description with explicit reference to the table name,\nthe column names and respective values if they are used in the Signal query.\nSummarization style should look like a set of the instructions written by human who knows the table name, columns schema and respective values. \nExplain how this signal_description was constructed.\n\nSIGNAL query: \nSELECT \nCASE \n\nWHEN \n\t\t NOW() = NetDueDate THEN '1. Due'\n              \nWHEN \n\t\t(NOW()-NetDueDate)> DURATION '0day'\n        AND  (NOW()-NetDueDate)<= DURATION '7day'\n        THEN '2. 0-7 days'\n        \nWHEN \n\t\t(NOW()-NetDueDate)> DURATION '7day'\n        AND  (NOW()-NetDueDate)<= DURATION '14day'\n        THEN '3. 8-14 days'\nWHEN \n\t\t(NOW()-NetDueDate)> DURATION '14day'\n        AND  (NOW()-NetDueDate)<= DURATION '30day'\n        THEN '4. 15-30 days'\nWHEN \n\t\t(NOW()-NetDueDate)> DURATION '30day'\n        AND  (NOW()-NetDueDate)<= DURATION '60day'\n        THEN '5. 31-60 days'\n        \nWHEN \n\t\t(NOW()-NetDueDate)> DURATION '60day'\n        AND  (NOW()-NetDueDate)<= DURATION '90day'\n        THEN '6. 61-90 days'\n        \nWHEN \n\t\t(NOW()-NetDueDate)> DURATION '90day'\n        THEN '7. >90 days'\n        \nEND AS \"Overdue Category\",  count(\"ARUniqueKey\" ) as \"#Receivables\"\nFROM FLATTEN (\"defaultview-197\")\n\nWHERE NetDueDate is not null \n\t\tAND event_name = 'Create Accounts Receivable'\n        AND ClearingDate IS NULL\n        AND NOW() >= NetDueDate \n ORDER BY 1 ASC\n  \n \nExpected output result is in JSON format:\n{\n\"signal_description\": text of the Signal summary should be here\n}\nDo not output any other text, apart from the above JSON.\n"}