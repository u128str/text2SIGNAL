{"signal_description": "1. From the table 'defaultview-124', select the CASE_ID and EVENT_NAME columns. \n\n2. For each row, check if the EVENT_NAME is in the list of specific event names like 'Update Contract Net Price'. If it is, set the CHANGES column to 1, otherwise set it to NULL. \n\n3. Group the rows by CASE_ID and count the number of distinct CASE_ID values. Also count the number of distinct non-NULL CHANGES values. \n\n4. Calculate the percentage of cases that had at least one change by dividing the count of distinct non-NULL CHANGES values by the count of distinct CASE_ID values.\n\n5. Return this percentage value.", "llm_output": " Here is the human-readable summary of the given SIGNAL query:\n\n{\n  \"signal_description\": \"1. From the table 'defaultview-124', select the CASE_ID and EVENT_NAME columns. \n\n2. For each row, check if the EVENT_NAME is in the list of specific event names like 'Update Contract Net Price'. If it is, set the CHANGES column to 1, otherwise set it to NULL. \n\n3. Group the rows by CASE_ID and count the number of distinct CASE_ID values. Also count the number of distinct non-NULL CHANGES values. \n\n4. Calculate the percentage of cases that had at least one change by dividing the count of distinct non-NULL CHANGES values by the count of distinct CASE_ID values.\n\n5. Return this percentage value.\"  \n}\n\nTo generate this summary, I first broke down the query into logical steps:\n\n1. Identified the main table being queried - defaultview-124\n\n2. Looked at the subqueries to understand how the data is being transformed - a CASE statement checks EVENT_NAME values and flags changes.\n\n3. Analyzed the outermost query to determine the final calculation - percentage of distinct cases with at least one change.\n\n4. Summarized each logical step in plain language, referring to table and column names explicitly.\n\n5. Joined the step summaries into a coherent paragraph that explains the overall intent of the query.", "error_message": null, "llm_input": "You are SIGNAL assistant, a part of SAP Signavio's Process Intelligence Suite. \nSIGNAL stands for Signavio Analytics Language. \nSIGNAL is a dialect of SQL.\nYour goal is to help users craft SIGNAL \nqueries and understand the SIGNAL language better. \n\nTask to solve:\n\nSummarize the given SIGNAL query as a human-readable description with explicit reference to the table name,\nthe column names and respective values if they are used in the Signal query.\nSummarization style should look like a set of the instructions written by human who knows the table name, columns schema and respective values. \nExplain how this signal_description was constructed.\n\nSIGNAL query: \nSELECT\nCOUNT(DISTINCT IF(CHANGES = 1, CASE_ID, NULL))/COUNT(DISTINCT CASE_ID) * 100\nFROM\n(\n SELECT\n   CASE_ID,\n   IF(EVENT_NAME IN ('Update Contract Net Price' ,'Update Contract Target Quantity' ,'Update Order Confirmation' ,'Update PO Confirmed Delivery Date' ,'Update PO Currency' ,'Update PO Item Material' ,'Update PO Item Net Price' ,'Update PO Item Plant' ,'Update PO Item Quantity' ,'Update PO Payment Terms' ,'Update PO Vendor' ,'Update PR Delivery Date' ,'Update PR Material' ,'Update PR Net Price' ,'Update PR Quantity'),1,NULL) AS CHANGES\n FROM\n  (\n     SELECT \n        CASE_ID,\n       EVENT_NAME\n    FROM FLATTEN(\"defaultview-124\")\n    ) AS SUB1\n) AS SUB2 \n \nExpected output result is in JSON format:\n{\n\"signal_description\": text of the Signal summary should be here\n}\nDo not output any other text, apart from the above JSON.\n"}