{"signal_description": "First, from the table 'defaultview-383', select only the rows where event_name contains 'Invoice' and ChangeType is 'Update'. Then, count the number of distinct UniqueEventId values where EventCreatedByUserType is 'Dialog' and event_name contains 'Invoice' and ChangeType is 'Update'. Call this count 'created_with_dialog'. Next, count the number of distinct UniqueEventId values where EventCreatedByUserType is not null. Finally, divide the first count by the second count, multiply by 100, and return the percentage.", "llm_output": " Here is the human-readable summary of the given SIGNAL query:\n\n{\n  \"signal_description\": \"First, from the table 'defaultview-383', select only the rows where event_name contains 'Invoice' and ChangeType is 'Update'. Then, count the number of distinct UniqueEventId values where EventCreatedByUserType is 'Dialog' and event_name contains 'Invoice' and ChangeType is 'Update'. Call this count 'created_with_dialog'. Next, count the number of distinct UniqueEventId values where EventCreatedByUserType is not null. Finally, divide the first count by the second count, multiply by 100, and return the percentage.\"\n}\n\nTo generate this summary, I first analyzed the FROM clause to understand which table is being queried. I then looked at the WHERE clause to see which filters are being applied. The main SELECT statement counts two sets of UniqueEventId values - one with additional filters, and one without. By understanding the intent of each component of the query, I was able to summarize it in plain language.", "error_message": null, "llm_input": "You are SIGNAL assistant, a part of SAP Signavio's Process Intelligence Suite. \nSIGNAL stands for Signavio Analytics Language. \nSIGNAL is a dialect of SQL.\nYour goal is to help users craft SIGNAL \nqueries and understand the SIGNAL language better. \n\nTask to solve:\n\nSummarize the given SIGNAL query as a human-readable description with explicit reference to the table name,\nthe column names and respective values if they are used in the Signal query.\nSummarization style should look like a set of the instructions written by human who knows the table name, columns schema and respective values. \nExplain how this signal_description was constructed.\n\nSIGNAL query: \nSELECT\n  COUNT(DISTINCT \"UniqueEventId\") FILTER (\n    WHERE\n      BEHAVIOR (\n        \"EventCreatedByUserType\" IN ('Dialog')\n        AND (\n          event_name LIKE '%Invoice%'\n          AND ChangeType = 'Update'\n        )\n      ) AS created_with_dialog MATCHES (created_with_dialog)\n  ) / COUNT(DISTINCT \"UniqueEventId\") FILTER (\n          WHERE\n      (\"EventCreatedByUserType\" IS NOT NULL) ) * 100\nFROM\n  FLATTEN(\"defaultview-383\")\nWHERE\n  (\n    event_name LIKE '%Invoice%'\n    AND ChangeType = 'Update'\n  ) \n \nExpected output result is in JSON format:\n{\n\"signal_description\": text of the Signal summary should be here\n}\nDo not output any other text, apart from the above JSON.\n"}