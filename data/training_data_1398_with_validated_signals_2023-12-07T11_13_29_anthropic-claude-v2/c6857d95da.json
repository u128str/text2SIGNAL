{"signal_description": "From the 'defaultview-183' table, select the 'Division' column. Count the number of 'case_id' values where the 'Actual Release Date' is less than the 'Scheduled Release Date' and alias this count as '# Process Orders released early'. Calculate the percentage of 'case_id' values where 'Actual Release Date' is less than 'Scheduled Release Date' out of the total number of 'case_id' values and alias this as '% Released Early'. Order the results by '# Process Orders released early' in descending order and limit to the top 10 rows.", "llm_output": " Here is the human-readable summary of the given SIGNAL query:\n\n{\n  \"signal_description\": \"From the 'defaultview-183' table, select the 'Division' column. Count the number of 'case_id' values where the 'Actual Release Date' is less than the 'Scheduled Release Date' and alias this count as '# Process Orders released early'. Calculate the percentage of 'case_id' values where 'Actual Release Date' is less than 'Scheduled Release Date' out of the total number of 'case_id' values and alias this as '% Released Early'. Order the results by '# Process Orders released early' in descending order and limit to the top 10 rows.\"  \n}\n\nTo generate this summary, I first identified the main query components:\n- The SELECT clause specifies the columns being retrieved - 'Division', a count of 'case_id' with a filter, and a percentage calculation.\n- The FROM clause specifies the table being queried - 'defaultview-183'.\n- The WHERE clause of the count filter specifies the condition 'Actual Release Date' < 'Scheduled Release Date'.\n- The ORDER BY and LIMIT clauses sort the results and restrict the number of rows returned.\n\nI then described in plain language what data is being retrieved from which table, any filters or calculations being applied, and how the results are sorted and limited. Key details like column names, aliases, and filter values are explicitly mentioned to capture the full meaning of the query.", "error_message": null, "llm_input": "You are SIGNAL assistant, a part of SAP Signavio's Process Intelligence Suite. \nSIGNAL stands for Signavio Analytics Language. \nSIGNAL is a dialect of SQL.\nYour goal is to help users craft SIGNAL \nqueries and understand the SIGNAL language better. \n\nTask to solve:\n\nSummarize the given SIGNAL query as a human-readable description with explicit reference to the table name,\nthe column names and respective values if they are used in the Signal query.\nSummarization style should look like a set of the instructions written by human who knows the table name, columns schema and respective values. \nExplain how this signal_description was constructed.\n\nSIGNAL query: \nSELECT \ncount(case_id) FILTER (WHERE \"Actual Release Date\" - \"Scheduled Release Date\" < DURATION '0seconds') AS \"# Process Orders released early\",\nCOUNT (CASE_ID) FILTER (WHERE \"Actual Release Date\" - \"Scheduled Release Date\" < DURATION '0seconds') / COUNT (CASE_ID)* 100 AS \"% Released Early\",\n\"Division\"\nFROM \"defaultview-183\"\n-- GROUP BY 2\nORDER BY 1 desc\nLIMIT 10 \n \nExpected output result is in JSON format:\n{\n\"signal_description\": text of the Signal summary should be here\n}\nDo not output any other text, apart from the above JSON.\n"}