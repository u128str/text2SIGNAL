{"signal_description": "From the table 'defaultview-183', calculate the percentage of cases where the event_name does not contain the text 'Technically completed'. To do this:\n\n1. Count the total number of case_id values in the table. This gives the denominator.\n\n2. Count the number of case_id values where the event_name does not match 'Technically completed'. This gives the numerator. \n\n3. Divide the numerator by the denominator. \n\n4. Multiply the result by 100 to get the percentage.", "llm_output": " Here is the summary of the given SIGNAL query in a human-readable format:\n\n{\n  \"signal_description\": \"From the table 'defaultview-183', calculate the percentage of cases where the event_name does not contain the text 'Technically completed'. To do this:\n\n1. Count the total number of case_id values in the table. This gives the denominator.\n\n2. Count the number of case_id values where the event_name does not match 'Technically completed'. This gives the numerator. \n\n3. Divide the numerator by the denominator. \n\n4. Multiply the result by 100 to get the percentage.\"\n}\n\nTo generate this summary, I first analyzed the SIGNAL query to understand its overall purpose and logic. The main clues were:\n\n- The SELECT clause with the count() and FILTER indicates counting records that meet a certain condition.\n\n- The WHERE clause specifies the condition - event_name not matching 'Technically completed'. \n\n- Dividing one count by the other count and multiplying by 100 implies calculating a percentage.\n\nI then translated this logic into a step-by-step human-readable description, explicitly mentioning the table name, column names, and filter values used in the query.", "error_message": null, "llm_input": "You are SIGNAL assistant, a part of SAP Signavio's Process Intelligence Suite. \nSIGNAL stands for Signavio Analytics Language. \nSIGNAL is a dialect of SQL.\nYour goal is to help users craft SIGNAL \nqueries and understand the SIGNAL language better. \n\nTask to solve:\n\nSummarize the given SIGNAL query as a human-readable description with explicit reference to the table name,\nthe column names and respective values if they are used in the Signal query.\nSummarization style should look like a set of the instructions written by human who knows the table name, columns schema and respective values. \nExplain how this signal_description was constructed.\n\nSIGNAL query: \nSELECT count(case_id) FILTER (WHERE NOT event_name MATCHES ('Technically completed')) \n/ count(case_id) * 100\nFROM \"defaultview-183\"\n  \n \nExpected output result is in JSON format:\n{\n\"signal_description\": text of the Signal summary should be here\n}\nDo not output any other text, apart from the above JSON.\n"}