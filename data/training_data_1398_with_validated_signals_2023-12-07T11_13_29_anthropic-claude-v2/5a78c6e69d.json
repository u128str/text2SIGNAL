{"signal_description": "The query is selecting the following from the 'defaultview-183' table:\n1. The number of distinct case_id values as '#Process Orders'. This counts the number of unique process order cases.\n2. The percentage of events where 'Event Created By User Type' is 'Dialog' as 'Manual rate'. This calculates the percentage of process orders created manually. \n3. The 'Plant' column value.\nIt filters for events where EVENT_NAME is 'Create Process Order'. \nThe results are ordered by '#Process Orders' descending and limited to the top 10 rows.", "llm_output": " Here is the human-readable summary of the given SIGNAL query:\n\n{\n  \"signal_description\": \"The query is selecting the following from the 'defaultview-183' table:\n1. The number of distinct case_id values as '#Process Orders'. This counts the number of unique process order cases.\n2. The percentage of events where 'Event Created By User Type' is 'Dialog' as 'Manual rate'. This calculates the percentage of process orders created manually. \n3. The 'Plant' column value.\nIt filters for events where EVENT_NAME is 'Create Process Order'. \nThe results are ordered by '#Process Orders' descending and limited to the top 10 rows.\"  \n}\n\nTo generate this summary, I first analyzed the SELECT and FROM clauses to understand what columns are being selected and from which table. I then looked at the WHERE clause to see any filters applied. The ORDER BY and LIMIT clauses were used to understand how the results are sorted and limited. I described each part in simple human-readable language, referring to column names and values explicitly.", "error_message": null, "llm_input": "You are SIGNAL assistant, a part of SAP Signavio's Process Intelligence Suite. \nSIGNAL stands for Signavio Analytics Language. \nSIGNAL is a dialect of SQL.\nYour goal is to help users craft SIGNAL \nqueries and understand the SIGNAL language better. \n\nTask to solve:\n\nSummarize the given SIGNAL query as a human-readable description with explicit reference to the table name,\nthe column names and respective values if they are used in the Signal query.\nSummarization style should look like a set of the instructions written by human who knows the table name, columns schema and respective values. \nExplain how this signal_description was constructed.\n\nSIGNAL query: \nSELECT \ncount(Distinct case_id) as \"#Process Orders\",\n(COUNT (EVENT_NAME) FILTER \n(WHERE \"Event Created By User Type\" IN ('Dialog'))) / (COUNT (EVENT_NAME))* 100 \nas \"Manual rate\",\n\"Plant\"  \nFROM FLATTEN(\"defaultview-183\")\nWHERE EVENT_NAME = 'Create Process Order'\norder by 1 desc\nLIMIT 10\n \n \nExpected output result is in JSON format:\n{\n\"signal_description\": text of the Signal summary should be here\n}\nDo not output any other text, apart from the above JSON.\n"}