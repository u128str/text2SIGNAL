{"signal_description": "From the table 'defaultview-529', select the month truncated date of the last occurrence of the 'Clear Invoice' event as 'Invoice Clearing Date'. Also calculate the percentage of cases where the 'Last Inv. Item Due Date' is less than the 'Last Inv. Item Clearing Date' out of all cases where 'Last Inv. Item Clearing Date' is not null, and name this 'Payment Rate'. Only include cases where the event 'Post Invoice' is directly followed by the event 'Clear Invoice'. Order the results by 'Invoice Clearing Date' ascending, filling in any missing months.", "llm_output": " Here is the human-readable summary of the given SIGNAL query:\n\n{\n  \"signal_description\": \"From the table 'defaultview-529', select the month truncated date of the last occurrence of the 'Clear Invoice' event as 'Invoice Clearing Date'. Also calculate the percentage of cases where the 'Last Inv. Item Due Date' is less than the 'Last Inv. Item Clearing Date' out of all cases where 'Last Inv. Item Clearing Date' is not null, and name this 'Payment Rate'. Only include cases where the event 'Post Invoice' is directly followed by the event 'Clear Invoice'. Order the results by 'Invoice Clearing Date' ascending, filling in any missing months.\"  \n}\n\nTo generate this summary, I first analyzed the overall structure of the query:\n- The main query is a SELECT with a FROM and WHERE clause\n- It selects two computed columns: one a date truncation and one an expression calculating a percentage \n- The FROM names the table 'defaultview-529'\n- The WHERE filters on a sequence of two events \n- There is an ORDER BY clause \n\nI then looked at each selected column:\n- The first truncates the end time of the last 'Clear Invoice' event to month granularity and names it \"Invoice Clearing Date\"\n- The second calculates a percentage based on a conditional count of case IDs and names it \"Payment Rate\"\n\nFor the WHERE clause, I summarized the filter on the event sequence. \n\nFinally, I described the ORDER BY clause sorting by the first column and filling in times.\n\nBy inspecting each component of the query and summarizing it in simple terms, I was able to generate a human-readable description of what the overall query is doing.", "error_message": null, "llm_input": "You are SIGNAL assistant, a part of SAP Signavio's Process Intelligence Suite. \nSIGNAL stands for Signavio Analytics Language. \nSIGNAL is a dialect of SQL.\nYour goal is to help users craft SIGNAL \nqueries and understand the SIGNAL language better. \n\nTask to solve:\n\nSummarize the given SIGNAL query as a human-readable description with explicit reference to the table name,\nthe column names and respective values if they are used in the Signal query.\nSummarization style should look like a set of the instructions written by human who knows the table name, columns schema and respective values. \nExplain how this signal_description was constructed.\n\nSIGNAL query: \nSELECT\n  DATE_TRUNC(\n    'Month',\n    (\n      SELECT\n        LAST (END_TIME) FILTER (\n          WHERE\n            EVENT_NAME IN ('Clear Invoice')\n        )\n    )\n  ) AS \"Invoice Clearing Date\",\n  COUNT(case_id) FILTER (\n    WHERE\n      (\n        \"Last Inv. Item Due Date\" < \"Last Inv. Item Clearing Date\"\n      )\n  ) / COUNT(case_id) FILTER (\n    WHERE\n      (\"Last Inv. Item Clearing Date\" IS NOT NULL)\n  ) * 100 AS \"Payment Rate\"\nFROM\n  \"defaultview-529\"\nWHERE\n  EVENT_NAME MATCHES ('Post Invoice' ~> 'Clear Invoice')\nORDER BY\n  1 ASC NULLS FIRST FILL TIMESERIES('Month') \n \nExpected output result is in JSON format:\n{\n\"signal_description\": text of the Signal summary should be here\n}\nDo not output any other text, apart from the above JSON.\n"}