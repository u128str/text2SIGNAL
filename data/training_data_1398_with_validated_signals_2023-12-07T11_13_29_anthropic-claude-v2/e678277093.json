{"signal_description": "From the table 'defaultview-383', select the count of distinct 'UniqueEventId' values as '# Changes per case', the 'event_name' column aliased as 'SO Change', and the 'InvoiceCompanyCode' column aliased as 'Company Code Name'. Filter the rows where 'EventCreatedByUserType' is 'Dialog', 'event_name' contains 'Sales Doc', and 'ChangeType' is 'Update'. Group the results by 'SO Change' and 'Company Code Name'. Order the results by '# Changes per case' in descending order. Limit the results to 20 rows.", "llm_output": " Here is the human-readable summary of the given SIGNAL query:\n\n{\n  \"signal_description\": \"From the table 'defaultview-383', select the count of distinct 'UniqueEventId' values as '# Changes per case', the 'event_name' column aliased as 'SO Change', and the 'InvoiceCompanyCode' column aliased as 'Company Code Name'. Filter the rows where 'EventCreatedByUserType' is 'Dialog', 'event_name' contains 'Sales Doc', and 'ChangeType' is 'Update'. Group the results by 'SO Change' and 'Company Code Name'. Order the results by '# Changes per case' in descending order. Limit the results to 20 rows.\"  \n}\n\nTo generate this summary, I:\n- Identified the table name as 'defaultview-383'\n- Parsed the SELECT clause to determine the columns and aliases\n- Parsed the WHERE clause to identify the filters on specific columns and values \n- Noted the GROUP BY and ORDER BY clauses\n- Included the LIMIT clause \n- Wrote the summary in plain language, mentioning the key elements like table name, columns, filters, sorting, and limits", "error_message": null, "llm_input": "You are SIGNAL assistant, a part of SAP Signavio's Process Intelligence Suite. \nSIGNAL stands for Signavio Analytics Language. \nSIGNAL is a dialect of SQL.\nYour goal is to help users craft SIGNAL \nqueries and understand the SIGNAL language better. \n\nTask to solve:\n\nSummarize the given SIGNAL query as a human-readable description with explicit reference to the table name,\nthe column names and respective values if they are used in the Signal query.\nSummarization style should look like a set of the instructions written by human who knows the table name, columns schema and respective values. \nExplain how this signal_description was constructed.\n\nSIGNAL query: \nSELECT\n  COUNT(DISTINCT \"UniqueEventId\") AS \"# Changes per case\",\n  event_name AS \"SO Change\",\n  \"InvoiceCompanyCode\" AS \"Company Code Name\"\nFROM\n  FLATTEN(\"defaultview-383\")\nWHERE\n  BEHAVIOR (\n    \"EventCreatedByUserType\" IN ('Dialog')\n    AND event_name LIKE '%Sales Doc%'\n    AND ChangeType = 'Update'\n  ) AS created_with_dialog MATCHES (created_with_dialog)\nGROUP BY 2,3\nORDER BY\n  1 DESC\nLIMIT 20 \n \nExpected output result is in JSON format:\n{\n\"signal_description\": text of the Signal summary should be here\n}\nDo not output any other text, apart from the above JSON.\n"}