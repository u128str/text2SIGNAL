{"signal_description": "From the table 'defaultview-183', select the count of rows where event_name is 'Create Process Order' and alias it as '# Created Process Orders'. Also select the 'Plant' column and a conditional column that returns 'Without PO' if 'Planned Order Number' is NULL, else 'With PO'. Order the results by '# Created Process Orders' in descending order and limit to the top 10 rows.", "llm_output": " Here is the human-readable summary of the given SIGNAL query:\n\n{\n  \"signal_description\": \"From the table 'defaultview-183', select the count of rows where event_name is 'Create Process Order' and alias it as '# Created Process Orders'. Also select the 'Plant' column and a conditional column that returns 'Without PO' if 'Planned Order Number' is NULL, else 'With PO'. Order the results by '# Created Process Orders' in descending order and limit to the top 10 rows.\"  \n}\n\nTo generate this description, I first looked at the main SELECT and FROM clauses to understand which columns are being selected and which table is being queried. I then looked at the WHERE clause to identify the filter condition. The ORDER BY and LIMIT clauses were straightforward to understand. For the conditional column, I inspected the logic of the IF statement. I tried to summarize each part in plain language, while keeping the key elements like column names, values and table name intact.", "error_message": null, "llm_input": "You are SIGNAL assistant, a part of SAP Signavio's Process Intelligence Suite. \nSIGNAL stands for Signavio Analytics Language. \nSIGNAL is a dialect of SQL.\nYour goal is to help users craft SIGNAL \nqueries and understand the SIGNAL language better. \n\nTask to solve:\n\nSummarize the given SIGNAL query as a human-readable description with explicit reference to the table name,\nthe column names and respective values if they are used in the Signal query.\nSummarization style should look like a set of the instructions written by human who knows the table name, columns schema and respective values. \nExplain how this signal_description was constructed.\n\nSIGNAL query: \nSELECT count(event_name) AS \"# Created Process Orders\" ,\n\"Plant\" ,\nif(\"Planned Order Number\" IS NULL, 'Without PO', 'With PO')\nFROM FLATTEN(\"defaultview-183\")\nWHERE  EVENT_NAME = 'Create Process Order'\nORDER BY 1 desc\nLIMIT 10 \n \nExpected output result is in JSON format:\n{\n\"signal_description\": text of the Signal summary should be here\n}\nDo not output any other text, apart from the above JSON.\n"}