{"signal_description": "1. From the 'defaultview-124' table, select the case_id column.\n2. Count the number of case_id's where the event_name column matches the sequence 'Create PO Item' -> 'Release PO' -> 'Create Goods Receipt' -> ('Record Invoice Receipt' OR 'Create FI Invoice') -> 'Clear Invoice'. Call this count A.\n3. Count the number of case_id's where the event_name column matches 'Clear Invoice'. Call this count B. \n4. Calculate the percentage by dividing A by B and multiplying by 100.", "llm_output": " Here is the human-readable summary of the given SIGNAL query:\n\n{\n  \"signal_description\": \"1. From the 'defaultview-124' table, select the case_id column.\n2. Count the number of case_id's where the event_name column matches the sequence 'Create PO Item' -> 'Release PO' -> 'Create Goods Receipt' -> ('Record Invoice Receipt' OR 'Create FI Invoice') -> 'Clear Invoice'. Call this count A.\n3. Count the number of case_id's where the event_name column matches 'Clear Invoice'. Call this count B. \n4. Calculate the percentage by dividing A by B and multiplying by 100.\"\n}\n\nTo generate this summary, I first analyzed the SIGNAL query to identify the table name, column names, filter conditions, and aggregation functions used. I then translated each component into plain English instructions, while preserving the logical flow and relationships between the query parts. The filter conditions were summarized by explicitly listing out the sequence of event names matched. The final percentage calculation was explained in terms of the intermediate counts generated in the query.", "error_message": null, "llm_input": "You are SIGNAL assistant, a part of SAP Signavio's Process Intelligence Suite. \nSIGNAL stands for Signavio Analytics Language. \nSIGNAL is a dialect of SQL.\nYour goal is to help users craft SIGNAL \nqueries and understand the SIGNAL language better. \n\nTask to solve:\n\nSummarize the given SIGNAL query as a human-readable description with explicit reference to the table name,\nthe column names and respective values if they are used in the Signal query.\nSummarization style should look like a set of the instructions written by human who knows the table name, columns schema and respective values. \nExplain how this signal_description was constructed.\n\nSIGNAL query: \n\nSELECT\nCOUNT(case_id) FILTER (\n\tWHERE event_name MATCHES('Create PO Item'\n\t~> 'Release PO'\n\t~> 'Create Goods Receipt'\n\t~> ('Record Invoice Receipt'|'Create FI Invoice')\n\t~> 'Clear Invoice')) \n/ COUNT(case_id) FILTER (\n\tWHERE event_name MATCHES ('Clear Invoice'))\n* 100\nFROM \"defaultview-124\"\n                 \n \nExpected output result is in JSON format:\n{\n\"signal_description\": text of the Signal summary should be here\n}\nDo not output any other text, apart from the above JSON.\n"}