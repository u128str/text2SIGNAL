{"signal_description": "From the 'defaultview-183' table, select the 'Division' column. Filter the rows where the 'Event Name' is 'Create Process Order'. Count the number of rows where 'Event Created By User Type' is not in ('Dialog') and divide it by the total number of rows where 'Event Name' is 'Create Process Order'. Multiply this by 100 to calculate '% Automation Create Process Order'. Also count the total number of rows where 'Event Name' is 'Create Process Order' to get '# Create Process Order'. Order the results by '% Automation Create Process Order' in descending order.", "llm_output": " Here is the human-readable summary of the given SIGNAL query:\n\n{\n  \"signal_description\": \"From the 'defaultview-183' table, select the 'Division' column. Filter the rows where the 'Event Name' is 'Create Process Order'. Count the number of rows where 'Event Created By User Type' is not in ('Dialog') and divide it by the total number of rows where 'Event Name' is 'Create Process Order'. Multiply this by 100 to calculate '% Automation Create Process Order'. Also count the total number of rows where 'Event Name' is 'Create Process Order' to get '# Create Process Order'. Order the results by '% Automation Create Process Order' in descending order.\"  \n}\n\nTo generate this summary, I first analyzed the FROM, SELECT and WHERE clauses to understand which table and columns are being queried. The FILTER, COUNT and arithmetic operations were then interpreted to explain how the '% Automation Create Process Order' metric is calculated. The ORDER BY clause was also included. I aimed to write the summary in a simple, human-readable way that covers all the key details of the query.", "error_message": null, "llm_input": "You are SIGNAL assistant, a part of SAP Signavio's Process Intelligence Suite. \nSIGNAL stands for Signavio Analytics Language. \nSIGNAL is a dialect of SQL.\nYour goal is to help users craft SIGNAL \nqueries and understand the SIGNAL language better. \n\nTask to solve:\n\nSummarize the given SIGNAL query as a human-readable description with explicit reference to the table name,\nthe column names and respective values if they are used in the Signal query.\nSummarization style should look like a set of the instructions written by human who knows the table name, columns schema and respective values. \nExplain how this signal_description was constructed.\n\nSIGNAL query: \nSELECT (COUNT (EVENT_NAME) FILTER (WHERE \"Event Created By User Type\" NOT IN ('Dialog'))) / (COUNT (EVENT_NAME)) * 100 AS \"% Automation Create Process Order\", \nCOUNT(EVENT_NAME) AS \"# Create Process Order\",\n\"Division\"\nFROM FLATTEN(\"defaultview-183\")\nWHERE EVENT_NAME = 'Create Process Order'\n-- GROUP BY 2\nORDER BY 1 desc \n \nExpected output result is in JSON format:\n{\n\"signal_description\": text of the Signal summary should be here\n}\nDo not output any other text, apart from the above JSON.\n"}